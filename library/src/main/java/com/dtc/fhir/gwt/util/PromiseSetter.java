package com.dtc.fhir.gwt.util;

import java.util.Arrays;
import java.util.List;
import com.dtc.fhir.gwt.*;

// ==== 這是由 code generator 產生，請不要手動維護 ==== //

public class PromiseSetter {
	/**
	 * @param path 例如：<code>a.b[0].c</code> 代表 getA().getB().get(0).setC()。
	 * 	不支援 extension、contained、class 這幾個的 getter / setter。
	 */
	public static void set(Resource instance, String path, Object value) {
		List<String> pathList = Arrays.asList(path.split("[..]"));
		set(instance, pathList, value);
	}

	/**
	 * @param path 例如：<code>a.b[0].c</code> 代表 getA().getB().get(0).setC()。
	 * 	不支援 extension、contained、class 這幾個的 getter / setter。
	 */
	public static void set(Element instance, String path, Object value) {
		List<String> pathList = Arrays.asList(path.split("[..]"));
		set(instance, pathList, value);
	}
	
	private static int parseIndex(String name) {
		int start = name.indexOf("[");

		if (start == -1) { return 0; }

		int end = name.indexOf("]", start);

		if (end == -1) { return 0; }

		try {
			return Integer.parseInt(name.substring(start+1, end));
		} catch (Exception e) {
			return 0;
		}
	}
	
	private static String parseName(String name) {
		int start = name.indexOf("[");
		return start == -1 ? name : name.substring(0, start);
	}
	
	// ======== 以上是不會變動分隔線 ======== //
	
	private static void set(Object instance, List<String> path, Object value) {
		switch (instance.getClass().getName()) {
				case "com.dtc.fhir.gwt.Account":
			SetAccount.set((com.dtc.fhir.gwt.Account)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AccountStatus":
			SetAccountStatus.set((com.dtc.fhir.gwt.AccountStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ActionList":
			SetActionList.set((com.dtc.fhir.gwt.ActionList)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Address":
			SetAddress.set((com.dtc.fhir.gwt.Address)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AddressType":
			SetAddressType.set((com.dtc.fhir.gwt.AddressType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AddressUse":
			SetAddressUse.set((com.dtc.fhir.gwt.AddressUse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AdministrativeGender":
			SetAdministrativeGender.set((com.dtc.fhir.gwt.AdministrativeGender)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Age":
			SetAge.set((com.dtc.fhir.gwt.Age)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AggregationMode":
			SetAggregationMode.set((com.dtc.fhir.gwt.AggregationMode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AllergyIntolerance":
			SetAllergyIntolerance.set((com.dtc.fhir.gwt.AllergyIntolerance)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AllergyIntoleranceCategory":
			SetAllergyIntoleranceCategory.set((com.dtc.fhir.gwt.AllergyIntoleranceCategory)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AllergyIntoleranceCertainty":
			SetAllergyIntoleranceCertainty.set((com.dtc.fhir.gwt.AllergyIntoleranceCertainty)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AllergyIntoleranceCriticality":
			SetAllergyIntoleranceCriticality.set((com.dtc.fhir.gwt.AllergyIntoleranceCriticality)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AllergyIntoleranceReaction":
			SetAllergyIntoleranceReaction.set((com.dtc.fhir.gwt.AllergyIntoleranceReaction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AllergyIntoleranceSeverity":
			SetAllergyIntoleranceSeverity.set((com.dtc.fhir.gwt.AllergyIntoleranceSeverity)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AllergyIntoleranceStatus":
			SetAllergyIntoleranceStatus.set((com.dtc.fhir.gwt.AllergyIntoleranceStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AllergyIntoleranceType":
			SetAllergyIntoleranceType.set((com.dtc.fhir.gwt.AllergyIntoleranceType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Annotation":
			SetAnnotation.set((com.dtc.fhir.gwt.Annotation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AnswerFormat":
			SetAnswerFormat.set((com.dtc.fhir.gwt.AnswerFormat)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Appointment":
			SetAppointment.set((com.dtc.fhir.gwt.Appointment)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AppointmentParticipant":
			SetAppointmentParticipant.set((com.dtc.fhir.gwt.AppointmentParticipant)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AppointmentResponse":
			SetAppointmentResponse.set((com.dtc.fhir.gwt.AppointmentResponse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AppointmentStatus":
			SetAppointmentStatus.set((com.dtc.fhir.gwt.AppointmentStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AssertionDirectionType":
			SetAssertionDirectionType.set((com.dtc.fhir.gwt.AssertionDirectionType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AssertionOperatorType":
			SetAssertionOperatorType.set((com.dtc.fhir.gwt.AssertionOperatorType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AssertionResponseTypes":
			SetAssertionResponseTypes.set((com.dtc.fhir.gwt.AssertionResponseTypes)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Attachment":
			SetAttachment.set((com.dtc.fhir.gwt.Attachment)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEvent":
			SetAuditEvent.set((com.dtc.fhir.gwt.AuditEvent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEventAction":
			SetAuditEventAction.set((com.dtc.fhir.gwt.AuditEventAction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEventDetail":
			SetAuditEventDetail.set((com.dtc.fhir.gwt.AuditEventDetail)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEventEvent":
			SetAuditEventEvent.set((com.dtc.fhir.gwt.AuditEventEvent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEventNetwork":
			SetAuditEventNetwork.set((com.dtc.fhir.gwt.AuditEventNetwork)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEventObject":
			SetAuditEventObject.set((com.dtc.fhir.gwt.AuditEventObject)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEventOutcome":
			SetAuditEventOutcome.set((com.dtc.fhir.gwt.AuditEventOutcome)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEventParticipant":
			SetAuditEventParticipant.set((com.dtc.fhir.gwt.AuditEventParticipant)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEventParticipantNetworkType":
			SetAuditEventParticipantNetworkType.set((com.dtc.fhir.gwt.AuditEventParticipantNetworkType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.AuditEventSource":
			SetAuditEventSource.set((com.dtc.fhir.gwt.AuditEventSource)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BackboneElement":
			SetBackboneElement.set((com.dtc.fhir.gwt.BackboneElement)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Base64Binary":
			SetBase64Binary.set((com.dtc.fhir.gwt.Base64Binary)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Basic":
			SetBasic.set((com.dtc.fhir.gwt.Basic)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Binary":
			SetBinary.set((com.dtc.fhir.gwt.Binary)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BindingStrength":
			SetBindingStrength.set((com.dtc.fhir.gwt.BindingStrength)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BodySite":
			SetBodySite.set((com.dtc.fhir.gwt.BodySite)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BooleanDt":
			SetBooleanDt.set((com.dtc.fhir.gwt.BooleanDt)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Bundle":
			SetBundle.set((com.dtc.fhir.gwt.Bundle)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BundleEntry":
			SetBundleEntry.set((com.dtc.fhir.gwt.BundleEntry)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BundleLink":
			SetBundleLink.set((com.dtc.fhir.gwt.BundleLink)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BundleRequest":
			SetBundleRequest.set((com.dtc.fhir.gwt.BundleRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BundleResponse":
			SetBundleResponse.set((com.dtc.fhir.gwt.BundleResponse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BundleSearch":
			SetBundleSearch.set((com.dtc.fhir.gwt.BundleSearch)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.BundleType":
			SetBundleType.set((com.dtc.fhir.gwt.BundleType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CarePlan":
			SetCarePlan.set((com.dtc.fhir.gwt.CarePlan)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CarePlanActivity":
			SetCarePlanActivity.set((com.dtc.fhir.gwt.CarePlanActivity)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CarePlanActivityStatus":
			SetCarePlanActivityStatus.set((com.dtc.fhir.gwt.CarePlanActivityStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CarePlanDetail":
			SetCarePlanDetail.set((com.dtc.fhir.gwt.CarePlanDetail)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CarePlanParticipant":
			SetCarePlanParticipant.set((com.dtc.fhir.gwt.CarePlanParticipant)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CarePlanRelatedPlan":
			SetCarePlanRelatedPlan.set((com.dtc.fhir.gwt.CarePlanRelatedPlan)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CarePlanRelationship":
			SetCarePlanRelationship.set((com.dtc.fhir.gwt.CarePlanRelationship)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CarePlanStatus":
			SetCarePlanStatus.set((com.dtc.fhir.gwt.CarePlanStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Claim":
			SetClaim.set((com.dtc.fhir.gwt.Claim)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimCoverage":
			SetClaimCoverage.set((com.dtc.fhir.gwt.ClaimCoverage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimDetail":
			SetClaimDetail.set((com.dtc.fhir.gwt.ClaimDetail)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimDiagnosis":
			SetClaimDiagnosis.set((com.dtc.fhir.gwt.ClaimDiagnosis)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimItem":
			SetClaimItem.set((com.dtc.fhir.gwt.ClaimItem)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimMissingTeeth":
			SetClaimMissingTeeth.set((com.dtc.fhir.gwt.ClaimMissingTeeth)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimPayee":
			SetClaimPayee.set((com.dtc.fhir.gwt.ClaimPayee)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimProsthesis":
			SetClaimProsthesis.set((com.dtc.fhir.gwt.ClaimProsthesis)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponse":
			SetClaimResponse.set((com.dtc.fhir.gwt.ClaimResponse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseAddItem":
			SetClaimResponseAddItem.set((com.dtc.fhir.gwt.ClaimResponseAddItem)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseAdjudication":
			SetClaimResponseAdjudication.set((com.dtc.fhir.gwt.ClaimResponseAdjudication)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseAdjudication1":
			SetClaimResponseAdjudication1.set((com.dtc.fhir.gwt.ClaimResponseAdjudication1)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseAdjudication2":
			SetClaimResponseAdjudication2.set((com.dtc.fhir.gwt.ClaimResponseAdjudication2)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseAdjudication3":
			SetClaimResponseAdjudication3.set((com.dtc.fhir.gwt.ClaimResponseAdjudication3)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseAdjudication4":
			SetClaimResponseAdjudication4.set((com.dtc.fhir.gwt.ClaimResponseAdjudication4)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseCoverage":
			SetClaimResponseCoverage.set((com.dtc.fhir.gwt.ClaimResponseCoverage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseDetail":
			SetClaimResponseDetail.set((com.dtc.fhir.gwt.ClaimResponseDetail)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseDetail1":
			SetClaimResponseDetail1.set((com.dtc.fhir.gwt.ClaimResponseDetail1)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseError":
			SetClaimResponseError.set((com.dtc.fhir.gwt.ClaimResponseError)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseItem":
			SetClaimResponseItem.set((com.dtc.fhir.gwt.ClaimResponseItem)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseNote":
			SetClaimResponseNote.set((com.dtc.fhir.gwt.ClaimResponseNote)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimResponseSubDetail":
			SetClaimResponseSubDetail.set((com.dtc.fhir.gwt.ClaimResponseSubDetail)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimSubDetail":
			SetClaimSubDetail.set((com.dtc.fhir.gwt.ClaimSubDetail)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClaimType":
			SetClaimType.set((com.dtc.fhir.gwt.ClaimType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClinicalImpression":
			SetClinicalImpression.set((com.dtc.fhir.gwt.ClinicalImpression)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClinicalImpressionFinding":
			SetClinicalImpressionFinding.set((com.dtc.fhir.gwt.ClinicalImpressionFinding)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClinicalImpressionInvestigations":
			SetClinicalImpressionInvestigations.set((com.dtc.fhir.gwt.ClinicalImpressionInvestigations)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClinicalImpressionRuledOut":
			SetClinicalImpressionRuledOut.set((com.dtc.fhir.gwt.ClinicalImpressionRuledOut)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ClinicalImpressionStatus":
			SetClinicalImpressionStatus.set((com.dtc.fhir.gwt.ClinicalImpressionStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Code":
			SetCode.set((com.dtc.fhir.gwt.Code)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CodeableConcept":
			SetCodeableConcept.set((com.dtc.fhir.gwt.CodeableConcept)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Coding":
			SetCoding.set((com.dtc.fhir.gwt.Coding)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Communication":
			SetCommunication.set((com.dtc.fhir.gwt.Communication)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CommunicationPayload":
			SetCommunicationPayload.set((com.dtc.fhir.gwt.CommunicationPayload)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CommunicationRequest":
			SetCommunicationRequest.set((com.dtc.fhir.gwt.CommunicationRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CommunicationRequestPayload":
			SetCommunicationRequestPayload.set((com.dtc.fhir.gwt.CommunicationRequestPayload)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CommunicationRequestStatus":
			SetCommunicationRequestStatus.set((com.dtc.fhir.gwt.CommunicationRequestStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CommunicationStatus":
			SetCommunicationStatus.set((com.dtc.fhir.gwt.CommunicationStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Composition":
			SetComposition.set((com.dtc.fhir.gwt.Composition)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CompositionAttestationMode":
			SetCompositionAttestationMode.set((com.dtc.fhir.gwt.CompositionAttestationMode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CompositionAttester":
			SetCompositionAttester.set((com.dtc.fhir.gwt.CompositionAttester)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CompositionEvent":
			SetCompositionEvent.set((com.dtc.fhir.gwt.CompositionEvent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CompositionSection":
			SetCompositionSection.set((com.dtc.fhir.gwt.CompositionSection)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.CompositionStatus":
			SetCompositionStatus.set((com.dtc.fhir.gwt.CompositionStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConceptMap":
			SetConceptMap.set((com.dtc.fhir.gwt.ConceptMap)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConceptMapContact":
			SetConceptMapContact.set((com.dtc.fhir.gwt.ConceptMapContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConceptMapDependsOn":
			SetConceptMapDependsOn.set((com.dtc.fhir.gwt.ConceptMapDependsOn)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConceptMapElement":
			SetConceptMapElement.set((com.dtc.fhir.gwt.ConceptMapElement)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConceptMapEquivalence":
			SetConceptMapEquivalence.set((com.dtc.fhir.gwt.ConceptMapEquivalence)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConceptMapTarget":
			SetConceptMapTarget.set((com.dtc.fhir.gwt.ConceptMapTarget)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Condition":
			SetCondition.set((com.dtc.fhir.gwt.Condition)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConditionEvidence":
			SetConditionEvidence.set((com.dtc.fhir.gwt.ConditionEvidence)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConditionStage":
			SetConditionStage.set((com.dtc.fhir.gwt.ConditionStage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConditionVerificationStatus":
			SetConditionVerificationStatus.set((com.dtc.fhir.gwt.ConditionVerificationStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConditionalDeleteStatus":
			SetConditionalDeleteStatus.set((com.dtc.fhir.gwt.ConditionalDeleteStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Conformance":
			SetConformance.set((com.dtc.fhir.gwt.Conformance)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceCertificate":
			SetConformanceCertificate.set((com.dtc.fhir.gwt.ConformanceCertificate)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceContact":
			SetConformanceContact.set((com.dtc.fhir.gwt.ConformanceContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceDocument":
			SetConformanceDocument.set((com.dtc.fhir.gwt.ConformanceDocument)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceEndpoint":
			SetConformanceEndpoint.set((com.dtc.fhir.gwt.ConformanceEndpoint)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceEvent":
			SetConformanceEvent.set((com.dtc.fhir.gwt.ConformanceEvent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceEventMode":
			SetConformanceEventMode.set((com.dtc.fhir.gwt.ConformanceEventMode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceImplementation":
			SetConformanceImplementation.set((com.dtc.fhir.gwt.ConformanceImplementation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceInteraction":
			SetConformanceInteraction.set((com.dtc.fhir.gwt.ConformanceInteraction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceInteraction1":
			SetConformanceInteraction1.set((com.dtc.fhir.gwt.ConformanceInteraction1)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceMessaging":
			SetConformanceMessaging.set((com.dtc.fhir.gwt.ConformanceMessaging)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceOperation":
			SetConformanceOperation.set((com.dtc.fhir.gwt.ConformanceOperation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceResource":
			SetConformanceResource.set((com.dtc.fhir.gwt.ConformanceResource)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceResourceStatus":
			SetConformanceResourceStatus.set((com.dtc.fhir.gwt.ConformanceResourceStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceRest":
			SetConformanceRest.set((com.dtc.fhir.gwt.ConformanceRest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceSearchParam":
			SetConformanceSearchParam.set((com.dtc.fhir.gwt.ConformanceSearchParam)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceSecurity":
			SetConformanceSecurity.set((com.dtc.fhir.gwt.ConformanceSecurity)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceSoftware":
			SetConformanceSoftware.set((com.dtc.fhir.gwt.ConformanceSoftware)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConformanceStatementKind":
			SetConformanceStatementKind.set((com.dtc.fhir.gwt.ConformanceStatementKind)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ConstraintSeverity":
			SetConstraintSeverity.set((com.dtc.fhir.gwt.ConstraintSeverity)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContactPoint":
			SetContactPoint.set((com.dtc.fhir.gwt.ContactPoint)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContactPointSystem":
			SetContactPointSystem.set((com.dtc.fhir.gwt.ContactPointSystem)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContactPointUse":
			SetContactPointUse.set((com.dtc.fhir.gwt.ContactPointUse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContentType":
			SetContentType.set((com.dtc.fhir.gwt.ContentType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Contract":
			SetContract.set((com.dtc.fhir.gwt.Contract)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContractActor":
			SetContractActor.set((com.dtc.fhir.gwt.ContractActor)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContractActor1":
			SetContractActor1.set((com.dtc.fhir.gwt.ContractActor1)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContractFriendly":
			SetContractFriendly.set((com.dtc.fhir.gwt.ContractFriendly)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContractLegal":
			SetContractLegal.set((com.dtc.fhir.gwt.ContractLegal)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContractRule":
			SetContractRule.set((com.dtc.fhir.gwt.ContractRule)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContractSigner":
			SetContractSigner.set((com.dtc.fhir.gwt.ContractSigner)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContractTerm":
			SetContractTerm.set((com.dtc.fhir.gwt.ContractTerm)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContractValuedItem":
			SetContractValuedItem.set((com.dtc.fhir.gwt.ContractValuedItem)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ContractValuedItem1":
			SetContractValuedItem1.set((com.dtc.fhir.gwt.ContractValuedItem1)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Count":
			SetCount.set((com.dtc.fhir.gwt.Count)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Coverage":
			SetCoverage.set((com.dtc.fhir.gwt.Coverage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DataElement":
			SetDataElement.set((com.dtc.fhir.gwt.DataElement)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DataElementContact":
			SetDataElementContact.set((com.dtc.fhir.gwt.DataElementContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DataElementMapping":
			SetDataElementMapping.set((com.dtc.fhir.gwt.DataElementMapping)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DataElementStringency":
			SetDataElementStringency.set((com.dtc.fhir.gwt.DataElementStringency)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Date":
			SetDate.set((com.dtc.fhir.gwt.Date)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DateTime":
			SetDateTime.set((com.dtc.fhir.gwt.DateTime)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DaysOfWeek":
			SetDaysOfWeek.set((com.dtc.fhir.gwt.DaysOfWeek)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Decimal":
			SetDecimal.set((com.dtc.fhir.gwt.Decimal)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DetectedIssue":
			SetDetectedIssue.set((com.dtc.fhir.gwt.DetectedIssue)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DetectedIssueMitigation":
			SetDetectedIssueMitigation.set((com.dtc.fhir.gwt.DetectedIssueMitigation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DetectedIssueSeverity":
			SetDetectedIssueSeverity.set((com.dtc.fhir.gwt.DetectedIssueSeverity)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Device":
			SetDevice.set((com.dtc.fhir.gwt.Device)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceComponent":
			SetDeviceComponent.set((com.dtc.fhir.gwt.DeviceComponent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceComponentProductionSpecification":
			SetDeviceComponentProductionSpecification.set((com.dtc.fhir.gwt.DeviceComponentProductionSpecification)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceMetric":
			SetDeviceMetric.set((com.dtc.fhir.gwt.DeviceMetric)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceMetricCalibration":
			SetDeviceMetricCalibration.set((com.dtc.fhir.gwt.DeviceMetricCalibration)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceMetricCalibrationState":
			SetDeviceMetricCalibrationState.set((com.dtc.fhir.gwt.DeviceMetricCalibrationState)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceMetricCalibrationType":
			SetDeviceMetricCalibrationType.set((com.dtc.fhir.gwt.DeviceMetricCalibrationType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceMetricCategory":
			SetDeviceMetricCategory.set((com.dtc.fhir.gwt.DeviceMetricCategory)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceMetricColor":
			SetDeviceMetricColor.set((com.dtc.fhir.gwt.DeviceMetricColor)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceMetricOperationalStatus":
			SetDeviceMetricOperationalStatus.set((com.dtc.fhir.gwt.DeviceMetricOperationalStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceStatus":
			SetDeviceStatus.set((com.dtc.fhir.gwt.DeviceStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceUseRequest":
			SetDeviceUseRequest.set((com.dtc.fhir.gwt.DeviceUseRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceUseRequestPriority":
			SetDeviceUseRequestPriority.set((com.dtc.fhir.gwt.DeviceUseRequestPriority)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceUseRequestStatus":
			SetDeviceUseRequestStatus.set((com.dtc.fhir.gwt.DeviceUseRequestStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DeviceUseStatement":
			SetDeviceUseStatement.set((com.dtc.fhir.gwt.DeviceUseStatement)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DiagnosticOrder":
			SetDiagnosticOrder.set((com.dtc.fhir.gwt.DiagnosticOrder)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DiagnosticOrderEvent":
			SetDiagnosticOrderEvent.set((com.dtc.fhir.gwt.DiagnosticOrderEvent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DiagnosticOrderItem":
			SetDiagnosticOrderItem.set((com.dtc.fhir.gwt.DiagnosticOrderItem)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DiagnosticOrderPriority":
			SetDiagnosticOrderPriority.set((com.dtc.fhir.gwt.DiagnosticOrderPriority)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DiagnosticOrderStatus":
			SetDiagnosticOrderStatus.set((com.dtc.fhir.gwt.DiagnosticOrderStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DiagnosticReport":
			SetDiagnosticReport.set((com.dtc.fhir.gwt.DiagnosticReport)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DiagnosticReportImage":
			SetDiagnosticReportImage.set((com.dtc.fhir.gwt.DiagnosticReportImage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DiagnosticReportStatus":
			SetDiagnosticReportStatus.set((com.dtc.fhir.gwt.DiagnosticReportStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DigitalMediaType":
			SetDigitalMediaType.set((com.dtc.fhir.gwt.DigitalMediaType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Distance":
			SetDistance.set((com.dtc.fhir.gwt.Distance)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentManifest":
			SetDocumentManifest.set((com.dtc.fhir.gwt.DocumentManifest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentManifestContent":
			SetDocumentManifestContent.set((com.dtc.fhir.gwt.DocumentManifestContent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentManifestRelated":
			SetDocumentManifestRelated.set((com.dtc.fhir.gwt.DocumentManifestRelated)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentMode":
			SetDocumentMode.set((com.dtc.fhir.gwt.DocumentMode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentReference":
			SetDocumentReference.set((com.dtc.fhir.gwt.DocumentReference)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentReferenceContent":
			SetDocumentReferenceContent.set((com.dtc.fhir.gwt.DocumentReferenceContent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentReferenceContext":
			SetDocumentReferenceContext.set((com.dtc.fhir.gwt.DocumentReferenceContext)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentReferenceRelated":
			SetDocumentReferenceRelated.set((com.dtc.fhir.gwt.DocumentReferenceRelated)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentReferenceRelatesTo":
			SetDocumentReferenceRelatesTo.set((com.dtc.fhir.gwt.DocumentReferenceRelatesTo)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentReferenceStatus":
			SetDocumentReferenceStatus.set((com.dtc.fhir.gwt.DocumentReferenceStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DocumentRelationshipType":
			SetDocumentRelationshipType.set((com.dtc.fhir.gwt.DocumentRelationshipType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.DomainResource":
			SetDomainResource.set((com.dtc.fhir.gwt.DomainResource)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Duration":
			SetDuration.set((com.dtc.fhir.gwt.Duration)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ElementDefinition":
			SetElementDefinition.set((com.dtc.fhir.gwt.ElementDefinition)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ElementDefinitionBase":
			SetElementDefinitionBase.set((com.dtc.fhir.gwt.ElementDefinitionBase)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ElementDefinitionBinding":
			SetElementDefinitionBinding.set((com.dtc.fhir.gwt.ElementDefinitionBinding)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ElementDefinitionConstraint":
			SetElementDefinitionConstraint.set((com.dtc.fhir.gwt.ElementDefinitionConstraint)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ElementDefinitionMapping":
			SetElementDefinitionMapping.set((com.dtc.fhir.gwt.ElementDefinitionMapping)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ElementDefinitionSlicing":
			SetElementDefinitionSlicing.set((com.dtc.fhir.gwt.ElementDefinitionSlicing)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ElementDefinitionType":
			SetElementDefinitionType.set((com.dtc.fhir.gwt.ElementDefinitionType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EligibilityRequest":
			SetEligibilityRequest.set((com.dtc.fhir.gwt.EligibilityRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EligibilityResponse":
			SetEligibilityResponse.set((com.dtc.fhir.gwt.EligibilityResponse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Encounter":
			SetEncounter.set((com.dtc.fhir.gwt.Encounter)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EncounterClass":
			SetEncounterClass.set((com.dtc.fhir.gwt.EncounterClass)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EncounterHospitalization":
			SetEncounterHospitalization.set((com.dtc.fhir.gwt.EncounterHospitalization)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EncounterLocation":
			SetEncounterLocation.set((com.dtc.fhir.gwt.EncounterLocation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EncounterLocationStatus":
			SetEncounterLocationStatus.set((com.dtc.fhir.gwt.EncounterLocationStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EncounterParticipant":
			SetEncounterParticipant.set((com.dtc.fhir.gwt.EncounterParticipant)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EncounterState":
			SetEncounterState.set((com.dtc.fhir.gwt.EncounterState)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EncounterStatusHistory":
			SetEncounterStatusHistory.set((com.dtc.fhir.gwt.EncounterStatusHistory)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EnrollmentRequest":
			SetEnrollmentRequest.set((com.dtc.fhir.gwt.EnrollmentRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EnrollmentResponse":
			SetEnrollmentResponse.set((com.dtc.fhir.gwt.EnrollmentResponse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EpisodeOfCare":
			SetEpisodeOfCare.set((com.dtc.fhir.gwt.EpisodeOfCare)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EpisodeOfCareCareTeam":
			SetEpisodeOfCareCareTeam.set((com.dtc.fhir.gwt.EpisodeOfCareCareTeam)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EpisodeOfCareStatus":
			SetEpisodeOfCareStatus.set((com.dtc.fhir.gwt.EpisodeOfCareStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EpisodeOfCareStatusHistory":
			SetEpisodeOfCareStatusHistory.set((com.dtc.fhir.gwt.EpisodeOfCareStatusHistory)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.EventTiming":
			SetEventTiming.set((com.dtc.fhir.gwt.EventTiming)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ExplanationOfBenefit":
			SetExplanationOfBenefit.set((com.dtc.fhir.gwt.ExplanationOfBenefit)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ExtensionContext":
			SetExtensionContext.set((com.dtc.fhir.gwt.ExtensionContext)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.FamilyHistoryStatus":
			SetFamilyHistoryStatus.set((com.dtc.fhir.gwt.FamilyHistoryStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.FamilyMemberHistory":
			SetFamilyMemberHistory.set((com.dtc.fhir.gwt.FamilyMemberHistory)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.FamilyMemberHistoryCondition":
			SetFamilyMemberHistoryCondition.set((com.dtc.fhir.gwt.FamilyMemberHistoryCondition)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.FilterOperator":
			SetFilterOperator.set((com.dtc.fhir.gwt.FilterOperator)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Flag":
			SetFlag.set((com.dtc.fhir.gwt.Flag)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.FlagStatus":
			SetFlagStatus.set((com.dtc.fhir.gwt.FlagStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Goal":
			SetGoal.set((com.dtc.fhir.gwt.Goal)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.GoalOutcome":
			SetGoalOutcome.set((com.dtc.fhir.gwt.GoalOutcome)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.GoalStatus":
			SetGoalStatus.set((com.dtc.fhir.gwt.GoalStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Group":
			SetGroup.set((com.dtc.fhir.gwt.Group)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.GroupCharacteristic":
			SetGroupCharacteristic.set((com.dtc.fhir.gwt.GroupCharacteristic)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.GroupMember":
			SetGroupMember.set((com.dtc.fhir.gwt.GroupMember)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.GroupType":
			SetGroupType.set((com.dtc.fhir.gwt.GroupType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.GuideDependencyType":
			SetGuideDependencyType.set((com.dtc.fhir.gwt.GuideDependencyType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.GuidePageKind":
			SetGuidePageKind.set((com.dtc.fhir.gwt.GuidePageKind)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.GuideResourcePurpose":
			SetGuideResourcePurpose.set((com.dtc.fhir.gwt.GuideResourcePurpose)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.HTTPVerb":
			SetHTTPVerb.set((com.dtc.fhir.gwt.HTTPVerb)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.HealthcareService":
			SetHealthcareService.set((com.dtc.fhir.gwt.HealthcareService)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.HealthcareServiceAvailableTime":
			SetHealthcareServiceAvailableTime.set((com.dtc.fhir.gwt.HealthcareServiceAvailableTime)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.HealthcareServiceNotAvailable":
			SetHealthcareServiceNotAvailable.set((com.dtc.fhir.gwt.HealthcareServiceNotAvailable)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.HealthcareServiceServiceType":
			SetHealthcareServiceServiceType.set((com.dtc.fhir.gwt.HealthcareServiceServiceType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.HumanName":
			SetHumanName.set((com.dtc.fhir.gwt.HumanName)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Id":
			SetId.set((com.dtc.fhir.gwt.Id)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Identifier":
			SetIdentifier.set((com.dtc.fhir.gwt.Identifier)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.IdentifierUse":
			SetIdentifierUse.set((com.dtc.fhir.gwt.IdentifierUse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.IdentityAssuranceLevel":
			SetIdentityAssuranceLevel.set((com.dtc.fhir.gwt.IdentityAssuranceLevel)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImagingObjectSelection":
			SetImagingObjectSelection.set((com.dtc.fhir.gwt.ImagingObjectSelection)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImagingObjectSelectionFrames":
			SetImagingObjectSelectionFrames.set((com.dtc.fhir.gwt.ImagingObjectSelectionFrames)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImagingObjectSelectionInstance":
			SetImagingObjectSelectionInstance.set((com.dtc.fhir.gwt.ImagingObjectSelectionInstance)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImagingObjectSelectionSeries":
			SetImagingObjectSelectionSeries.set((com.dtc.fhir.gwt.ImagingObjectSelectionSeries)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImagingObjectSelectionStudy":
			SetImagingObjectSelectionStudy.set((com.dtc.fhir.gwt.ImagingObjectSelectionStudy)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImagingStudy":
			SetImagingStudy.set((com.dtc.fhir.gwt.ImagingStudy)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImagingStudyInstance":
			SetImagingStudyInstance.set((com.dtc.fhir.gwt.ImagingStudyInstance)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImagingStudySeries":
			SetImagingStudySeries.set((com.dtc.fhir.gwt.ImagingStudySeries)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Immunization":
			SetImmunization.set((com.dtc.fhir.gwt.Immunization)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImmunizationExplanation":
			SetImmunizationExplanation.set((com.dtc.fhir.gwt.ImmunizationExplanation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImmunizationReaction":
			SetImmunizationReaction.set((com.dtc.fhir.gwt.ImmunizationReaction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImmunizationRecommendation":
			SetImmunizationRecommendation.set((com.dtc.fhir.gwt.ImmunizationRecommendation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion":
			SetImmunizationRecommendationDateCriterion.set((com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImmunizationRecommendationProtocol":
			SetImmunizationRecommendationProtocol.set((com.dtc.fhir.gwt.ImmunizationRecommendationProtocol)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation":
			SetImmunizationRecommendationRecommendation.set((com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImmunizationVaccinationProtocol":
			SetImmunizationVaccinationProtocol.set((com.dtc.fhir.gwt.ImmunizationVaccinationProtocol)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImplementationGuide":
			SetImplementationGuide.set((com.dtc.fhir.gwt.ImplementationGuide)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImplementationGuideContact":
			SetImplementationGuideContact.set((com.dtc.fhir.gwt.ImplementationGuideContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImplementationGuideDependency":
			SetImplementationGuideDependency.set((com.dtc.fhir.gwt.ImplementationGuideDependency)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImplementationGuideGlobal":
			SetImplementationGuideGlobal.set((com.dtc.fhir.gwt.ImplementationGuideGlobal)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImplementationGuidePackage":
			SetImplementationGuidePackage.set((com.dtc.fhir.gwt.ImplementationGuidePackage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImplementationGuidePage":
			SetImplementationGuidePage.set((com.dtc.fhir.gwt.ImplementationGuidePage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ImplementationGuideResource":
			SetImplementationGuideResource.set((com.dtc.fhir.gwt.ImplementationGuideResource)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.InstanceAvailability":
			SetInstanceAvailability.set((com.dtc.fhir.gwt.InstanceAvailability)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Instant":
			SetInstant.set((com.dtc.fhir.gwt.Instant)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.IntegerDt":
			SetIntegerDt.set((com.dtc.fhir.gwt.IntegerDt)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.IssueSeverity":
			SetIssueSeverity.set((com.dtc.fhir.gwt.IssueSeverity)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.IssueType":
			SetIssueType.set((com.dtc.fhir.gwt.IssueType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.LinkType":
			SetLinkType.set((com.dtc.fhir.gwt.LinkType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ListDt":
			SetListDt.set((com.dtc.fhir.gwt.ListDt)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ListEntry":
			SetListEntry.set((com.dtc.fhir.gwt.ListEntry)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ListMode":
			SetListMode.set((com.dtc.fhir.gwt.ListMode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ListStatus":
			SetListStatus.set((com.dtc.fhir.gwt.ListStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Location":
			SetLocation.set((com.dtc.fhir.gwt.Location)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.LocationMode":
			SetLocationMode.set((com.dtc.fhir.gwt.LocationMode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.LocationPosition":
			SetLocationPosition.set((com.dtc.fhir.gwt.LocationPosition)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.LocationStatus":
			SetLocationStatus.set((com.dtc.fhir.gwt.LocationStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Markdown":
			SetMarkdown.set((com.dtc.fhir.gwt.Markdown)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MeasmntPrinciple":
			SetMeasmntPrinciple.set((com.dtc.fhir.gwt.MeasmntPrinciple)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Media":
			SetMedia.set((com.dtc.fhir.gwt.Media)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Medication":
			SetMedication.set((com.dtc.fhir.gwt.Medication)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationAdministration":
			SetMedicationAdministration.set((com.dtc.fhir.gwt.MedicationAdministration)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationAdministrationDosage":
			SetMedicationAdministrationDosage.set((com.dtc.fhir.gwt.MedicationAdministrationDosage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationAdministrationStatus":
			SetMedicationAdministrationStatus.set((com.dtc.fhir.gwt.MedicationAdministrationStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationBatch":
			SetMedicationBatch.set((com.dtc.fhir.gwt.MedicationBatch)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationContent":
			SetMedicationContent.set((com.dtc.fhir.gwt.MedicationContent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationDispense":
			SetMedicationDispense.set((com.dtc.fhir.gwt.MedicationDispense)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationDispenseDosageInstruction":
			SetMedicationDispenseDosageInstruction.set((com.dtc.fhir.gwt.MedicationDispenseDosageInstruction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationDispenseStatus":
			SetMedicationDispenseStatus.set((com.dtc.fhir.gwt.MedicationDispenseStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationDispenseSubstitution":
			SetMedicationDispenseSubstitution.set((com.dtc.fhir.gwt.MedicationDispenseSubstitution)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationIngredient":
			SetMedicationIngredient.set((com.dtc.fhir.gwt.MedicationIngredient)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationOrder":
			SetMedicationOrder.set((com.dtc.fhir.gwt.MedicationOrder)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationOrderDispenseRequest":
			SetMedicationOrderDispenseRequest.set((com.dtc.fhir.gwt.MedicationOrderDispenseRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationOrderDosageInstruction":
			SetMedicationOrderDosageInstruction.set((com.dtc.fhir.gwt.MedicationOrderDosageInstruction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationOrderStatus":
			SetMedicationOrderStatus.set((com.dtc.fhir.gwt.MedicationOrderStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationOrderSubstitution":
			SetMedicationOrderSubstitution.set((com.dtc.fhir.gwt.MedicationOrderSubstitution)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationPackage":
			SetMedicationPackage.set((com.dtc.fhir.gwt.MedicationPackage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationProduct":
			SetMedicationProduct.set((com.dtc.fhir.gwt.MedicationProduct)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationStatement":
			SetMedicationStatement.set((com.dtc.fhir.gwt.MedicationStatement)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationStatementDosage":
			SetMedicationStatementDosage.set((com.dtc.fhir.gwt.MedicationStatementDosage)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MedicationStatementStatus":
			SetMedicationStatementStatus.set((com.dtc.fhir.gwt.MedicationStatementStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MessageHeader":
			SetMessageHeader.set((com.dtc.fhir.gwt.MessageHeader)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MessageHeaderDestination":
			SetMessageHeaderDestination.set((com.dtc.fhir.gwt.MessageHeaderDestination)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MessageHeaderResponse":
			SetMessageHeaderResponse.set((com.dtc.fhir.gwt.MessageHeaderResponse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MessageHeaderSource":
			SetMessageHeaderSource.set((com.dtc.fhir.gwt.MessageHeaderSource)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.MessageSignificanceCategory":
			SetMessageSignificanceCategory.set((com.dtc.fhir.gwt.MessageSignificanceCategory)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Meta":
			SetMeta.set((com.dtc.fhir.gwt.Meta)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Money":
			SetMoney.set((com.dtc.fhir.gwt.Money)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NameUse":
			SetNameUse.set((com.dtc.fhir.gwt.NameUse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NamingSystem":
			SetNamingSystem.set((com.dtc.fhir.gwt.NamingSystem)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NamingSystemContact":
			SetNamingSystemContact.set((com.dtc.fhir.gwt.NamingSystemContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NamingSystemIdentifierType":
			SetNamingSystemIdentifierType.set((com.dtc.fhir.gwt.NamingSystemIdentifierType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NamingSystemType":
			SetNamingSystemType.set((com.dtc.fhir.gwt.NamingSystemType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NamingSystemUniqueId":
			SetNamingSystemUniqueId.set((com.dtc.fhir.gwt.NamingSystemUniqueId)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Narrative":
			SetNarrative.set((com.dtc.fhir.gwt.Narrative)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NarrativeStatus":
			SetNarrativeStatus.set((com.dtc.fhir.gwt.NarrativeStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NoteType":
			SetNoteType.set((com.dtc.fhir.gwt.NoteType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NutritionOrder":
			SetNutritionOrder.set((com.dtc.fhir.gwt.NutritionOrder)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NutritionOrderAdministration":
			SetNutritionOrderAdministration.set((com.dtc.fhir.gwt.NutritionOrderAdministration)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NutritionOrderEnteralFormula":
			SetNutritionOrderEnteralFormula.set((com.dtc.fhir.gwt.NutritionOrderEnteralFormula)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NutritionOrderNutrient":
			SetNutritionOrderNutrient.set((com.dtc.fhir.gwt.NutritionOrderNutrient)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NutritionOrderOralDiet":
			SetNutritionOrderOralDiet.set((com.dtc.fhir.gwt.NutritionOrderOralDiet)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NutritionOrderStatus":
			SetNutritionOrderStatus.set((com.dtc.fhir.gwt.NutritionOrderStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NutritionOrderSupplement":
			SetNutritionOrderSupplement.set((com.dtc.fhir.gwt.NutritionOrderSupplement)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.NutritionOrderTexture":
			SetNutritionOrderTexture.set((com.dtc.fhir.gwt.NutritionOrderTexture)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Observation":
			SetObservation.set((com.dtc.fhir.gwt.Observation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ObservationComponent":
			SetObservationComponent.set((com.dtc.fhir.gwt.ObservationComponent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ObservationReferenceRange":
			SetObservationReferenceRange.set((com.dtc.fhir.gwt.ObservationReferenceRange)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ObservationRelated":
			SetObservationRelated.set((com.dtc.fhir.gwt.ObservationRelated)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ObservationRelationshipType":
			SetObservationRelationshipType.set((com.dtc.fhir.gwt.ObservationRelationshipType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ObservationStatus":
			SetObservationStatus.set((com.dtc.fhir.gwt.ObservationStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Oid":
			SetOid.set((com.dtc.fhir.gwt.Oid)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OperationDefinition":
			SetOperationDefinition.set((com.dtc.fhir.gwt.OperationDefinition)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OperationDefinitionBinding":
			SetOperationDefinitionBinding.set((com.dtc.fhir.gwt.OperationDefinitionBinding)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OperationDefinitionContact":
			SetOperationDefinitionContact.set((com.dtc.fhir.gwt.OperationDefinitionContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OperationDefinitionParameter":
			SetOperationDefinitionParameter.set((com.dtc.fhir.gwt.OperationDefinitionParameter)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OperationKind":
			SetOperationKind.set((com.dtc.fhir.gwt.OperationKind)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OperationOutcome":
			SetOperationOutcome.set((com.dtc.fhir.gwt.OperationOutcome)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OperationOutcomeIssue":
			SetOperationOutcomeIssue.set((com.dtc.fhir.gwt.OperationOutcomeIssue)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OperationParameterUse":
			SetOperationParameterUse.set((com.dtc.fhir.gwt.OperationParameterUse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Order":
			SetOrder.set((com.dtc.fhir.gwt.Order)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OrderResponse":
			SetOrderResponse.set((com.dtc.fhir.gwt.OrderResponse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OrderStatus":
			SetOrderStatus.set((com.dtc.fhir.gwt.OrderStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OrderWhen":
			SetOrderWhen.set((com.dtc.fhir.gwt.OrderWhen)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Organization":
			SetOrganization.set((com.dtc.fhir.gwt.Organization)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.OrganizationContact":
			SetOrganizationContact.set((com.dtc.fhir.gwt.OrganizationContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Parameters":
			SetParameters.set((com.dtc.fhir.gwt.Parameters)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ParametersParameter":
			SetParametersParameter.set((com.dtc.fhir.gwt.ParametersParameter)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ParticipantRequired":
			SetParticipantRequired.set((com.dtc.fhir.gwt.ParticipantRequired)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ParticipantStatus":
			SetParticipantStatus.set((com.dtc.fhir.gwt.ParticipantStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ParticipationStatus":
			SetParticipationStatus.set((com.dtc.fhir.gwt.ParticipationStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Patient":
			SetPatient.set((com.dtc.fhir.gwt.Patient)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PatientAnimal":
			SetPatientAnimal.set((com.dtc.fhir.gwt.PatientAnimal)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PatientCommunication":
			SetPatientCommunication.set((com.dtc.fhir.gwt.PatientCommunication)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PatientContact":
			SetPatientContact.set((com.dtc.fhir.gwt.PatientContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PatientLink":
			SetPatientLink.set((com.dtc.fhir.gwt.PatientLink)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PaymentNotice":
			SetPaymentNotice.set((com.dtc.fhir.gwt.PaymentNotice)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PaymentReconciliation":
			SetPaymentReconciliation.set((com.dtc.fhir.gwt.PaymentReconciliation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PaymentReconciliationDetail":
			SetPaymentReconciliationDetail.set((com.dtc.fhir.gwt.PaymentReconciliationDetail)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PaymentReconciliationNote":
			SetPaymentReconciliationNote.set((com.dtc.fhir.gwt.PaymentReconciliationNote)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Period":
			SetPeriod.set((com.dtc.fhir.gwt.Period)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Person":
			SetPerson.set((com.dtc.fhir.gwt.Person)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PersonLink":
			SetPersonLink.set((com.dtc.fhir.gwt.PersonLink)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PositiveInt":
			SetPositiveInt.set((com.dtc.fhir.gwt.PositiveInt)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Practitioner":
			SetPractitioner.set((com.dtc.fhir.gwt.Practitioner)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PractitionerPractitionerRole":
			SetPractitionerPractitionerRole.set((com.dtc.fhir.gwt.PractitionerPractitionerRole)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PractitionerQualification":
			SetPractitionerQualification.set((com.dtc.fhir.gwt.PractitionerQualification)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Procedure":
			SetProcedure.set((com.dtc.fhir.gwt.Procedure)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcedureFocalDevice":
			SetProcedureFocalDevice.set((com.dtc.fhir.gwt.ProcedureFocalDevice)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcedurePerformer":
			SetProcedurePerformer.set((com.dtc.fhir.gwt.ProcedurePerformer)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcedureRequest":
			SetProcedureRequest.set((com.dtc.fhir.gwt.ProcedureRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcedureRequestPriority":
			SetProcedureRequestPriority.set((com.dtc.fhir.gwt.ProcedureRequestPriority)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcedureRequestStatus":
			SetProcedureRequestStatus.set((com.dtc.fhir.gwt.ProcedureRequestStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcedureStatus":
			SetProcedureStatus.set((com.dtc.fhir.gwt.ProcedureStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcessRequest":
			SetProcessRequest.set((com.dtc.fhir.gwt.ProcessRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcessRequestItem":
			SetProcessRequestItem.set((com.dtc.fhir.gwt.ProcessRequestItem)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcessResponse":
			SetProcessResponse.set((com.dtc.fhir.gwt.ProcessResponse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProcessResponseNotes":
			SetProcessResponseNotes.set((com.dtc.fhir.gwt.ProcessResponseNotes)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.PropertyRepresentation":
			SetPropertyRepresentation.set((com.dtc.fhir.gwt.PropertyRepresentation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Provenance":
			SetProvenance.set((com.dtc.fhir.gwt.Provenance)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProvenanceAgent":
			SetProvenanceAgent.set((com.dtc.fhir.gwt.ProvenanceAgent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProvenanceEntity":
			SetProvenanceEntity.set((com.dtc.fhir.gwt.ProvenanceEntity)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProvenanceEntityRole":
			SetProvenanceEntityRole.set((com.dtc.fhir.gwt.ProvenanceEntityRole)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ProvenanceRelatedAgent":
			SetProvenanceRelatedAgent.set((com.dtc.fhir.gwt.ProvenanceRelatedAgent)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Quantity":
			SetQuantity.set((com.dtc.fhir.gwt.Quantity)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.QuantityComparator":
			SetQuantityComparator.set((com.dtc.fhir.gwt.QuantityComparator)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Questionnaire":
			SetQuestionnaire.set((com.dtc.fhir.gwt.Questionnaire)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.QuestionnaireGroup":
			SetQuestionnaireGroup.set((com.dtc.fhir.gwt.QuestionnaireGroup)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.QuestionnaireQuestion":
			SetQuestionnaireQuestion.set((com.dtc.fhir.gwt.QuestionnaireQuestion)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.QuestionnaireResponse":
			SetQuestionnaireResponse.set((com.dtc.fhir.gwt.QuestionnaireResponse)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.QuestionnaireResponseAnswer":
			SetQuestionnaireResponseAnswer.set((com.dtc.fhir.gwt.QuestionnaireResponseAnswer)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.QuestionnaireResponseGroup":
			SetQuestionnaireResponseGroup.set((com.dtc.fhir.gwt.QuestionnaireResponseGroup)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.QuestionnaireResponseQuestion":
			SetQuestionnaireResponseQuestion.set((com.dtc.fhir.gwt.QuestionnaireResponseQuestion)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.QuestionnaireResponseStatus":
			SetQuestionnaireResponseStatus.set((com.dtc.fhir.gwt.QuestionnaireResponseStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.QuestionnaireStatus":
			SetQuestionnaireStatus.set((com.dtc.fhir.gwt.QuestionnaireStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Range":
			SetRange.set((com.dtc.fhir.gwt.Range)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Ratio":
			SetRatio.set((com.dtc.fhir.gwt.Ratio)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Reference":
			SetReference.set((com.dtc.fhir.gwt.Reference)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ReferralRequest":
			SetReferralRequest.set((com.dtc.fhir.gwt.ReferralRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ReferralStatus":
			SetReferralStatus.set((com.dtc.fhir.gwt.ReferralStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.RelatedPerson":
			SetRelatedPerson.set((com.dtc.fhir.gwt.RelatedPerson)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.RemittanceOutcome":
			SetRemittanceOutcome.set((com.dtc.fhir.gwt.RemittanceOutcome)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ResourceVersionPolicy":
			SetResourceVersionPolicy.set((com.dtc.fhir.gwt.ResourceVersionPolicy)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ResponseType":
			SetResponseType.set((com.dtc.fhir.gwt.ResponseType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.RestfulConformanceMode":
			SetRestfulConformanceMode.set((com.dtc.fhir.gwt.RestfulConformanceMode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.RiskAssessment":
			SetRiskAssessment.set((com.dtc.fhir.gwt.RiskAssessment)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.RiskAssessmentPrediction":
			SetRiskAssessmentPrediction.set((com.dtc.fhir.gwt.RiskAssessmentPrediction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SampledData":
			SetSampledData.set((com.dtc.fhir.gwt.SampledData)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SampledDataDataType":
			SetSampledDataDataType.set((com.dtc.fhir.gwt.SampledDataDataType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Schedule":
			SetSchedule.set((com.dtc.fhir.gwt.Schedule)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SearchEntryMode":
			SetSearchEntryMode.set((com.dtc.fhir.gwt.SearchEntryMode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SearchModifierCode":
			SetSearchModifierCode.set((com.dtc.fhir.gwt.SearchModifierCode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SearchParamType":
			SetSearchParamType.set((com.dtc.fhir.gwt.SearchParamType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SearchParameter":
			SetSearchParameter.set((com.dtc.fhir.gwt.SearchParameter)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SearchParameterContact":
			SetSearchParameterContact.set((com.dtc.fhir.gwt.SearchParameterContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Signature":
			SetSignature.set((com.dtc.fhir.gwt.Signature)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SimpleQuantity":
			SetSimpleQuantity.set((com.dtc.fhir.gwt.SimpleQuantity)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SlicingRules":
			SetSlicingRules.set((com.dtc.fhir.gwt.SlicingRules)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Slot":
			SetSlot.set((com.dtc.fhir.gwt.Slot)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SlotStatus":
			SetSlotStatus.set((com.dtc.fhir.gwt.SlotStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Specimen":
			SetSpecimen.set((com.dtc.fhir.gwt.Specimen)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SpecimenCollection":
			SetSpecimenCollection.set((com.dtc.fhir.gwt.SpecimenCollection)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SpecimenContainer":
			SetSpecimenContainer.set((com.dtc.fhir.gwt.SpecimenContainer)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SpecimenStatus":
			SetSpecimenStatus.set((com.dtc.fhir.gwt.SpecimenStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SpecimenTreatment":
			SetSpecimenTreatment.set((com.dtc.fhir.gwt.SpecimenTreatment)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.StringDt":
			SetStringDt.set((com.dtc.fhir.gwt.StringDt)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.StructureDefinition":
			SetStructureDefinition.set((com.dtc.fhir.gwt.StructureDefinition)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.StructureDefinitionContact":
			SetStructureDefinitionContact.set((com.dtc.fhir.gwt.StructureDefinitionContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.StructureDefinitionDifferential":
			SetStructureDefinitionDifferential.set((com.dtc.fhir.gwt.StructureDefinitionDifferential)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.StructureDefinitionKind":
			SetStructureDefinitionKind.set((com.dtc.fhir.gwt.StructureDefinitionKind)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.StructureDefinitionMapping":
			SetStructureDefinitionMapping.set((com.dtc.fhir.gwt.StructureDefinitionMapping)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.StructureDefinitionSnapshot":
			SetStructureDefinitionSnapshot.set((com.dtc.fhir.gwt.StructureDefinitionSnapshot)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Subscription":
			SetSubscription.set((com.dtc.fhir.gwt.Subscription)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SubscriptionChannel":
			SetSubscriptionChannel.set((com.dtc.fhir.gwt.SubscriptionChannel)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SubscriptionChannelType":
			SetSubscriptionChannelType.set((com.dtc.fhir.gwt.SubscriptionChannelType)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SubscriptionStatus":
			SetSubscriptionStatus.set((com.dtc.fhir.gwt.SubscriptionStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Substance":
			SetSubstance.set((com.dtc.fhir.gwt.Substance)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SubstanceIngredient":
			SetSubstanceIngredient.set((com.dtc.fhir.gwt.SubstanceIngredient)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SubstanceInstance":
			SetSubstanceInstance.set((com.dtc.fhir.gwt.SubstanceInstance)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SupplyDelivery":
			SetSupplyDelivery.set((com.dtc.fhir.gwt.SupplyDelivery)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SupplyDeliveryStatus":
			SetSupplyDeliveryStatus.set((com.dtc.fhir.gwt.SupplyDeliveryStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SupplyRequest":
			SetSupplyRequest.set((com.dtc.fhir.gwt.SupplyRequest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SupplyRequestStatus":
			SetSupplyRequestStatus.set((com.dtc.fhir.gwt.SupplyRequestStatus)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SupplyRequestWhen":
			SetSupplyRequestWhen.set((com.dtc.fhir.gwt.SupplyRequestWhen)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.SystemRestfulInteraction":
			SetSystemRestfulInteraction.set((com.dtc.fhir.gwt.SystemRestfulInteraction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScript":
			SetTestScript.set((com.dtc.fhir.gwt.TestScript)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptAction":
			SetTestScriptAction.set((com.dtc.fhir.gwt.TestScriptAction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptAction1":
			SetTestScriptAction1.set((com.dtc.fhir.gwt.TestScriptAction1)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptAction2":
			SetTestScriptAction2.set((com.dtc.fhir.gwt.TestScriptAction2)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptAssert":
			SetTestScriptAssert.set((com.dtc.fhir.gwt.TestScriptAssert)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptCapability":
			SetTestScriptCapability.set((com.dtc.fhir.gwt.TestScriptCapability)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptContact":
			SetTestScriptContact.set((com.dtc.fhir.gwt.TestScriptContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptFixture":
			SetTestScriptFixture.set((com.dtc.fhir.gwt.TestScriptFixture)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptLink":
			SetTestScriptLink.set((com.dtc.fhir.gwt.TestScriptLink)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptMetadata":
			SetTestScriptMetadata.set((com.dtc.fhir.gwt.TestScriptMetadata)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptOperation":
			SetTestScriptOperation.set((com.dtc.fhir.gwt.TestScriptOperation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptRequestHeader":
			SetTestScriptRequestHeader.set((com.dtc.fhir.gwt.TestScriptRequestHeader)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptSetup":
			SetTestScriptSetup.set((com.dtc.fhir.gwt.TestScriptSetup)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptTeardown":
			SetTestScriptTeardown.set((com.dtc.fhir.gwt.TestScriptTeardown)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptTest":
			SetTestScriptTest.set((com.dtc.fhir.gwt.TestScriptTest)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TestScriptVariable":
			SetTestScriptVariable.set((com.dtc.fhir.gwt.TestScriptVariable)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Time":
			SetTime.set((com.dtc.fhir.gwt.Time)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Timing":
			SetTiming.set((com.dtc.fhir.gwt.Timing)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TimingRepeat":
			SetTimingRepeat.set((com.dtc.fhir.gwt.TimingRepeat)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TransactionMode":
			SetTransactionMode.set((com.dtc.fhir.gwt.TransactionMode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.TypeRestfulInteraction":
			SetTypeRestfulInteraction.set((com.dtc.fhir.gwt.TypeRestfulInteraction)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.UnitsOfTime":
			SetUnitsOfTime.set((com.dtc.fhir.gwt.UnitsOfTime)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.UnknownContentCode":
			SetUnknownContentCode.set((com.dtc.fhir.gwt.UnknownContentCode)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.UnsignedInt":
			SetUnsignedInt.set((com.dtc.fhir.gwt.UnsignedInt)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Uri":
			SetUri.set((com.dtc.fhir.gwt.Uri)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Use":
			SetUse.set((com.dtc.fhir.gwt.Use)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.Uuid":
			SetUuid.set((com.dtc.fhir.gwt.Uuid)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSet":
			SetValueSet.set((com.dtc.fhir.gwt.ValueSet)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetCodeSystem":
			SetValueSetCodeSystem.set((com.dtc.fhir.gwt.ValueSetCodeSystem)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetCompose":
			SetValueSetCompose.set((com.dtc.fhir.gwt.ValueSetCompose)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetConcept":
			SetValueSetConcept.set((com.dtc.fhir.gwt.ValueSetConcept)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetConcept1":
			SetValueSetConcept1.set((com.dtc.fhir.gwt.ValueSetConcept1)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetContact":
			SetValueSetContact.set((com.dtc.fhir.gwt.ValueSetContact)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetContains":
			SetValueSetContains.set((com.dtc.fhir.gwt.ValueSetContains)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetDesignation":
			SetValueSetDesignation.set((com.dtc.fhir.gwt.ValueSetDesignation)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetExpansion":
			SetValueSetExpansion.set((com.dtc.fhir.gwt.ValueSetExpansion)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetFilter":
			SetValueSetFilter.set((com.dtc.fhir.gwt.ValueSetFilter)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetInclude":
			SetValueSetInclude.set((com.dtc.fhir.gwt.ValueSetInclude)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.ValueSetParameter":
			SetValueSetParameter.set((com.dtc.fhir.gwt.ValueSetParameter)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.VisionBase":
			SetVisionBase.set((com.dtc.fhir.gwt.VisionBase)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.VisionEyes":
			SetVisionEyes.set((com.dtc.fhir.gwt.VisionEyes)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.VisionPrescription":
			SetVisionPrescription.set((com.dtc.fhir.gwt.VisionPrescription)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.VisionPrescriptionDispense":
			SetVisionPrescriptionDispense.set((com.dtc.fhir.gwt.VisionPrescriptionDispense)instance, path, value);
			break;
		case "com.dtc.fhir.gwt.XPathUsageType":
			SetXPathUsageType.set((com.dtc.fhir.gwt.XPathUsageType)instance, path, value);
			break;
		default:
			throw new IllegalArgumentException("Unspoort class: " + instance.getClass().getSimpleName());
		}
	}
	
	private static class SetAccount {
		static void set(com.dtc.fhir.gwt.Account instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Account instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "owner":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOwner((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.AccountStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.AccountStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AccountStatus");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "activePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setActivePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "coveragePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setCoveragePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "currency":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setCurrency((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "balance":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setBalance((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Account");
			}
		}

		static Object get(com.dtc.fhir.gwt.Account _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "owner":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOwner();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOwner(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.AccountStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AccountStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "activePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getActivePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setActivePeriod(_field_);
				}
				return _field_;}
			case "coveragePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getCoveragePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setCoveragePeriod(_field_);
				}
				return _field_;}
			case "currency":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getCurrency();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setCurrency(_field_);
				}
				return _field_;}
			case "balance":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getBalance();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setBalance(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Account");
			}
		}
	}
	private static class SetAccountStatus {
		static void set(com.dtc.fhir.gwt.AccountStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AccountStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AccountStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AccountStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AccountStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AccountStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.AccountStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AccountStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AccountStatus");
			}
		}
	}
	private static class SetActionList {
		static void set(com.dtc.fhir.gwt.ActionList instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ActionList instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ActionListList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ActionListList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ActionListList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ActionList");
			}
		}

		static Object get(com.dtc.fhir.gwt.ActionList _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ActionListList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ActionList");
			}
		}
	}
	private static class SetAddress {
		static void set(com.dtc.fhir.gwt.Address instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Address instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "state":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setState((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.AddressType || value == null) {
					instance.setType((com.dtc.fhir.gwt.AddressType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AddressType");
				}
				break;
			case "country":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCountry((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "postalCode":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPostalCode((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "line":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> lineList = instance.getLine();
					if (lineList.size() < index + 1) {
						lineList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						lineList.set(Math.min(lineList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "city":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCity((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "district":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDistrict((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "use":
				if (value instanceof com.dtc.fhir.gwt.AddressUse || value == null) {
					instance.setUse((com.dtc.fhir.gwt.AddressUse)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AddressUse");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Address");
			}
		}

		static Object get(com.dtc.fhir.gwt.Address _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "state":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getState();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setState(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.AddressType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AddressType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "country":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCountry();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCountry(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "postalCode":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPostalCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPostalCode(_field_);
				}
				return _field_;}
			case "line":
				List<com.dtc.fhir.gwt.StringDt> lineList = _instance_.getLine();
				if (lineList.size() < _index_ + 1) {
					lineList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return lineList.get(Math.min(lineList.size() - 1, _index_));
			case "city":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCity(_field_);
				}
				return _field_;}
			case "district":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDistrict();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDistrict(_field_);
				}
				return _field_;}
			case "use":
				{com.dtc.fhir.gwt.AddressUse _field_ = _instance_.getUse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AddressUse();
					_instance_.setUse(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Address");
			}
		}
	}
	private static class SetAddressType {
		static void set(com.dtc.fhir.gwt.AddressType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AddressType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AddressTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AddressTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AddressTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AddressType");
			}
		}

		static Object get(com.dtc.fhir.gwt.AddressType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AddressTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AddressType");
			}
		}
	}
	private static class SetAddressUse {
		static void set(com.dtc.fhir.gwt.AddressUse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AddressUse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AddressUseList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AddressUseList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AddressUseList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AddressUse");
			}
		}

		static Object get(com.dtc.fhir.gwt.AddressUse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AddressUseList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AddressUse");
			}
		}
	}
	private static class SetAdministrativeGender {
		static void set(com.dtc.fhir.gwt.AdministrativeGender instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AdministrativeGender instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AdministrativeGenderList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AdministrativeGenderList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AdministrativeGenderList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AdministrativeGender");
			}
		}

		static Object get(com.dtc.fhir.gwt.AdministrativeGender _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AdministrativeGenderList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AdministrativeGender");
			}
		}
	}
	private static class SetAge {
		static void set(com.dtc.fhir.gwt.Age instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Age instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "comparator":
				if (value instanceof com.dtc.fhir.gwt.QuantityComparator || value == null) {
					instance.setComparator((com.dtc.fhir.gwt.QuantityComparator)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuantityComparator");
				}
				break;
			case "unit":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUnit((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Age");
			}
		}

		static Object get(com.dtc.fhir.gwt.Age _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "comparator":
				{com.dtc.fhir.gwt.QuantityComparator _field_ = _instance_.getComparator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuantityComparator();
					_instance_.setComparator(_field_);
				}
				return _field_;}
			case "unit":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUnit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUnit(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Age");
			}
		}
	}
	private static class SetAggregationMode {
		static void set(com.dtc.fhir.gwt.AggregationMode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AggregationMode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AggregationModeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AggregationModeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AggregationModeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AggregationMode");
			}
		}

		static Object get(com.dtc.fhir.gwt.AggregationMode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AggregationModeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AggregationMode");
			}
		}
	}
	private static class SetAllergyIntolerance {
		static void set(com.dtc.fhir.gwt.AllergyIntolerance instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AllergyIntolerance instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceType || value == null) {
					instance.setType((com.dtc.fhir.gwt.AllergyIntoleranceType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceType");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.AllergyIntoleranceStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setNote((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceCategory || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.AllergyIntoleranceCategory)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceCategory");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "recordedDate":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setRecordedDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "criticality":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceCriticality || value == null) {
					instance.setCriticality((com.dtc.fhir.gwt.AllergyIntoleranceCriticality)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceCriticality");
				}
				break;
			case "lastOccurence":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setLastOccurence((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "onset":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setOnset((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "recorder":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRecorder((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "reporter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReporter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "substance":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSubstance((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reaction":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceReaction || value == null) {
					List<com.dtc.fhir.gwt.AllergyIntoleranceReaction> reactionList = instance.getReaction();
					if (reactionList.size() < index + 1) {
						reactionList.add((com.dtc.fhir.gwt.AllergyIntoleranceReaction)value);
					} else {
						reactionList.set(Math.min(reactionList.size() - 1, index), (com.dtc.fhir.gwt.AllergyIntoleranceReaction)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AllergyIntolerance");
			}
		}

		static Object get(com.dtc.fhir.gwt.AllergyIntolerance _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.AllergyIntoleranceType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AllergyIntoleranceType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.AllergyIntoleranceStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AllergyIntoleranceStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "note":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.AllergyIntoleranceCategory _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AllergyIntoleranceCategory();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "recordedDate":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getRecordedDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setRecordedDate(_field_);
				}
				return _field_;}
			case "criticality":
				{com.dtc.fhir.gwt.AllergyIntoleranceCriticality _field_ = _instance_.getCriticality();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AllergyIntoleranceCriticality();
					_instance_.setCriticality(_field_);
				}
				return _field_;}
			case "lastOccurence":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getLastOccurence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setLastOccurence(_field_);
				}
				return _field_;}
			case "onset":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getOnset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setOnset(_field_);
				}
				return _field_;}
			case "recorder":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRecorder();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRecorder(_field_);
				}
				return _field_;}
			case "reporter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReporter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReporter(_field_);
				}
				return _field_;}
			case "substance":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSubstance();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSubstance(_field_);
				}
				return _field_;}
			case "reaction":
				List<com.dtc.fhir.gwt.AllergyIntoleranceReaction> reactionList = _instance_.getReaction();
				if (reactionList.size() < _index_ + 1) {
					reactionList.add(new com.dtc.fhir.gwt.AllergyIntoleranceReaction());
				}
				return reactionList.get(Math.min(reactionList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AllergyIntolerance");
			}
		}
	}
	private static class SetAllergyIntoleranceCategory {
		static void set(com.dtc.fhir.gwt.AllergyIntoleranceCategory instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AllergyIntoleranceCategory instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceCategoryList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AllergyIntoleranceCategoryList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceCategoryList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AllergyIntoleranceCategory");
			}
		}

		static Object get(com.dtc.fhir.gwt.AllergyIntoleranceCategory _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AllergyIntoleranceCategoryList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AllergyIntoleranceCategory");
			}
		}
	}
	private static class SetAllergyIntoleranceCertainty {
		static void set(com.dtc.fhir.gwt.AllergyIntoleranceCertainty instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AllergyIntoleranceCertainty instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceCertaintyList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AllergyIntoleranceCertaintyList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceCertaintyList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AllergyIntoleranceCertainty");
			}
		}

		static Object get(com.dtc.fhir.gwt.AllergyIntoleranceCertainty _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AllergyIntoleranceCertaintyList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AllergyIntoleranceCertainty");
			}
		}
	}
	private static class SetAllergyIntoleranceCriticality {
		static void set(com.dtc.fhir.gwt.AllergyIntoleranceCriticality instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AllergyIntoleranceCriticality instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceCriticalityList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AllergyIntoleranceCriticalityList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceCriticalityList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AllergyIntoleranceCriticality");
			}
		}

		static Object get(com.dtc.fhir.gwt.AllergyIntoleranceCriticality _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AllergyIntoleranceCriticalityList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AllergyIntoleranceCriticality");
			}
		}
	}
	private static class SetAllergyIntoleranceReaction {
		static void set(com.dtc.fhir.gwt.AllergyIntoleranceReaction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AllergyIntoleranceReaction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "note":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setNote((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "severity":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceSeverity || value == null) {
					instance.setSeverity((com.dtc.fhir.gwt.AllergyIntoleranceSeverity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceSeverity");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "certainty":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceCertainty || value == null) {
					instance.setCertainty((com.dtc.fhir.gwt.AllergyIntoleranceCertainty)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceCertainty");
				}
				break;
			case "manifestation":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> manifestationList = instance.getManifestation();
					if (manifestationList.size() < index + 1) {
						manifestationList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						manifestationList.set(Math.min(manifestationList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "exposureRoute":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setExposureRoute((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "onset":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setOnset((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "substance":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSubstance((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AllergyIntoleranceReaction");
			}
		}

		static Object get(com.dtc.fhir.gwt.AllergyIntoleranceReaction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "note":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "severity":
				{com.dtc.fhir.gwt.AllergyIntoleranceSeverity _field_ = _instance_.getSeverity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AllergyIntoleranceSeverity();
					_instance_.setSeverity(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "certainty":
				{com.dtc.fhir.gwt.AllergyIntoleranceCertainty _field_ = _instance_.getCertainty();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AllergyIntoleranceCertainty();
					_instance_.setCertainty(_field_);
				}
				return _field_;}
			case "manifestation":
				List<com.dtc.fhir.gwt.CodeableConcept> manifestationList = _instance_.getManifestation();
				if (manifestationList.size() < _index_ + 1) {
					manifestationList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return manifestationList.get(Math.min(manifestationList.size() - 1, _index_));
			case "exposureRoute":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getExposureRoute();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setExposureRoute(_field_);
				}
				return _field_;}
			case "onset":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getOnset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setOnset(_field_);
				}
				return _field_;}
			case "substance":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSubstance();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSubstance(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AllergyIntoleranceReaction");
			}
		}
	}
	private static class SetAllergyIntoleranceSeverity {
		static void set(com.dtc.fhir.gwt.AllergyIntoleranceSeverity instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AllergyIntoleranceSeverity instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceSeverityList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AllergyIntoleranceSeverityList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceSeverityList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AllergyIntoleranceSeverity");
			}
		}

		static Object get(com.dtc.fhir.gwt.AllergyIntoleranceSeverity _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AllergyIntoleranceSeverityList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AllergyIntoleranceSeverity");
			}
		}
	}
	private static class SetAllergyIntoleranceStatus {
		static void set(com.dtc.fhir.gwt.AllergyIntoleranceStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AllergyIntoleranceStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AllergyIntoleranceStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AllergyIntoleranceStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.AllergyIntoleranceStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AllergyIntoleranceStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AllergyIntoleranceStatus");
			}
		}
	}
	private static class SetAllergyIntoleranceType {
		static void set(com.dtc.fhir.gwt.AllergyIntoleranceType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AllergyIntoleranceType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AllergyIntoleranceTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AllergyIntoleranceTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AllergyIntoleranceTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AllergyIntoleranceType");
			}
		}

		static Object get(com.dtc.fhir.gwt.AllergyIntoleranceType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AllergyIntoleranceTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AllergyIntoleranceType");
			}
		}
	}
	private static class SetAnnotation {
		static void set(com.dtc.fhir.gwt.Annotation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Annotation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "time":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "authorReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthorReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "authorString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setAuthorString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Annotation");
			}
		}

		static Object get(com.dtc.fhir.gwt.Annotation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "time":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setTime(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "authorReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthorReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthorReference(_field_);
				}
				return _field_;}
			case "authorString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getAuthorString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setAuthorString(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Annotation");
			}
		}
	}
	private static class SetAnswerFormat {
		static void set(com.dtc.fhir.gwt.AnswerFormat instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AnswerFormat instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AnswerFormatList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AnswerFormatList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AnswerFormatList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AnswerFormat");
			}
		}

		static Object get(com.dtc.fhir.gwt.AnswerFormat _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AnswerFormatList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AnswerFormat");
			}
		}
	}
	private static class SetAppointment {
		static void set(com.dtc.fhir.gwt.Appointment instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Appointment instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "priority":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setPriority((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "slot":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> slotList = instance.getSlot();
					if (slotList.size() < index + 1) {
						slotList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						slotList.set(Math.min(slotList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "comment":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComment((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.AppointmentStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.AppointmentStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AppointmentStatus");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "minutesDuration":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setMinutesDuration((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "participant":
				if (value instanceof com.dtc.fhir.gwt.AppointmentParticipant || value == null) {
					List<com.dtc.fhir.gwt.AppointmentParticipant> participantList = instance.getParticipant();
					if (participantList.size() < index + 1) {
						participantList.add((com.dtc.fhir.gwt.AppointmentParticipant)value);
					} else {
						participantList.set(Math.min(participantList.size() - 1, index), (com.dtc.fhir.gwt.AppointmentParticipant)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "start":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setStart((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "end":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setEnd((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Appointment");
			}
		}

		static Object get(com.dtc.fhir.gwt.Appointment _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "priority":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getPriority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setPriority(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "slot":
				List<com.dtc.fhir.gwt.Reference> slotList = _instance_.getSlot();
				if (slotList.size() < _index_ + 1) {
					slotList.add(new com.dtc.fhir.gwt.Reference());
				}
				return slotList.get(Math.min(slotList.size() - 1, _index_));
			case "comment":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComment(_field_);
				}
				return _field_;}
			case "reason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReason(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.AppointmentStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AppointmentStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "minutesDuration":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getMinutesDuration();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setMinutesDuration(_field_);
				}
				return _field_;}
			case "participant":
				List<com.dtc.fhir.gwt.AppointmentParticipant> participantList = _instance_.getParticipant();
				if (participantList.size() < _index_ + 1) {
					participantList.add(new com.dtc.fhir.gwt.AppointmentParticipant());
				}
				return participantList.get(Math.min(participantList.size() - 1, _index_));
			case "start":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getStart();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setStart(_field_);
				}
				return _field_;}
			case "end":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getEnd();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setEnd(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Appointment");
			}
		}
	}
	private static class SetAppointmentParticipant {
		static void set(com.dtc.fhir.gwt.AppointmentParticipant instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AppointmentParticipant instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "actor":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setActor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.ParticipationStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.ParticipationStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ParticipationStatus");
				}
				break;
			case "required":
				if (value instanceof com.dtc.fhir.gwt.ParticipantRequired || value == null) {
					instance.setRequired((com.dtc.fhir.gwt.ParticipantRequired)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ParticipantRequired");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AppointmentParticipant");
			}
		}

		static Object get(com.dtc.fhir.gwt.AppointmentParticipant _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				List<com.dtc.fhir.gwt.CodeableConcept> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "actor":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getActor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setActor(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.ParticipationStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ParticipationStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "required":
				{com.dtc.fhir.gwt.ParticipantRequired _field_ = _instance_.getRequired();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ParticipantRequired();
					_instance_.setRequired(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AppointmentParticipant");
			}
		}
	}
	private static class SetAppointmentResponse {
		static void set(com.dtc.fhir.gwt.AppointmentResponse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AppointmentResponse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "comment":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComment((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "actor":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setActor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "appointment":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAppointment((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "participantType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> participantTypeList = instance.getParticipantType();
					if (participantTypeList.size() < index + 1) {
						participantTypeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						participantTypeList.set(Math.min(participantTypeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "participantStatus":
				if (value instanceof com.dtc.fhir.gwt.ParticipantStatus || value == null) {
					instance.setParticipantStatus((com.dtc.fhir.gwt.ParticipantStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ParticipantStatus");
				}
				break;
			case "start":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setStart((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "end":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setEnd((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AppointmentResponse");
			}
		}

		static Object get(com.dtc.fhir.gwt.AppointmentResponse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "comment":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComment(_field_);
				}
				return _field_;}
			case "actor":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getActor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setActor(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "appointment":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAppointment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAppointment(_field_);
				}
				return _field_;}
			case "participantType":
				List<com.dtc.fhir.gwt.CodeableConcept> participantTypeList = _instance_.getParticipantType();
				if (participantTypeList.size() < _index_ + 1) {
					participantTypeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return participantTypeList.get(Math.min(participantTypeList.size() - 1, _index_));
			case "participantStatus":
				{com.dtc.fhir.gwt.ParticipantStatus _field_ = _instance_.getParticipantStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ParticipantStatus();
					_instance_.setParticipantStatus(_field_);
				}
				return _field_;}
			case "start":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getStart();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setStart(_field_);
				}
				return _field_;}
			case "end":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getEnd();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setEnd(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AppointmentResponse");
			}
		}
	}
	private static class SetAppointmentStatus {
		static void set(com.dtc.fhir.gwt.AppointmentStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AppointmentStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AppointmentStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AppointmentStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AppointmentStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AppointmentStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.AppointmentStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AppointmentStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AppointmentStatus");
			}
		}
	}
	private static class SetAssertionDirectionType {
		static void set(com.dtc.fhir.gwt.AssertionDirectionType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AssertionDirectionType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AssertionDirectionTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AssertionDirectionTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AssertionDirectionTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AssertionDirectionType");
			}
		}

		static Object get(com.dtc.fhir.gwt.AssertionDirectionType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AssertionDirectionTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AssertionDirectionType");
			}
		}
	}
	private static class SetAssertionOperatorType {
		static void set(com.dtc.fhir.gwt.AssertionOperatorType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AssertionOperatorType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AssertionOperatorTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AssertionOperatorTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AssertionOperatorTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AssertionOperatorType");
			}
		}

		static Object get(com.dtc.fhir.gwt.AssertionOperatorType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AssertionOperatorTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AssertionOperatorType");
			}
		}
	}
	private static class SetAssertionResponseTypes {
		static void set(com.dtc.fhir.gwt.AssertionResponseTypes instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AssertionResponseTypes instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AssertionResponseTypesList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AssertionResponseTypesList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AssertionResponseTypesList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AssertionResponseTypes");
			}
		}

		static Object get(com.dtc.fhir.gwt.AssertionResponseTypes _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AssertionResponseTypesList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AssertionResponseTypes");
			}
		}
	}
	private static class SetAttachment {
		static void set(com.dtc.fhir.gwt.Attachment instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Attachment instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "size":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setSize((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "contentType":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setContentType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "data":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setData((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "hash":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setHash((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "creation":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreation((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "title":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setTitle((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Attachment");
			}
		}

		static Object get(com.dtc.fhir.gwt.Attachment _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "size":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getSize();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setSize(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "contentType":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getContentType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setContentType(_field_);
				}
				return _field_;}
			case "data":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setData(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "hash":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getHash();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setHash(_field_);
				}
				return _field_;}
			case "creation":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreation(_field_);
				}
				return _field_;}
			case "title":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getTitle();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setTitle(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Attachment");
			}
		}
	}
	private static class SetAuditEvent {
		static void set(com.dtc.fhir.gwt.AuditEvent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEvent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "object":
				if (value instanceof com.dtc.fhir.gwt.AuditEventObject || value == null) {
					List<com.dtc.fhir.gwt.AuditEventObject> objectList = instance.getObject();
					if (objectList.size() < index + 1) {
						objectList.add((com.dtc.fhir.gwt.AuditEventObject)value);
					} else {
						objectList.set(Math.min(objectList.size() - 1, index), (com.dtc.fhir.gwt.AuditEventObject)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.AuditEventSource || value == null) {
					instance.setSource((com.dtc.fhir.gwt.AuditEventSource)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AuditEventSource");
				}
				break;
			case "participant":
				if (value instanceof com.dtc.fhir.gwt.AuditEventParticipant || value == null) {
					List<com.dtc.fhir.gwt.AuditEventParticipant> participantList = instance.getParticipant();
					if (participantList.size() < index + 1) {
						participantList.add((com.dtc.fhir.gwt.AuditEventParticipant)value);
					} else {
						participantList.set(Math.min(participantList.size() - 1, index), (com.dtc.fhir.gwt.AuditEventParticipant)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "event":
				if (value instanceof com.dtc.fhir.gwt.AuditEventEvent || value == null) {
					instance.setEvent((com.dtc.fhir.gwt.AuditEventEvent)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AuditEventEvent");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEvent");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEvent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "object":
				List<com.dtc.fhir.gwt.AuditEventObject> objectList = _instance_.getObject();
				if (objectList.size() < _index_ + 1) {
					objectList.add(new com.dtc.fhir.gwt.AuditEventObject());
				}
				return objectList.get(Math.min(objectList.size() - 1, _index_));
			case "source":
				{com.dtc.fhir.gwt.AuditEventSource _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AuditEventSource();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "participant":
				List<com.dtc.fhir.gwt.AuditEventParticipant> participantList = _instance_.getParticipant();
				if (participantList.size() < _index_ + 1) {
					participantList.add(new com.dtc.fhir.gwt.AuditEventParticipant());
				}
				return participantList.get(Math.min(participantList.size() - 1, _index_));
			case "event":
				{com.dtc.fhir.gwt.AuditEventEvent _field_ = _instance_.getEvent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AuditEventEvent();
					_instance_.setEvent(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEvent");
			}
		}
	}
	private static class SetAuditEventAction {
		static void set(com.dtc.fhir.gwt.AuditEventAction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEventAction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.AuditEventActionList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.AuditEventActionList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AuditEventActionList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEventAction");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEventAction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.AuditEventActionList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEventAction");
			}
		}
	}
	private static class SetAuditEventDetail {
		static void set(com.dtc.fhir.gwt.AuditEventDetail instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEventDetail instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setType((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEventDetail");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEventDetail _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "value":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEventDetail");
			}
		}
	}
	private static class SetAuditEventEvent {
		static void set(com.dtc.fhir.gwt.AuditEventEvent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEventEvent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.AuditEventOutcome || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.AuditEventOutcome)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AuditEventOutcome");
				}
				break;
			case "action":
				if (value instanceof com.dtc.fhir.gwt.AuditEventAction || value == null) {
					instance.setAction((com.dtc.fhir.gwt.AuditEventAction)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AuditEventAction");
				}
				break;
			case "subtype":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> subtypeList = instance.getSubtype();
					if (subtypeList.size() < index + 1) {
						subtypeList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						subtypeList.set(Math.min(subtypeList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "outcomeDesc":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setOutcomeDesc((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "purposeOfEvent":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> purposeOfEventList = instance.getPurposeOfEvent();
					if (purposeOfEventList.size() < index + 1) {
						purposeOfEventList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						purposeOfEventList.set(Math.min(purposeOfEventList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "dateTime":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setDateTime((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEventEvent");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEventEvent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "outcome":
				{com.dtc.fhir.gwt.AuditEventOutcome _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AuditEventOutcome();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "action":
				{com.dtc.fhir.gwt.AuditEventAction _field_ = _instance_.getAction();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AuditEventAction();
					_instance_.setAction(_field_);
				}
				return _field_;}
			case "subtype":
				List<com.dtc.fhir.gwt.Coding> subtypeList = _instance_.getSubtype();
				if (subtypeList.size() < _index_ + 1) {
					subtypeList.add(new com.dtc.fhir.gwt.Coding());
				}
				return subtypeList.get(Math.min(subtypeList.size() - 1, _index_));
			case "outcomeDesc":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getOutcomeDesc();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setOutcomeDesc(_field_);
				}
				return _field_;}
			case "purposeOfEvent":
				List<com.dtc.fhir.gwt.Coding> purposeOfEventList = _instance_.getPurposeOfEvent();
				if (purposeOfEventList.size() < _index_ + 1) {
					purposeOfEventList.add(new com.dtc.fhir.gwt.Coding());
				}
				return purposeOfEventList.get(Math.min(purposeOfEventList.size() - 1, _index_));
			case "dateTime":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setDateTime(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEventEvent");
			}
		}
	}
	private static class SetAuditEventNetwork {
		static void set(com.dtc.fhir.gwt.AuditEventNetwork instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEventNetwork instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setAddress((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.AuditEventParticipantNetworkType || value == null) {
					instance.setType((com.dtc.fhir.gwt.AuditEventParticipantNetworkType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AuditEventParticipantNetworkType");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEventNetwork");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEventNetwork _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setAddress(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.AuditEventParticipantNetworkType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AuditEventParticipantNetworkType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEventNetwork");
			}
		}
	}
	private static class SetAuditEventObject {
		static void set(com.dtc.fhir.gwt.AuditEventObject instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEventObject instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "query":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setQuery((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "securityLabel":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> securityLabelList = instance.getSecurityLabel();
					if (securityLabelList.size() < index + 1) {
						securityLabelList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						securityLabelList.set(Math.min(securityLabelList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "role":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRole((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "lifecycle":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setLifecycle((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.AuditEventDetail || value == null) {
					List<com.dtc.fhir.gwt.AuditEventDetail> detailList = instance.getDetail();
					if (detailList.size() < index + 1) {
						detailList.add((com.dtc.fhir.gwt.AuditEventDetail)value);
					} else {
						detailList.set(Math.min(detailList.size() - 1, index), (com.dtc.fhir.gwt.AuditEventDetail)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEventObject");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEventObject _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "query":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getQuery();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setQuery(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "securityLabel":
				List<com.dtc.fhir.gwt.Coding> securityLabelList = _instance_.getSecurityLabel();
				if (securityLabelList.size() < _index_ + 1) {
					securityLabelList.add(new com.dtc.fhir.gwt.Coding());
				}
				return securityLabelList.get(Math.min(securityLabelList.size() - 1, _index_));
			case "role":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRole();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRole(_field_);
				}
				return _field_;}
			case "lifecycle":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getLifecycle();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setLifecycle(_field_);
				}
				return _field_;}
			case "detail":
				List<com.dtc.fhir.gwt.AuditEventDetail> detailList = _instance_.getDetail();
				if (detailList.size() < _index_ + 1) {
					detailList.add(new com.dtc.fhir.gwt.AuditEventDetail());
				}
				return detailList.get(Math.min(detailList.size() - 1, _index_));
			case "reference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEventObject");
			}
		}
	}
	private static class SetAuditEventOutcome {
		static void set(com.dtc.fhir.gwt.AuditEventOutcome instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEventOutcome instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEventOutcome");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEventOutcome _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEventOutcome");
			}
		}
	}
	private static class SetAuditEventParticipant {
		static void set(com.dtc.fhir.gwt.AuditEventParticipant instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEventParticipant instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setLocation((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "network":
				if (value instanceof com.dtc.fhir.gwt.AuditEventNetwork || value == null) {
					instance.setNetwork((com.dtc.fhir.gwt.AuditEventNetwork)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AuditEventNetwork");
				}
				break;
			case "policy":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					List<com.dtc.fhir.gwt.Uri> policyList = instance.getPolicy();
					if (policyList.size() < index + 1) {
						policyList.add((com.dtc.fhir.gwt.Uri)value);
					} else {
						policyList.set(Math.min(policyList.size() - 1, index), (com.dtc.fhir.gwt.Uri)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "role":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> roleList = instance.getRole();
					if (roleList.size() < index + 1) {
						roleList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						roleList.set(Math.min(roleList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "purposeOfUse":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> purposeOfUseList = instance.getPurposeOfUse();
					if (purposeOfUseList.size() < index + 1) {
						purposeOfUseList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						purposeOfUseList.set(Math.min(purposeOfUseList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "userId":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setUserId((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "altId":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setAltId((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "requestor":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setRequestor((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "media":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setMedia((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEventParticipant");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEventParticipant _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getLocation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setLocation(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "network":
				{com.dtc.fhir.gwt.AuditEventNetwork _field_ = _instance_.getNetwork();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AuditEventNetwork();
					_instance_.setNetwork(_field_);
				}
				return _field_;}
			case "policy":
				List<com.dtc.fhir.gwt.Uri> policyList = _instance_.getPolicy();
				if (policyList.size() < _index_ + 1) {
					policyList.add(new com.dtc.fhir.gwt.Uri());
				}
				return policyList.get(Math.min(policyList.size() - 1, _index_));
			case "role":
				List<com.dtc.fhir.gwt.CodeableConcept> roleList = _instance_.getRole();
				if (roleList.size() < _index_ + 1) {
					roleList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return roleList.get(Math.min(roleList.size() - 1, _index_));
			case "purposeOfUse":
				List<com.dtc.fhir.gwt.Coding> purposeOfUseList = _instance_.getPurposeOfUse();
				if (purposeOfUseList.size() < _index_ + 1) {
					purposeOfUseList.add(new com.dtc.fhir.gwt.Coding());
				}
				return purposeOfUseList.get(Math.min(purposeOfUseList.size() - 1, _index_));
			case "reference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReference(_field_);
				}
				return _field_;}
			case "userId":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getUserId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setUserId(_field_);
				}
				return _field_;}
			case "altId":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getAltId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setAltId(_field_);
				}
				return _field_;}
			case "requestor":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getRequestor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setRequestor(_field_);
				}
				return _field_;}
			case "media":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getMedia();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setMedia(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEventParticipant");
			}
		}
	}
	private static class SetAuditEventParticipantNetworkType {
		static void set(com.dtc.fhir.gwt.AuditEventParticipantNetworkType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEventParticipantNetworkType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEventParticipantNetworkType");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEventParticipantNetworkType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEventParticipantNetworkType");
			}
		}
	}
	private static class SetAuditEventSource {
		static void set(com.dtc.fhir.gwt.AuditEventSource instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.AuditEventSource instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "site":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setSite((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of AuditEventSource");
			}
		}

		static Object get(com.dtc.fhir.gwt.AuditEventSource _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				List<com.dtc.fhir.gwt.Coding> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.Coding());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "site":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getSite();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setSite(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of AuditEventSource");
			}
		}
	}
	private static class SetBackboneElement {
		static void set(com.dtc.fhir.gwt.BackboneElement instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BackboneElement instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BackboneElement");
			}
		}

		static Object get(com.dtc.fhir.gwt.BackboneElement _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BackboneElement");
			}
		}
	}
	private static class SetBase64Binary {
		static void set(com.dtc.fhir.gwt.Base64Binary instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Base64Binary instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof byte[] || value == null) {
					instance.setValue((byte[])value);
				} else {
					throw new IllegalArgumentException("value is not a byte[]");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Base64Binary");
			}
		}

		static Object get(com.dtc.fhir.gwt.Base64Binary _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{byte[] _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Base64Binary");
			}
		}
	}
	private static class SetBasic {
		static void set(com.dtc.fhir.gwt.Basic instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Basic instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "created":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Basic");
			}
		}

		static Object get(com.dtc.fhir.gwt.Basic _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "created":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "author":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthor(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Basic");
			}
		}
	}
	private static class SetBinary {
		static void set(com.dtc.fhir.gwt.Binary instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Binary instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "content":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setContent((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "contentType":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setContentType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Binary");
			}
		}

		static Object get(com.dtc.fhir.gwt.Binary _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "content":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getContent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setContent(_field_);
				}
				return _field_;}
			case "contentType":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getContentType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setContentType(_field_);
				}
				return _field_;}
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Binary");
			}
		}
	}
	private static class SetBindingStrength {
		static void set(com.dtc.fhir.gwt.BindingStrength instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BindingStrength instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.BindingStrengthList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.BindingStrengthList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BindingStrengthList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BindingStrength");
			}
		}

		static Object get(com.dtc.fhir.gwt.BindingStrength _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.BindingStrengthList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BindingStrength");
			}
		}
	}
	private static class SetBodySite {
		static void set(com.dtc.fhir.gwt.BodySite instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BodySite instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "image":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					List<com.dtc.fhir.gwt.Attachment> imageList = instance.getImage();
					if (imageList.size() < index + 1) {
						imageList.add((com.dtc.fhir.gwt.Attachment)value);
					} else {
						imageList.set(Math.min(imageList.size() - 1, index), (com.dtc.fhir.gwt.Attachment)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifier":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> modifierList = instance.getModifier();
					if (modifierList.size() < index + 1) {
						modifierList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						modifierList.set(Math.min(modifierList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BodySite");
			}
		}

		static Object get(com.dtc.fhir.gwt.BodySite _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "image":
				List<com.dtc.fhir.gwt.Attachment> imageList = _instance_.getImage();
				if (imageList.size() < _index_ + 1) {
					imageList.add(new com.dtc.fhir.gwt.Attachment());
				}
				return imageList.get(Math.min(imageList.size() - 1, _index_));
			case "modifier":
				List<com.dtc.fhir.gwt.CodeableConcept> modifierList = _instance_.getModifier();
				if (modifierList.size() < _index_ + 1) {
					modifierList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return modifierList.get(Math.min(modifierList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BodySite");
			}
		}
	}
	private static class SetBooleanDt {
		static void set(com.dtc.fhir.gwt.BooleanDt instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BooleanDt instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BooleanDt");
			}
		}

		static Object get(com.dtc.fhir.gwt.BooleanDt _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BooleanDt");
			}
		}
	}
	private static class SetBundle {
		static void set(com.dtc.fhir.gwt.Bundle instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Bundle instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.BundleType || value == null) {
					instance.setType((com.dtc.fhir.gwt.BundleType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BundleType");
				}
				break;
			case "signature":
				if (value instanceof com.dtc.fhir.gwt.Signature || value == null) {
					instance.setSignature((com.dtc.fhir.gwt.Signature)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Signature");
				}
				break;
			case "entry":
				if (value instanceof com.dtc.fhir.gwt.BundleEntry || value == null) {
					List<com.dtc.fhir.gwt.BundleEntry> entryList = instance.getEntry();
					if (entryList.size() < index + 1) {
						entryList.add((com.dtc.fhir.gwt.BundleEntry)value);
					} else {
						entryList.set(Math.min(entryList.size() - 1, index), (com.dtc.fhir.gwt.BundleEntry)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "total":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setTotal((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "link":
				if (value instanceof com.dtc.fhir.gwt.BundleLink || value == null) {
					List<com.dtc.fhir.gwt.BundleLink> linkList = instance.getLink();
					if (linkList.size() < index + 1) {
						linkList.add((com.dtc.fhir.gwt.BundleLink)value);
					} else {
						linkList.set(Math.min(linkList.size() - 1, index), (com.dtc.fhir.gwt.BundleLink)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Bundle");
			}
		}

		static Object get(com.dtc.fhir.gwt.Bundle _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.BundleType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BundleType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "signature":
				{com.dtc.fhir.gwt.Signature _field_ = _instance_.getSignature();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Signature();
					_instance_.setSignature(_field_);
				}
				return _field_;}
			case "entry":
				List<com.dtc.fhir.gwt.BundleEntry> entryList = _instance_.getEntry();
				if (entryList.size() < _index_ + 1) {
					entryList.add(new com.dtc.fhir.gwt.BundleEntry());
				}
				return entryList.get(Math.min(entryList.size() - 1, _index_));
			case "total":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getTotal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setTotal(_field_);
				}
				return _field_;}
			case "link":
				List<com.dtc.fhir.gwt.BundleLink> linkList = _instance_.getLink();
				if (linkList.size() < _index_ + 1) {
					linkList.add(new com.dtc.fhir.gwt.BundleLink());
				}
				return linkList.get(Math.min(linkList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Bundle");
			}
		}
	}
	private static class SetBundleEntry {
		static void set(com.dtc.fhir.gwt.BundleEntry instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BundleEntry instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "resource":
				if (value instanceof com.dtc.fhir.gwt.ResourceContainer || value == null) {
					instance.setResource((com.dtc.fhir.gwt.ResourceContainer)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ResourceContainer");
				}
				break;
			case "request":
				if (value instanceof com.dtc.fhir.gwt.BundleRequest || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.BundleRequest)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BundleRequest");
				}
				break;
			case "response":
				if (value instanceof com.dtc.fhir.gwt.BundleResponse || value == null) {
					instance.setResponse((com.dtc.fhir.gwt.BundleResponse)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BundleResponse");
				}
				break;
			case "link":
				if (value instanceof com.dtc.fhir.gwt.BundleLink || value == null) {
					List<com.dtc.fhir.gwt.BundleLink> linkList = instance.getLink();
					if (linkList.size() < index + 1) {
						linkList.add((com.dtc.fhir.gwt.BundleLink)value);
					} else {
						linkList.set(Math.min(linkList.size() - 1, index), (com.dtc.fhir.gwt.BundleLink)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "fullUrl":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setFullUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "search":
				if (value instanceof com.dtc.fhir.gwt.BundleSearch || value == null) {
					instance.setSearch((com.dtc.fhir.gwt.BundleSearch)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BundleSearch");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BundleEntry");
			}
		}

		static Object get(com.dtc.fhir.gwt.BundleEntry _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "resource":
				{com.dtc.fhir.gwt.ResourceContainer _field_ = _instance_.getResource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ResourceContainer();
					_instance_.setResource(_field_);
				}
				return _field_;}
			case "request":
				{com.dtc.fhir.gwt.BundleRequest _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BundleRequest();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "response":
				{com.dtc.fhir.gwt.BundleResponse _field_ = _instance_.getResponse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BundleResponse();
					_instance_.setResponse(_field_);
				}
				return _field_;}
			case "link":
				List<com.dtc.fhir.gwt.BundleLink> linkList = _instance_.getLink();
				if (linkList.size() < _index_ + 1) {
					linkList.add(new com.dtc.fhir.gwt.BundleLink());
				}
				return linkList.get(Math.min(linkList.size() - 1, _index_));
			case "fullUrl":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getFullUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setFullUrl(_field_);
				}
				return _field_;}
			case "search":
				{com.dtc.fhir.gwt.BundleSearch _field_ = _instance_.getSearch();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BundleSearch();
					_instance_.setSearch(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BundleEntry");
			}
		}
	}
	private static class SetBundleLink {
		static void set(com.dtc.fhir.gwt.BundleLink instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BundleLink instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "relation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRelation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BundleLink");
			}
		}

		static Object get(com.dtc.fhir.gwt.BundleLink _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "relation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRelation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRelation(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BundleLink");
			}
		}
	}
	private static class SetBundleRequest {
		static void set(com.dtc.fhir.gwt.BundleRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BundleRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "method":
				if (value instanceof com.dtc.fhir.gwt.HTTPVerb || value == null) {
					instance.setMethod((com.dtc.fhir.gwt.HTTPVerb)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HTTPVerb");
				}
				break;
			case "ifModifiedSince":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setIfModifiedSince((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "ifMatch":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setIfMatch((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "ifNoneMatch":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setIfNoneMatch((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "ifNoneExist":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setIfNoneExist((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BundleRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.BundleRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "method":
				{com.dtc.fhir.gwt.HTTPVerb _field_ = _instance_.getMethod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HTTPVerb();
					_instance_.setMethod(_field_);
				}
				return _field_;}
			case "ifModifiedSince":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getIfModifiedSince();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setIfModifiedSince(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "ifMatch":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getIfMatch();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setIfMatch(_field_);
				}
				return _field_;}
			case "ifNoneMatch":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getIfNoneMatch();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setIfNoneMatch(_field_);
				}
				return _field_;}
			case "ifNoneExist":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getIfNoneExist();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setIfNoneExist(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BundleRequest");
			}
		}
	}
	private static class SetBundleResponse {
		static void set(com.dtc.fhir.gwt.BundleResponse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BundleResponse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setLocation((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "lastModified":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setLastModified((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "etag":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setEtag((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BundleResponse");
			}
		}

		static Object get(com.dtc.fhir.gwt.BundleResponse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getLocation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setLocation(_field_);
				}
				return _field_;}
			case "lastModified":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getLastModified();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setLastModified(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "etag":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getEtag();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setEtag(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BundleResponse");
			}
		}
	}
	private static class SetBundleSearch {
		static void set(com.dtc.fhir.gwt.BundleSearch instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BundleSearch instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "score":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setScore((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "mode":
				if (value instanceof com.dtc.fhir.gwt.SearchEntryMode || value == null) {
					instance.setMode((com.dtc.fhir.gwt.SearchEntryMode)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SearchEntryMode");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BundleSearch");
			}
		}

		static Object get(com.dtc.fhir.gwt.BundleSearch _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "score":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getScore();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setScore(_field_);
				}
				return _field_;}
			case "mode":
				{com.dtc.fhir.gwt.SearchEntryMode _field_ = _instance_.getMode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SearchEntryMode();
					_instance_.setMode(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BundleSearch");
			}
		}
	}
	private static class SetBundleType {
		static void set(com.dtc.fhir.gwt.BundleType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.BundleType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.BundleTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.BundleTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BundleTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of BundleType");
			}
		}

		static Object get(com.dtc.fhir.gwt.BundleType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.BundleTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of BundleType");
			}
		}
	}
	private static class SetCarePlan {
		static void set(com.dtc.fhir.gwt.CarePlan instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CarePlan instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "context":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setContext((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.CarePlanStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.CarePlanStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CarePlanStatus");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setNote((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> categoryList = instance.getCategory();
					if (categoryList.size() < index + 1) {
						categoryList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						categoryList.set(Math.min(categoryList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "activity":
				if (value instanceof com.dtc.fhir.gwt.CarePlanActivity || value == null) {
					List<com.dtc.fhir.gwt.CarePlanActivity> activityList = instance.getActivity();
					if (activityList.size() < index + 1) {
						activityList.add((com.dtc.fhir.gwt.CarePlanActivity)value);
					} else {
						activityList.set(Math.min(activityList.size() - 1, index), (com.dtc.fhir.gwt.CarePlanActivity)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "participant":
				if (value instanceof com.dtc.fhir.gwt.CarePlanParticipant || value == null) {
					List<com.dtc.fhir.gwt.CarePlanParticipant> participantList = instance.getParticipant();
					if (participantList.size() < index + 1) {
						participantList.add((com.dtc.fhir.gwt.CarePlanParticipant)value);
					} else {
						participantList.set(Math.min(participantList.size() - 1, index), (com.dtc.fhir.gwt.CarePlanParticipant)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "relatedPlan":
				if (value instanceof com.dtc.fhir.gwt.CarePlanRelatedPlan || value == null) {
					List<com.dtc.fhir.gwt.CarePlanRelatedPlan> relatedPlanList = instance.getRelatedPlan();
					if (relatedPlanList.size() < index + 1) {
						relatedPlanList.add((com.dtc.fhir.gwt.CarePlanRelatedPlan)value);
					} else {
						relatedPlanList.set(Math.min(relatedPlanList.size() - 1, index), (com.dtc.fhir.gwt.CarePlanRelatedPlan)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> authorList = instance.getAuthor();
					if (authorList.size() < index + 1) {
						authorList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						authorList.set(Math.min(authorList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "addresses":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> addressesList = instance.getAddresses();
					if (addressesList.size() < index + 1) {
						addressesList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						addressesList.set(Math.min(addressesList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modified":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setModified((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "support":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> supportList = instance.getSupport();
					if (supportList.size() < index + 1) {
						supportList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						supportList.set(Math.min(supportList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "goal":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> goalList = instance.getGoal();
					if (goalList.size() < index + 1) {
						goalList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						goalList.set(Math.min(goalList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CarePlan");
			}
		}

		static Object get(com.dtc.fhir.gwt.CarePlan _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "context":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getContext();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setContext(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.CarePlanStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CarePlanStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "note":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "category":
				List<com.dtc.fhir.gwt.CodeableConcept> categoryList = _instance_.getCategory();
				if (categoryList.size() < _index_ + 1) {
					categoryList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return categoryList.get(Math.min(categoryList.size() - 1, _index_));
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "activity":
				List<com.dtc.fhir.gwt.CarePlanActivity> activityList = _instance_.getActivity();
				if (activityList.size() < _index_ + 1) {
					activityList.add(new com.dtc.fhir.gwt.CarePlanActivity());
				}
				return activityList.get(Math.min(activityList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "participant":
				List<com.dtc.fhir.gwt.CarePlanParticipant> participantList = _instance_.getParticipant();
				if (participantList.size() < _index_ + 1) {
					participantList.add(new com.dtc.fhir.gwt.CarePlanParticipant());
				}
				return participantList.get(Math.min(participantList.size() - 1, _index_));
			case "relatedPlan":
				List<com.dtc.fhir.gwt.CarePlanRelatedPlan> relatedPlanList = _instance_.getRelatedPlan();
				if (relatedPlanList.size() < _index_ + 1) {
					relatedPlanList.add(new com.dtc.fhir.gwt.CarePlanRelatedPlan());
				}
				return relatedPlanList.get(Math.min(relatedPlanList.size() - 1, _index_));
			case "author":
				List<com.dtc.fhir.gwt.Reference> authorList = _instance_.getAuthor();
				if (authorList.size() < _index_ + 1) {
					authorList.add(new com.dtc.fhir.gwt.Reference());
				}
				return authorList.get(Math.min(authorList.size() - 1, _index_));
			case "addresses":
				List<com.dtc.fhir.gwt.Reference> addressesList = _instance_.getAddresses();
				if (addressesList.size() < _index_ + 1) {
					addressesList.add(new com.dtc.fhir.gwt.Reference());
				}
				return addressesList.get(Math.min(addressesList.size() - 1, _index_));
			case "modified":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getModified();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setModified(_field_);
				}
				return _field_;}
			case "support":
				List<com.dtc.fhir.gwt.Reference> supportList = _instance_.getSupport();
				if (supportList.size() < _index_ + 1) {
					supportList.add(new com.dtc.fhir.gwt.Reference());
				}
				return supportList.get(Math.min(supportList.size() - 1, _index_));
			case "goal":
				List<com.dtc.fhir.gwt.Reference> goalList = _instance_.getGoal();
				if (goalList.size() < _index_ + 1) {
					goalList.add(new com.dtc.fhir.gwt.Reference());
				}
				return goalList.get(Math.min(goalList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CarePlan");
			}
		}
	}
	private static class SetCarePlanActivity {
		static void set(com.dtc.fhir.gwt.CarePlanActivity instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CarePlanActivity instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "progress":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					List<com.dtc.fhir.gwt.Annotation> progressList = instance.getProgress();
					if (progressList.size() < index + 1) {
						progressList.add((com.dtc.fhir.gwt.Annotation)value);
					} else {
						progressList.set(Math.min(progressList.size() - 1, index), (com.dtc.fhir.gwt.Annotation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "actionResulting":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> actionResultingList = instance.getActionResulting();
					if (actionResultingList.size() < index + 1) {
						actionResultingList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						actionResultingList.set(Math.min(actionResultingList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.CarePlanDetail || value == null) {
					instance.setDetail((com.dtc.fhir.gwt.CarePlanDetail)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CarePlanDetail");
				}
				break;
			case "reference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CarePlanActivity");
			}
		}

		static Object get(com.dtc.fhir.gwt.CarePlanActivity _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "progress":
				List<com.dtc.fhir.gwt.Annotation> progressList = _instance_.getProgress();
				if (progressList.size() < _index_ + 1) {
					progressList.add(new com.dtc.fhir.gwt.Annotation());
				}
				return progressList.get(Math.min(progressList.size() - 1, _index_));
			case "actionResulting":
				List<com.dtc.fhir.gwt.Reference> actionResultingList = _instance_.getActionResulting();
				if (actionResultingList.size() < _index_ + 1) {
					actionResultingList.add(new com.dtc.fhir.gwt.Reference());
				}
				return actionResultingList.get(Math.min(actionResultingList.size() - 1, _index_));
			case "detail":
				{com.dtc.fhir.gwt.CarePlanDetail _field_ = _instance_.getDetail();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CarePlanDetail();
					_instance_.setDetail(_field_);
				}
				return _field_;}
			case "reference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CarePlanActivity");
			}
		}
	}
	private static class SetCarePlanActivityStatus {
		static void set(com.dtc.fhir.gwt.CarePlanActivityStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CarePlanActivityStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.CarePlanActivityStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.CarePlanActivityStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CarePlanActivityStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CarePlanActivityStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.CarePlanActivityStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.CarePlanActivityStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CarePlanActivityStatus");
			}
		}
	}
	private static class SetCarePlanDetail {
		static void set(com.dtc.fhir.gwt.CarePlanDetail instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CarePlanDetail instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setLocation((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.CarePlanActivityStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.CarePlanActivityStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CarePlanActivityStatus");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "scheduledPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setScheduledPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "statusReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setStatusReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reasonReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> reasonReferenceList = instance.getReasonReference();
					if (reasonReferenceList.size() < index + 1) {
						reasonReferenceList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						reasonReferenceList.set(Math.min(reasonReferenceList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "scheduledTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setScheduledTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "reasonCode":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonCodeList = instance.getReasonCode();
					if (reasonCodeList.size() < index + 1) {
						reasonCodeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonCodeList.set(Math.min(reasonCodeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "prohibited":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setProhibited((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "scheduledString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setScheduledString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "productCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setProductCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "productReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProductReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "dailyAmount":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setDailyAmount((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "goal":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> goalList = instance.getGoal();
					if (goalList.size() < index + 1) {
						goalList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						goalList.set(Math.min(goalList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "performer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> performerList = instance.getPerformer();
					if (performerList.size() < index + 1) {
						performerList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						performerList.set(Math.min(performerList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CarePlanDetail");
			}
		}

		static Object get(com.dtc.fhir.gwt.CarePlanDetail _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getLocation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setLocation(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.CarePlanActivityStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CarePlanActivityStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "scheduledPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getScheduledPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setScheduledPeriod(_field_);
				}
				return _field_;}
			case "statusReason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getStatusReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setStatusReason(_field_);
				}
				return _field_;}
			case "reasonReference":
				List<com.dtc.fhir.gwt.Reference> reasonReferenceList = _instance_.getReasonReference();
				if (reasonReferenceList.size() < _index_ + 1) {
					reasonReferenceList.add(new com.dtc.fhir.gwt.Reference());
				}
				return reasonReferenceList.get(Math.min(reasonReferenceList.size() - 1, _index_));
			case "scheduledTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getScheduledTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setScheduledTiming(_field_);
				}
				return _field_;}
			case "reasonCode":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonCodeList = _instance_.getReasonCode();
				if (reasonCodeList.size() < _index_ + 1) {
					reasonCodeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonCodeList.get(Math.min(reasonCodeList.size() - 1, _index_));
			case "prohibited":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getProhibited();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setProhibited(_field_);
				}
				return _field_;}
			case "scheduledString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getScheduledString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setScheduledString(_field_);
				}
				return _field_;}
			case "productCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getProductCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setProductCodeableConcept(_field_);
				}
				return _field_;}
			case "productReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProductReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProductReference(_field_);
				}
				return _field_;}
			case "dailyAmount":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getDailyAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setDailyAmount(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "goal":
				List<com.dtc.fhir.gwt.Reference> goalList = _instance_.getGoal();
				if (goalList.size() < _index_ + 1) {
					goalList.add(new com.dtc.fhir.gwt.Reference());
				}
				return goalList.get(Math.min(goalList.size() - 1, _index_));
			case "performer":
				List<com.dtc.fhir.gwt.Reference> performerList = _instance_.getPerformer();
				if (performerList.size() < _index_ + 1) {
					performerList.add(new com.dtc.fhir.gwt.Reference());
				}
				return performerList.get(Math.min(performerList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CarePlanDetail");
			}
		}
	}
	private static class SetCarePlanParticipant {
		static void set(com.dtc.fhir.gwt.CarePlanParticipant instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CarePlanParticipant instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "role":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRole((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "member":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setMember((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CarePlanParticipant");
			}
		}

		static Object get(com.dtc.fhir.gwt.CarePlanParticipant _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "role":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRole();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRole(_field_);
				}
				return _field_;}
			case "member":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getMember();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setMember(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CarePlanParticipant");
			}
		}
	}
	private static class SetCarePlanRelatedPlan {
		static void set(com.dtc.fhir.gwt.CarePlanRelatedPlan instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CarePlanRelatedPlan instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "plan":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPlan((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CarePlanRelationship || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CarePlanRelationship)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CarePlanRelationship");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CarePlanRelatedPlan");
			}
		}

		static Object get(com.dtc.fhir.gwt.CarePlanRelatedPlan _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "plan":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPlan();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPlan(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.CarePlanRelationship _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CarePlanRelationship();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CarePlanRelatedPlan");
			}
		}
	}
	private static class SetCarePlanRelationship {
		static void set(com.dtc.fhir.gwt.CarePlanRelationship instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CarePlanRelationship instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.CarePlanRelationshipList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.CarePlanRelationshipList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CarePlanRelationshipList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CarePlanRelationship");
			}
		}

		static Object get(com.dtc.fhir.gwt.CarePlanRelationship _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.CarePlanRelationshipList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CarePlanRelationship");
			}
		}
	}
	private static class SetCarePlanStatus {
		static void set(com.dtc.fhir.gwt.CarePlanStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CarePlanStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.CarePlanStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.CarePlanStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CarePlanStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CarePlanStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.CarePlanStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.CarePlanStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CarePlanStatus");
			}
		}
	}
	private static class SetClaim {
		static void set(com.dtc.fhir.gwt.Claim instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Claim instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "exception":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> exceptionList = instance.getException();
					if (exceptionList.size() < index + 1) {
						exceptionList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						exceptionList.set(Math.min(exceptionList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "priority":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setPriority((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.ClaimType || value == null) {
					instance.setType((com.dtc.fhir.gwt.ClaimType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ClaimType");
				}
				break;
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "prescription":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPrescription((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "item":
				if (value instanceof com.dtc.fhir.gwt.ClaimItem || value == null) {
					List<com.dtc.fhir.gwt.ClaimItem> itemList = instance.getItem();
					if (itemList.size() < index + 1) {
						itemList.add((com.dtc.fhir.gwt.ClaimItem)value);
					} else {
						itemList.set(Math.min(itemList.size() - 1, index), (com.dtc.fhir.gwt.ClaimItem)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "fundsReserve":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setFundsReserve((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "originalPrescription":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOriginalPrescription((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "accidentType":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setAccidentType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "interventionException":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> interventionExceptionList = instance.getInterventionException();
					if (interventionExceptionList.size() < index + 1) {
						interventionExceptionList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						interventionExceptionList.set(Math.min(interventionExceptionList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "additionalMaterials":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> additionalMaterialsList = instance.getAdditionalMaterials();
					if (additionalMaterialsList.size() < index + 1) {
						additionalMaterialsList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						additionalMaterialsList.set(Math.min(additionalMaterialsList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "missingTeeth":
				if (value instanceof com.dtc.fhir.gwt.ClaimMissingTeeth || value == null) {
					List<com.dtc.fhir.gwt.ClaimMissingTeeth> missingTeethList = instance.getMissingTeeth();
					if (missingTeethList.size() < index + 1) {
						missingTeethList.add((com.dtc.fhir.gwt.ClaimMissingTeeth)value);
					} else {
						missingTeethList.set(Math.min(missingTeethList.size() - 1, index), (com.dtc.fhir.gwt.ClaimMissingTeeth)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "enterer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEnterer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "condition":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> conditionList = instance.getCondition();
					if (conditionList.size() < index + 1) {
						conditionList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						conditionList.set(Math.min(conditionList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "coverage":
				if (value instanceof com.dtc.fhir.gwt.ClaimCoverage || value == null) {
					List<com.dtc.fhir.gwt.ClaimCoverage> coverageList = instance.getCoverage();
					if (coverageList.size() < index + 1) {
						coverageList.add((com.dtc.fhir.gwt.ClaimCoverage)value);
					} else {
						coverageList.set(Math.min(coverageList.size() - 1, index), (com.dtc.fhir.gwt.ClaimCoverage)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "provider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "use":
				if (value instanceof com.dtc.fhir.gwt.Use || value == null) {
					instance.setUse((com.dtc.fhir.gwt.Use)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Use");
				}
				break;
			case "facility":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setFacility((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "payee":
				if (value instanceof com.dtc.fhir.gwt.ClaimPayee || value == null) {
					instance.setPayee((com.dtc.fhir.gwt.ClaimPayee)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ClaimPayee");
				}
				break;
			case "referral":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReferral((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "diagnosis":
				if (value instanceof com.dtc.fhir.gwt.ClaimDiagnosis || value == null) {
					List<com.dtc.fhir.gwt.ClaimDiagnosis> diagnosisList = instance.getDiagnosis();
					if (diagnosisList.size() < index + 1) {
						diagnosisList.add((com.dtc.fhir.gwt.ClaimDiagnosis)value);
					} else {
						diagnosisList.set(Math.min(diagnosisList.size() - 1, index), (com.dtc.fhir.gwt.ClaimDiagnosis)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "school":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setSchool((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "accident":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setAccident((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Claim");
			}
		}

		static Object get(com.dtc.fhir.gwt.Claim _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "exception":
				List<com.dtc.fhir.gwt.Coding> exceptionList = _instance_.getException();
				if (exceptionList.size() < _index_ + 1) {
					exceptionList.add(new com.dtc.fhir.gwt.Coding());
				}
				return exceptionList.get(Math.min(exceptionList.size() - 1, _index_));
			case "priority":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getPriority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setPriority(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.ClaimType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ClaimType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "prescription":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPrescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPrescription(_field_);
				}
				return _field_;}
			case "item":
				List<com.dtc.fhir.gwt.ClaimItem> itemList = _instance_.getItem();
				if (itemList.size() < _index_ + 1) {
					itemList.add(new com.dtc.fhir.gwt.ClaimItem());
				}
				return itemList.get(Math.min(itemList.size() - 1, _index_));
			case "fundsReserve":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getFundsReserve();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setFundsReserve(_field_);
				}
				return _field_;}
			case "originalPrescription":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOriginalPrescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOriginalPrescription(_field_);
				}
				return _field_;}
			case "accidentType":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getAccidentType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setAccidentType(_field_);
				}
				return _field_;}
			case "interventionException":
				List<com.dtc.fhir.gwt.Coding> interventionExceptionList = _instance_.getInterventionException();
				if (interventionExceptionList.size() < _index_ + 1) {
					interventionExceptionList.add(new com.dtc.fhir.gwt.Coding());
				}
				return interventionExceptionList.get(Math.min(interventionExceptionList.size() - 1, _index_));
			case "additionalMaterials":
				List<com.dtc.fhir.gwt.Coding> additionalMaterialsList = _instance_.getAdditionalMaterials();
				if (additionalMaterialsList.size() < _index_ + 1) {
					additionalMaterialsList.add(new com.dtc.fhir.gwt.Coding());
				}
				return additionalMaterialsList.get(Math.min(additionalMaterialsList.size() - 1, _index_));
			case "missingTeeth":
				List<com.dtc.fhir.gwt.ClaimMissingTeeth> missingTeethList = _instance_.getMissingTeeth();
				if (missingTeethList.size() < _index_ + 1) {
					missingTeethList.add(new com.dtc.fhir.gwt.ClaimMissingTeeth());
				}
				return missingTeethList.get(Math.min(missingTeethList.size() - 1, _index_));
			case "enterer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEnterer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEnterer(_field_);
				}
				return _field_;}
			case "condition":
				List<com.dtc.fhir.gwt.Coding> conditionList = _instance_.getCondition();
				if (conditionList.size() < _index_ + 1) {
					conditionList.add(new com.dtc.fhir.gwt.Coding());
				}
				return conditionList.get(Math.min(conditionList.size() - 1, _index_));
			case "coverage":
				List<com.dtc.fhir.gwt.ClaimCoverage> coverageList = _instance_.getCoverage();
				if (coverageList.size() < _index_ + 1) {
					coverageList.add(new com.dtc.fhir.gwt.ClaimCoverage());
				}
				return coverageList.get(Math.min(coverageList.size() - 1, _index_));
			case "provider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProvider(_field_);
				}
				return _field_;}
			case "use":
				{com.dtc.fhir.gwt.Use _field_ = _instance_.getUse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Use();
					_instance_.setUse(_field_);
				}
				return _field_;}
			case "facility":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getFacility();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setFacility(_field_);
				}
				return _field_;}
			case "payee":
				{com.dtc.fhir.gwt.ClaimPayee _field_ = _instance_.getPayee();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ClaimPayee();
					_instance_.setPayee(_field_);
				}
				return _field_;}
			case "referral":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReferral();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReferral(_field_);
				}
				return _field_;}
			case "diagnosis":
				List<com.dtc.fhir.gwt.ClaimDiagnosis> diagnosisList = _instance_.getDiagnosis();
				if (diagnosisList.size() < _index_ + 1) {
					diagnosisList.add(new com.dtc.fhir.gwt.ClaimDiagnosis());
				}
				return diagnosisList.get(Math.min(diagnosisList.size() - 1, _index_));
			case "school":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getSchool();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setSchool(_field_);
				}
				return _field_;}
			case "accident":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getAccident();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setAccident(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Claim");
			}
		}
	}
	private static class SetClaimCoverage {
		static void set(com.dtc.fhir.gwt.ClaimCoverage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimCoverage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "sequence":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequence((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "relationship":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRelationship((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "focal":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setFocal((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "businessArrangement":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setBusinessArrangement((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "preAuthRef":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> preAuthRefList = instance.getPreAuthRef();
					if (preAuthRefList.size() < index + 1) {
						preAuthRefList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						preAuthRefList.set(Math.min(preAuthRefList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "claimResponse":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setClaimResponse((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "coverage":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setCoverage((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimCoverage");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimCoverage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "sequence":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequence(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "relationship":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRelationship();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRelationship(_field_);
				}
				return _field_;}
			case "focal":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getFocal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setFocal(_field_);
				}
				return _field_;}
			case "businessArrangement":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getBusinessArrangement();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setBusinessArrangement(_field_);
				}
				return _field_;}
			case "preAuthRef":
				List<com.dtc.fhir.gwt.StringDt> preAuthRefList = _instance_.getPreAuthRef();
				if (preAuthRefList.size() < _index_ + 1) {
					preAuthRefList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return preAuthRefList.get(Math.min(preAuthRefList.size() - 1, _index_));
			case "claimResponse":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getClaimResponse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setClaimResponse(_field_);
				}
				return _field_;}
			case "coverage":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getCoverage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setCoverage(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimCoverage");
			}
		}
	}
	private static class SetClaimDetail {
		static void set(com.dtc.fhir.gwt.ClaimDetail instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimDetail instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "sequence":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequence((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "unitPrice":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setUnitPrice((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "factor":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setFactor((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "points":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPoints((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "net":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setNet((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "service":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setService((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "subDetail":
				if (value instanceof com.dtc.fhir.gwt.ClaimSubDetail || value == null) {
					List<com.dtc.fhir.gwt.ClaimSubDetail> subDetailList = instance.getSubDetail();
					if (subDetailList.size() < index + 1) {
						subDetailList.add((com.dtc.fhir.gwt.ClaimSubDetail)value);
					} else {
						subDetailList.set(Math.min(subDetailList.size() - 1, index), (com.dtc.fhir.gwt.ClaimSubDetail)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "udi":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setUdi((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimDetail");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimDetail _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "sequence":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequence(_field_);
				}
				return _field_;}
			case "unitPrice":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getUnitPrice();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setUnitPrice(_field_);
				}
				return _field_;}
			case "factor":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getFactor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setFactor(_field_);
				}
				return _field_;}
			case "points":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPoints();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPoints(_field_);
				}
				return _field_;}
			case "net":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getNet();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setNet(_field_);
				}
				return _field_;}
			case "service":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getService();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setService(_field_);
				}
				return _field_;}
			case "subDetail":
				List<com.dtc.fhir.gwt.ClaimSubDetail> subDetailList = _instance_.getSubDetail();
				if (subDetailList.size() < _index_ + 1) {
					subDetailList.add(new com.dtc.fhir.gwt.ClaimSubDetail());
				}
				return subDetailList.get(Math.min(subDetailList.size() - 1, _index_));
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "udi":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getUdi();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setUdi(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimDetail");
			}
		}
	}
	private static class SetClaimDiagnosis {
		static void set(com.dtc.fhir.gwt.ClaimDiagnosis instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimDiagnosis instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "sequence":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequence((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "diagnosis":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setDiagnosis((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimDiagnosis");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimDiagnosis _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "sequence":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequence(_field_);
				}
				return _field_;}
			case "diagnosis":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getDiagnosis();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setDiagnosis(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimDiagnosis");
			}
		}
	}
	private static class SetClaimItem {
		static void set(com.dtc.fhir.gwt.ClaimItem instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimItem instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "bodySite":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setBodySite((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "sequence":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequence((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "unitPrice":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setUnitPrice((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "factor":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setFactor((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "points":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPoints((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "net":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setNet((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "service":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setService((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "subSite":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> subSiteList = instance.getSubSite();
					if (subSiteList.size() < index + 1) {
						subSiteList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						subSiteList.set(Math.min(subSiteList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "diagnosisLinkId":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					List<com.dtc.fhir.gwt.PositiveInt> diagnosisLinkIdList = instance.getDiagnosisLinkId();
					if (diagnosisLinkIdList.size() < index + 1) {
						diagnosisLinkIdList.add((com.dtc.fhir.gwt.PositiveInt)value);
					} else {
						diagnosisLinkIdList.set(Math.min(diagnosisLinkIdList.size() - 1, index), (com.dtc.fhir.gwt.PositiveInt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "serviceDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setServiceDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "prosthesis":
				if (value instanceof com.dtc.fhir.gwt.ClaimProsthesis || value == null) {
					instance.setProsthesis((com.dtc.fhir.gwt.ClaimProsthesis)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ClaimProsthesis");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.ClaimDetail || value == null) {
					List<com.dtc.fhir.gwt.ClaimDetail> detailList = instance.getDetail();
					if (detailList.size() < index + 1) {
						detailList.add((com.dtc.fhir.gwt.ClaimDetail)value);
					} else {
						detailList.set(Math.min(detailList.size() - 1, index), (com.dtc.fhir.gwt.ClaimDetail)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "udi":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setUdi((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "provider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifier":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> modifierList = instance.getModifier();
					if (modifierList.size() < index + 1) {
						modifierList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						modifierList.set(Math.min(modifierList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimItem");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimItem _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "bodySite":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getBodySite();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setBodySite(_field_);
				}
				return _field_;}
			case "sequence":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequence(_field_);
				}
				return _field_;}
			case "unitPrice":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getUnitPrice();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setUnitPrice(_field_);
				}
				return _field_;}
			case "factor":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getFactor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setFactor(_field_);
				}
				return _field_;}
			case "points":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPoints();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPoints(_field_);
				}
				return _field_;}
			case "net":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getNet();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setNet(_field_);
				}
				return _field_;}
			case "service":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getService();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setService(_field_);
				}
				return _field_;}
			case "subSite":
				List<com.dtc.fhir.gwt.Coding> subSiteList = _instance_.getSubSite();
				if (subSiteList.size() < _index_ + 1) {
					subSiteList.add(new com.dtc.fhir.gwt.Coding());
				}
				return subSiteList.get(Math.min(subSiteList.size() - 1, _index_));
			case "diagnosisLinkId":
				List<com.dtc.fhir.gwt.PositiveInt> diagnosisLinkIdList = _instance_.getDiagnosisLinkId();
				if (diagnosisLinkIdList.size() < _index_ + 1) {
					diagnosisLinkIdList.add(new com.dtc.fhir.gwt.PositiveInt());
				}
				return diagnosisLinkIdList.get(Math.min(diagnosisLinkIdList.size() - 1, _index_));
			case "serviceDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getServiceDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setServiceDate(_field_);
				}
				return _field_;}
			case "prosthesis":
				{com.dtc.fhir.gwt.ClaimProsthesis _field_ = _instance_.getProsthesis();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ClaimProsthesis();
					_instance_.setProsthesis(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "detail":
				List<com.dtc.fhir.gwt.ClaimDetail> detailList = _instance_.getDetail();
				if (detailList.size() < _index_ + 1) {
					detailList.add(new com.dtc.fhir.gwt.ClaimDetail());
				}
				return detailList.get(Math.min(detailList.size() - 1, _index_));
			case "udi":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getUdi();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setUdi(_field_);
				}
				return _field_;}
			case "provider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProvider(_field_);
				}
				return _field_;}
			case "modifier":
				List<com.dtc.fhir.gwt.Coding> modifierList = _instance_.getModifier();
				if (modifierList.size() < _index_ + 1) {
					modifierList.add(new com.dtc.fhir.gwt.Coding());
				}
				return modifierList.get(Math.min(modifierList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimItem");
			}
		}
	}
	private static class SetClaimMissingTeeth {
		static void set(com.dtc.fhir.gwt.ClaimMissingTeeth instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimMissingTeeth instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setReason((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "tooth":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setTooth((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "extractionDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setExtractionDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimMissingTeeth");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimMissingTeeth _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "reason":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setReason(_field_);
				}
				return _field_;}
			case "tooth":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getTooth();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setTooth(_field_);
				}
				return _field_;}
			case "extractionDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getExtractionDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setExtractionDate(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimMissingTeeth");
			}
		}
	}
	private static class SetClaimPayee {
		static void set(com.dtc.fhir.gwt.ClaimPayee instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimPayee instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "person":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPerson((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "provider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimPayee");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimPayee _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "person":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPerson();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPerson(_field_);
				}
				return _field_;}
			case "provider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProvider(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimPayee");
			}
		}
	}
	private static class SetClaimProsthesis {
		static void set(com.dtc.fhir.gwt.ClaimProsthesis instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimProsthesis instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "initial":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setInitial((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "priorDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setPriorDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "priorMaterial":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setPriorMaterial((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimProsthesis");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimProsthesis _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "initial":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getInitial();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setInitial(_field_);
				}
				return _field_;}
			case "priorDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getPriorDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setPriorDate(_field_);
				}
				return _field_;}
			case "priorMaterial":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getPriorMaterial();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setPriorMaterial(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimProsthesis");
			}
		}
	}
	private static class SetClaimResponse {
		static void set(com.dtc.fhir.gwt.ClaimResponse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseNote || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseNote> noteList = instance.getNote();
					if (noteList.size() < index + 1) {
						noteList.add((com.dtc.fhir.gwt.ClaimResponseNote)value);
					} else {
						noteList.set(Math.min(noteList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseNote)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "requestOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "requestProvider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "disposition":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisposition((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "item":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseItem || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseItem> itemList = instance.getItem();
					if (itemList.size() < index + 1) {
						itemList.add((com.dtc.fhir.gwt.ClaimResponseItem)value);
					} else {
						itemList.set(Math.min(itemList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseItem)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "unallocDeductable":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setUnallocDeductable((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "totalBenefit":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setTotalBenefit((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "paymentAdjustment":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setPaymentAdjustment((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "paymentAdjustmentReason":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setPaymentAdjustmentReason((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "paymentDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setPaymentDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "paymentAmount":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setPaymentAmount((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "paymentRef":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setPaymentRef((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "payeeType":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setPayeeType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "addItem":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseAddItem || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseAddItem> addItemList = instance.getAddItem();
					if (addItemList.size() < index + 1) {
						addItemList.add((com.dtc.fhir.gwt.ClaimResponseAddItem)value);
					} else {
						addItemList.set(Math.min(addItemList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseAddItem)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "error":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseError || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseError> errorList = instance.getError();
					if (errorList.size() < index + 1) {
						errorList.add((com.dtc.fhir.gwt.ClaimResponseError)value);
					} else {
						errorList.set(Math.min(errorList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseError)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "totalCost":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setTotalCost((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "reserved":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setReserved((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "form":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setForm((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "coverage":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseCoverage || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseCoverage> coverageList = instance.getCoverage();
					if (coverageList.size() < index + 1) {
						coverageList.add((com.dtc.fhir.gwt.ClaimResponseCoverage)value);
					} else {
						coverageList.set(Math.min(coverageList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseCoverage)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponse");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "outcome":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "note":
				List<com.dtc.fhir.gwt.ClaimResponseNote> noteList = _instance_.getNote();
				if (noteList.size() < _index_ + 1) {
					noteList.add(new com.dtc.fhir.gwt.ClaimResponseNote());
				}
				return noteList.get(Math.min(noteList.size() - 1, _index_));
			case "requestOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestOrganization(_field_);
				}
				return _field_;}
			case "requestProvider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestProvider(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "disposition":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisposition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisposition(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "item":
				List<com.dtc.fhir.gwt.ClaimResponseItem> itemList = _instance_.getItem();
				if (itemList.size() < _index_ + 1) {
					itemList.add(new com.dtc.fhir.gwt.ClaimResponseItem());
				}
				return itemList.get(Math.min(itemList.size() - 1, _index_));
			case "unallocDeductable":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getUnallocDeductable();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setUnallocDeductable(_field_);
				}
				return _field_;}
			case "totalBenefit":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getTotalBenefit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setTotalBenefit(_field_);
				}
				return _field_;}
			case "paymentAdjustment":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getPaymentAdjustment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setPaymentAdjustment(_field_);
				}
				return _field_;}
			case "paymentAdjustmentReason":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getPaymentAdjustmentReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setPaymentAdjustmentReason(_field_);
				}
				return _field_;}
			case "paymentDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getPaymentDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setPaymentDate(_field_);
				}
				return _field_;}
			case "paymentAmount":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getPaymentAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setPaymentAmount(_field_);
				}
				return _field_;}
			case "paymentRef":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getPaymentRef();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setPaymentRef(_field_);
				}
				return _field_;}
			case "payeeType":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getPayeeType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setPayeeType(_field_);
				}
				return _field_;}
			case "addItem":
				List<com.dtc.fhir.gwt.ClaimResponseAddItem> addItemList = _instance_.getAddItem();
				if (addItemList.size() < _index_ + 1) {
					addItemList.add(new com.dtc.fhir.gwt.ClaimResponseAddItem());
				}
				return addItemList.get(Math.min(addItemList.size() - 1, _index_));
			case "error":
				List<com.dtc.fhir.gwt.ClaimResponseError> errorList = _instance_.getError();
				if (errorList.size() < _index_ + 1) {
					errorList.add(new com.dtc.fhir.gwt.ClaimResponseError());
				}
				return errorList.get(Math.min(errorList.size() - 1, _index_));
			case "totalCost":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getTotalCost();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setTotalCost(_field_);
				}
				return _field_;}
			case "reserved":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getReserved();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setReserved(_field_);
				}
				return _field_;}
			case "form":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getForm();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setForm(_field_);
				}
				return _field_;}
			case "coverage":
				List<com.dtc.fhir.gwt.ClaimResponseCoverage> coverageList = _instance_.getCoverage();
				if (coverageList.size() < _index_ + 1) {
					coverageList.add(new com.dtc.fhir.gwt.ClaimResponseCoverage());
				}
				return coverageList.get(Math.min(coverageList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponse");
			}
		}
	}
	private static class SetClaimResponseAddItem {
		static void set(com.dtc.fhir.gwt.ClaimResponseAddItem instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseAddItem instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "service":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setService((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "sequenceLinkId":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					List<com.dtc.fhir.gwt.PositiveInt> sequenceLinkIdList = instance.getSequenceLinkId();
					if (sequenceLinkIdList.size() < index + 1) {
						sequenceLinkIdList.add((com.dtc.fhir.gwt.PositiveInt)value);
					} else {
						sequenceLinkIdList.set(Math.min(sequenceLinkIdList.size() - 1, index), (com.dtc.fhir.gwt.PositiveInt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "adjudication":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseAdjudication3 || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseAdjudication3> adjudicationList = instance.getAdjudication();
					if (adjudicationList.size() < index + 1) {
						adjudicationList.add((com.dtc.fhir.gwt.ClaimResponseAdjudication3)value);
					} else {
						adjudicationList.set(Math.min(adjudicationList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseAdjudication3)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "noteNumberLinkId":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					List<com.dtc.fhir.gwt.PositiveInt> noteNumberLinkIdList = instance.getNoteNumberLinkId();
					if (noteNumberLinkIdList.size() < index + 1) {
						noteNumberLinkIdList.add((com.dtc.fhir.gwt.PositiveInt)value);
					} else {
						noteNumberLinkIdList.set(Math.min(noteNumberLinkIdList.size() - 1, index), (com.dtc.fhir.gwt.PositiveInt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseDetail1 || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseDetail1> detailList = instance.getDetail();
					if (detailList.size() < index + 1) {
						detailList.add((com.dtc.fhir.gwt.ClaimResponseDetail1)value);
					} else {
						detailList.set(Math.min(detailList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseDetail1)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "fee":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setFee((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseAddItem");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseAddItem _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "service":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getService();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setService(_field_);
				}
				return _field_;}
			case "sequenceLinkId":
				List<com.dtc.fhir.gwt.PositiveInt> sequenceLinkIdList = _instance_.getSequenceLinkId();
				if (sequenceLinkIdList.size() < _index_ + 1) {
					sequenceLinkIdList.add(new com.dtc.fhir.gwt.PositiveInt());
				}
				return sequenceLinkIdList.get(Math.min(sequenceLinkIdList.size() - 1, _index_));
			case "adjudication":
				List<com.dtc.fhir.gwt.ClaimResponseAdjudication3> adjudicationList = _instance_.getAdjudication();
				if (adjudicationList.size() < _index_ + 1) {
					adjudicationList.add(new com.dtc.fhir.gwt.ClaimResponseAdjudication3());
				}
				return adjudicationList.get(Math.min(adjudicationList.size() - 1, _index_));
			case "noteNumberLinkId":
				List<com.dtc.fhir.gwt.PositiveInt> noteNumberLinkIdList = _instance_.getNoteNumberLinkId();
				if (noteNumberLinkIdList.size() < _index_ + 1) {
					noteNumberLinkIdList.add(new com.dtc.fhir.gwt.PositiveInt());
				}
				return noteNumberLinkIdList.get(Math.min(noteNumberLinkIdList.size() - 1, _index_));
			case "detail":
				List<com.dtc.fhir.gwt.ClaimResponseDetail1> detailList = _instance_.getDetail();
				if (detailList.size() < _index_ + 1) {
					detailList.add(new com.dtc.fhir.gwt.ClaimResponseDetail1());
				}
				return detailList.get(Math.min(detailList.size() - 1, _index_));
			case "fee":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getFee();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setFee(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseAddItem");
			}
		}
	}
	private static class SetClaimResponseAdjudication {
		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "amount":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setAmount((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseAdjudication");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseAdjudication _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "amount":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setAmount(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseAdjudication");
			}
		}
	}
	private static class SetClaimResponseAdjudication1 {
		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication1 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication1 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "amount":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setAmount((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseAdjudication1");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseAdjudication1 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "amount":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setAmount(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseAdjudication1");
			}
		}
	}
	private static class SetClaimResponseAdjudication2 {
		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication2 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication2 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "amount":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setAmount((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseAdjudication2");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseAdjudication2 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "amount":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setAmount(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseAdjudication2");
			}
		}
	}
	private static class SetClaimResponseAdjudication3 {
		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication3 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication3 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "amount":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setAmount((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseAdjudication3");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseAdjudication3 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "amount":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setAmount(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseAdjudication3");
			}
		}
	}
	private static class SetClaimResponseAdjudication4 {
		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication4 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseAdjudication4 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "amount":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setAmount((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseAdjudication4");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseAdjudication4 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "amount":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setAmount(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseAdjudication4");
			}
		}
	}
	private static class SetClaimResponseCoverage {
		static void set(com.dtc.fhir.gwt.ClaimResponseCoverage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseCoverage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "sequence":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequence((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "relationship":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRelationship((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "focal":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setFocal((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "businessArrangement":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setBusinessArrangement((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "preAuthRef":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> preAuthRefList = instance.getPreAuthRef();
					if (preAuthRefList.size() < index + 1) {
						preAuthRefList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						preAuthRefList.set(Math.min(preAuthRefList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "claimResponse":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setClaimResponse((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "coverage":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setCoverage((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseCoverage");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseCoverage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "sequence":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequence(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "relationship":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRelationship();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRelationship(_field_);
				}
				return _field_;}
			case "focal":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getFocal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setFocal(_field_);
				}
				return _field_;}
			case "businessArrangement":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getBusinessArrangement();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setBusinessArrangement(_field_);
				}
				return _field_;}
			case "preAuthRef":
				List<com.dtc.fhir.gwt.StringDt> preAuthRefList = _instance_.getPreAuthRef();
				if (preAuthRefList.size() < _index_ + 1) {
					preAuthRefList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return preAuthRefList.get(Math.min(preAuthRefList.size() - 1, _index_));
			case "claimResponse":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getClaimResponse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setClaimResponse(_field_);
				}
				return _field_;}
			case "coverage":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getCoverage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setCoverage(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseCoverage");
			}
		}
	}
	private static class SetClaimResponseDetail {
		static void set(com.dtc.fhir.gwt.ClaimResponseDetail instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseDetail instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "subDetail":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseSubDetail || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseSubDetail> subDetailList = instance.getSubDetail();
					if (subDetailList.size() < index + 1) {
						subDetailList.add((com.dtc.fhir.gwt.ClaimResponseSubDetail)value);
					} else {
						subDetailList.set(Math.min(subDetailList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseSubDetail)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "sequenceLinkId":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequenceLinkId((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "adjudication":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseAdjudication1 || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseAdjudication1> adjudicationList = instance.getAdjudication();
					if (adjudicationList.size() < index + 1) {
						adjudicationList.add((com.dtc.fhir.gwt.ClaimResponseAdjudication1)value);
					} else {
						adjudicationList.set(Math.min(adjudicationList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseAdjudication1)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseDetail");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseDetail _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "subDetail":
				List<com.dtc.fhir.gwt.ClaimResponseSubDetail> subDetailList = _instance_.getSubDetail();
				if (subDetailList.size() < _index_ + 1) {
					subDetailList.add(new com.dtc.fhir.gwt.ClaimResponseSubDetail());
				}
				return subDetailList.get(Math.min(subDetailList.size() - 1, _index_));
			case "sequenceLinkId":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequenceLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequenceLinkId(_field_);
				}
				return _field_;}
			case "adjudication":
				List<com.dtc.fhir.gwt.ClaimResponseAdjudication1> adjudicationList = _instance_.getAdjudication();
				if (adjudicationList.size() < _index_ + 1) {
					adjudicationList.add(new com.dtc.fhir.gwt.ClaimResponseAdjudication1());
				}
				return adjudicationList.get(Math.min(adjudicationList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseDetail");
			}
		}
	}
	private static class SetClaimResponseDetail1 {
		static void set(com.dtc.fhir.gwt.ClaimResponseDetail1 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseDetail1 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "service":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setService((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "adjudication":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseAdjudication4 || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseAdjudication4> adjudicationList = instance.getAdjudication();
					if (adjudicationList.size() < index + 1) {
						adjudicationList.add((com.dtc.fhir.gwt.ClaimResponseAdjudication4)value);
					} else {
						adjudicationList.set(Math.min(adjudicationList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseAdjudication4)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "fee":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setFee((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseDetail1");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseDetail1 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "service":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getService();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setService(_field_);
				}
				return _field_;}
			case "adjudication":
				List<com.dtc.fhir.gwt.ClaimResponseAdjudication4> adjudicationList = _instance_.getAdjudication();
				if (adjudicationList.size() < _index_ + 1) {
					adjudicationList.add(new com.dtc.fhir.gwt.ClaimResponseAdjudication4());
				}
				return adjudicationList.get(Math.min(adjudicationList.size() - 1, _index_));
			case "fee":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getFee();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setFee(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseDetail1");
			}
		}
	}
	private static class SetClaimResponseError {
		static void set(com.dtc.fhir.gwt.ClaimResponseError instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseError instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "sequenceLinkId":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequenceLinkId((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "detailSequenceLinkId":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setDetailSequenceLinkId((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "subdetailSequenceLinkId":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSubdetailSequenceLinkId((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseError");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseError _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "sequenceLinkId":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequenceLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequenceLinkId(_field_);
				}
				return _field_;}
			case "detailSequenceLinkId":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getDetailSequenceLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setDetailSequenceLinkId(_field_);
				}
				return _field_;}
			case "subdetailSequenceLinkId":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSubdetailSequenceLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSubdetailSequenceLinkId(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseError");
			}
		}
	}
	private static class SetClaimResponseItem {
		static void set(com.dtc.fhir.gwt.ClaimResponseItem instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseItem instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "sequenceLinkId":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequenceLinkId((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "adjudication":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseAdjudication || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseAdjudication> adjudicationList = instance.getAdjudication();
					if (adjudicationList.size() < index + 1) {
						adjudicationList.add((com.dtc.fhir.gwt.ClaimResponseAdjudication)value);
					} else {
						adjudicationList.set(Math.min(adjudicationList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseAdjudication)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "noteNumber":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					List<com.dtc.fhir.gwt.PositiveInt> noteNumberList = instance.getNoteNumber();
					if (noteNumberList.size() < index + 1) {
						noteNumberList.add((com.dtc.fhir.gwt.PositiveInt)value);
					} else {
						noteNumberList.set(Math.min(noteNumberList.size() - 1, index), (com.dtc.fhir.gwt.PositiveInt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseDetail || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseDetail> detailList = instance.getDetail();
					if (detailList.size() < index + 1) {
						detailList.add((com.dtc.fhir.gwt.ClaimResponseDetail)value);
					} else {
						detailList.set(Math.min(detailList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseDetail)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseItem");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseItem _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "sequenceLinkId":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequenceLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequenceLinkId(_field_);
				}
				return _field_;}
			case "adjudication":
				List<com.dtc.fhir.gwt.ClaimResponseAdjudication> adjudicationList = _instance_.getAdjudication();
				if (adjudicationList.size() < _index_ + 1) {
					adjudicationList.add(new com.dtc.fhir.gwt.ClaimResponseAdjudication());
				}
				return adjudicationList.get(Math.min(adjudicationList.size() - 1, _index_));
			case "noteNumber":
				List<com.dtc.fhir.gwt.PositiveInt> noteNumberList = _instance_.getNoteNumber();
				if (noteNumberList.size() < _index_ + 1) {
					noteNumberList.add(new com.dtc.fhir.gwt.PositiveInt());
				}
				return noteNumberList.get(Math.min(noteNumberList.size() - 1, _index_));
			case "detail":
				List<com.dtc.fhir.gwt.ClaimResponseDetail> detailList = _instance_.getDetail();
				if (detailList.size() < _index_ + 1) {
					detailList.add(new com.dtc.fhir.gwt.ClaimResponseDetail());
				}
				return detailList.get(Math.min(detailList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseItem");
			}
		}
	}
	private static class SetClaimResponseNote {
		static void set(com.dtc.fhir.gwt.ClaimResponseNote instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseNote instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "number":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setNumber((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseNote");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseNote _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "number":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getNumber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setNumber(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseNote");
			}
		}
	}
	private static class SetClaimResponseSubDetail {
		static void set(com.dtc.fhir.gwt.ClaimResponseSubDetail instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimResponseSubDetail instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "sequenceLinkId":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequenceLinkId((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "adjudication":
				if (value instanceof com.dtc.fhir.gwt.ClaimResponseAdjudication2 || value == null) {
					List<com.dtc.fhir.gwt.ClaimResponseAdjudication2> adjudicationList = instance.getAdjudication();
					if (adjudicationList.size() < index + 1) {
						adjudicationList.add((com.dtc.fhir.gwt.ClaimResponseAdjudication2)value);
					} else {
						adjudicationList.set(Math.min(adjudicationList.size() - 1, index), (com.dtc.fhir.gwt.ClaimResponseAdjudication2)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimResponseSubDetail");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimResponseSubDetail _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "sequenceLinkId":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequenceLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequenceLinkId(_field_);
				}
				return _field_;}
			case "adjudication":
				List<com.dtc.fhir.gwt.ClaimResponseAdjudication2> adjudicationList = _instance_.getAdjudication();
				if (adjudicationList.size() < _index_ + 1) {
					adjudicationList.add(new com.dtc.fhir.gwt.ClaimResponseAdjudication2());
				}
				return adjudicationList.get(Math.min(adjudicationList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimResponseSubDetail");
			}
		}
	}
	private static class SetClaimSubDetail {
		static void set(com.dtc.fhir.gwt.ClaimSubDetail instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimSubDetail instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "sequence":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequence((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "unitPrice":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setUnitPrice((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "factor":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setFactor((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "points":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPoints((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "net":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setNet((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "service":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setService((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "udi":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setUdi((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimSubDetail");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimSubDetail _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "sequence":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequence(_field_);
				}
				return _field_;}
			case "unitPrice":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getUnitPrice();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setUnitPrice(_field_);
				}
				return _field_;}
			case "factor":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getFactor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setFactor(_field_);
				}
				return _field_;}
			case "points":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPoints();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPoints(_field_);
				}
				return _field_;}
			case "net":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getNet();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setNet(_field_);
				}
				return _field_;}
			case "service":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getService();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setService(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "udi":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getUdi();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setUdi(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimSubDetail");
			}
		}
	}
	private static class SetClaimType {
		static void set(com.dtc.fhir.gwt.ClaimType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClaimType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ClaimTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ClaimTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ClaimTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClaimType");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClaimType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ClaimTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClaimType");
			}
		}
	}
	private static class SetClinicalImpression {
		static void set(com.dtc.fhir.gwt.ClinicalImpression instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClinicalImpression instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "protocol":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setProtocol((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "action":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> actionList = instance.getAction();
					if (actionList.size() < index + 1) {
						actionList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						actionList.set(Math.min(actionList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.ClinicalImpressionStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.ClinicalImpressionStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ClinicalImpressionStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "plan":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> planList = instance.getPlan();
					if (planList.size() < index + 1) {
						planList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						planList.set(Math.min(planList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "triggerCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setTriggerCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "triggerReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTriggerReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "investigations":
				if (value instanceof com.dtc.fhir.gwt.ClinicalImpressionInvestigations || value == null) {
					List<com.dtc.fhir.gwt.ClinicalImpressionInvestigations> investigationsList = instance.getInvestigations();
					if (investigationsList.size() < index + 1) {
						investigationsList.add((com.dtc.fhir.gwt.ClinicalImpressionInvestigations)value);
					} else {
						investigationsList.set(Math.min(investigationsList.size() - 1, index), (com.dtc.fhir.gwt.ClinicalImpressionInvestigations)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "assessor":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAssessor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "previous":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPrevious((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "problem":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> problemList = instance.getProblem();
					if (problemList.size() < index + 1) {
						problemList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						problemList.set(Math.min(problemList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "summary":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setSummary((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "finding":
				if (value instanceof com.dtc.fhir.gwt.ClinicalImpressionFinding || value == null) {
					List<com.dtc.fhir.gwt.ClinicalImpressionFinding> findingList = instance.getFinding();
					if (findingList.size() < index + 1) {
						findingList.add((com.dtc.fhir.gwt.ClinicalImpressionFinding)value);
					} else {
						findingList.set(Math.min(findingList.size() - 1, index), (com.dtc.fhir.gwt.ClinicalImpressionFinding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "resolved":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> resolvedList = instance.getResolved();
					if (resolvedList.size() < index + 1) {
						resolvedList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						resolvedList.set(Math.min(resolvedList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "ruledOut":
				if (value instanceof com.dtc.fhir.gwt.ClinicalImpressionRuledOut || value == null) {
					List<com.dtc.fhir.gwt.ClinicalImpressionRuledOut> ruledOutList = instance.getRuledOut();
					if (ruledOutList.size() < index + 1) {
						ruledOutList.add((com.dtc.fhir.gwt.ClinicalImpressionRuledOut)value);
					} else {
						ruledOutList.set(Math.min(ruledOutList.size() - 1, index), (com.dtc.fhir.gwt.ClinicalImpressionRuledOut)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "prognosis":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPrognosis((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClinicalImpression");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClinicalImpression _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "protocol":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getProtocol();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setProtocol(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "action":
				List<com.dtc.fhir.gwt.Reference> actionList = _instance_.getAction();
				if (actionList.size() < _index_ + 1) {
					actionList.add(new com.dtc.fhir.gwt.Reference());
				}
				return actionList.get(Math.min(actionList.size() - 1, _index_));
			case "status":
				{com.dtc.fhir.gwt.ClinicalImpressionStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ClinicalImpressionStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "plan":
				List<com.dtc.fhir.gwt.Reference> planList = _instance_.getPlan();
				if (planList.size() < _index_ + 1) {
					planList.add(new com.dtc.fhir.gwt.Reference());
				}
				return planList.get(Math.min(planList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "triggerCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getTriggerCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setTriggerCodeableConcept(_field_);
				}
				return _field_;}
			case "triggerReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTriggerReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTriggerReference(_field_);
				}
				return _field_;}
			case "investigations":
				List<com.dtc.fhir.gwt.ClinicalImpressionInvestigations> investigationsList = _instance_.getInvestigations();
				if (investigationsList.size() < _index_ + 1) {
					investigationsList.add(new com.dtc.fhir.gwt.ClinicalImpressionInvestigations());
				}
				return investigationsList.get(Math.min(investigationsList.size() - 1, _index_));
			case "assessor":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAssessor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAssessor(_field_);
				}
				return _field_;}
			case "previous":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPrevious();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPrevious(_field_);
				}
				return _field_;}
			case "problem":
				List<com.dtc.fhir.gwt.Reference> problemList = _instance_.getProblem();
				if (problemList.size() < _index_ + 1) {
					problemList.add(new com.dtc.fhir.gwt.Reference());
				}
				return problemList.get(Math.min(problemList.size() - 1, _index_));
			case "summary":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getSummary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setSummary(_field_);
				}
				return _field_;}
			case "finding":
				List<com.dtc.fhir.gwt.ClinicalImpressionFinding> findingList = _instance_.getFinding();
				if (findingList.size() < _index_ + 1) {
					findingList.add(new com.dtc.fhir.gwt.ClinicalImpressionFinding());
				}
				return findingList.get(Math.min(findingList.size() - 1, _index_));
			case "resolved":
				List<com.dtc.fhir.gwt.CodeableConcept> resolvedList = _instance_.getResolved();
				if (resolvedList.size() < _index_ + 1) {
					resolvedList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return resolvedList.get(Math.min(resolvedList.size() - 1, _index_));
			case "ruledOut":
				List<com.dtc.fhir.gwt.ClinicalImpressionRuledOut> ruledOutList = _instance_.getRuledOut();
				if (ruledOutList.size() < _index_ + 1) {
					ruledOutList.add(new com.dtc.fhir.gwt.ClinicalImpressionRuledOut());
				}
				return ruledOutList.get(Math.min(ruledOutList.size() - 1, _index_));
			case "prognosis":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPrognosis();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPrognosis(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClinicalImpression");
			}
		}
	}
	private static class SetClinicalImpressionFinding {
		static void set(com.dtc.fhir.gwt.ClinicalImpressionFinding instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClinicalImpressionFinding instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "cause":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCause((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "item":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setItem((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClinicalImpressionFinding");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClinicalImpressionFinding _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "cause":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCause();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCause(_field_);
				}
				return _field_;}
			case "item":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getItem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setItem(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClinicalImpressionFinding");
			}
		}
	}
	private static class SetClinicalImpressionInvestigations {
		static void set(com.dtc.fhir.gwt.ClinicalImpressionInvestigations instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClinicalImpressionInvestigations instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "item":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> itemList = instance.getItem();
					if (itemList.size() < index + 1) {
						itemList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						itemList.set(Math.min(itemList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClinicalImpressionInvestigations");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClinicalImpressionInvestigations _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "item":
				List<com.dtc.fhir.gwt.Reference> itemList = _instance_.getItem();
				if (itemList.size() < _index_ + 1) {
					itemList.add(new com.dtc.fhir.gwt.Reference());
				}
				return itemList.get(Math.min(itemList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClinicalImpressionInvestigations");
			}
		}
	}
	private static class SetClinicalImpressionRuledOut {
		static void set(com.dtc.fhir.gwt.ClinicalImpressionRuledOut instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClinicalImpressionRuledOut instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setReason((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "item":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setItem((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClinicalImpressionRuledOut");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClinicalImpressionRuledOut _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "reason":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setReason(_field_);
				}
				return _field_;}
			case "item":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getItem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setItem(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClinicalImpressionRuledOut");
			}
		}
	}
	private static class SetClinicalImpressionStatus {
		static void set(com.dtc.fhir.gwt.ClinicalImpressionStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ClinicalImpressionStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ClinicalImpressionStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ClinicalImpressionStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ClinicalImpressionStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ClinicalImpressionStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ClinicalImpressionStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ClinicalImpressionStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ClinicalImpressionStatus");
			}
		}
	}
	private static class SetCode {
		static void set(com.dtc.fhir.gwt.Code instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Code instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Code");
			}
		}

		static Object get(com.dtc.fhir.gwt.Code _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Code");
			}
		}
	}
	private static class SetCodeableConcept {
		static void set(com.dtc.fhir.gwt.CodeableConcept instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CodeableConcept instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "coding":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> codingList = instance.getCoding();
					if (codingList.size() < index + 1) {
						codingList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						codingList.set(Math.min(codingList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CodeableConcept");
			}
		}

		static Object get(com.dtc.fhir.gwt.CodeableConcept _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "coding":
				List<com.dtc.fhir.gwt.Coding> codingList = _instance_.getCoding();
				if (codingList.size() < _index_ + 1) {
					codingList.add(new com.dtc.fhir.gwt.Coding());
				}
				return codingList.get(Math.min(codingList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CodeableConcept");
			}
		}
	}
	private static class SetCoding {
		static void set(com.dtc.fhir.gwt.Coding instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Coding instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "userSelected":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setUserSelected((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "display":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisplay((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Coding");
			}
		}

		static Object get(com.dtc.fhir.gwt.Coding _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "userSelected":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getUserSelected();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setUserSelected(_field_);
				}
				return _field_;}
			case "display":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisplay();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisplay(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Coding");
			}
		}
	}
	private static class SetCommunication {
		static void set(com.dtc.fhir.gwt.Communication instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Communication instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonList = instance.getReason();
					if (reasonList.size() < index + 1) {
						reasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonList.set(Math.min(reasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.CommunicationStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.CommunicationStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CommunicationStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "requestDetail":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestDetail((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "sender":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSender((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "recipient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> recipientList = instance.getRecipient();
					if (recipientList.size() < index + 1) {
						recipientList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						recipientList.set(Math.min(recipientList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "payload":
				if (value instanceof com.dtc.fhir.gwt.CommunicationPayload || value == null) {
					List<com.dtc.fhir.gwt.CommunicationPayload> payloadList = instance.getPayload();
					if (payloadList.size() < index + 1) {
						payloadList.add((com.dtc.fhir.gwt.CommunicationPayload)value);
					} else {
						payloadList.set(Math.min(payloadList.size() - 1, index), (com.dtc.fhir.gwt.CommunicationPayload)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "medium":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> mediumList = instance.getMedium();
					if (mediumList.size() < index + 1) {
						mediumList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						mediumList.set(Math.min(mediumList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "sent":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setSent((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "received":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setReceived((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Communication");
			}
		}

		static Object get(com.dtc.fhir.gwt.Communication _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "reason":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonList = _instance_.getReason();
				if (reasonList.size() < _index_ + 1) {
					reasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonList.get(Math.min(reasonList.size() - 1, _index_));
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.CommunicationStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CommunicationStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "requestDetail":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestDetail();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestDetail(_field_);
				}
				return _field_;}
			case "sender":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSender();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSender(_field_);
				}
				return _field_;}
			case "recipient":
				List<com.dtc.fhir.gwt.Reference> recipientList = _instance_.getRecipient();
				if (recipientList.size() < _index_ + 1) {
					recipientList.add(new com.dtc.fhir.gwt.Reference());
				}
				return recipientList.get(Math.min(recipientList.size() - 1, _index_));
			case "payload":
				List<com.dtc.fhir.gwt.CommunicationPayload> payloadList = _instance_.getPayload();
				if (payloadList.size() < _index_ + 1) {
					payloadList.add(new com.dtc.fhir.gwt.CommunicationPayload());
				}
				return payloadList.get(Math.min(payloadList.size() - 1, _index_));
			case "medium":
				List<com.dtc.fhir.gwt.CodeableConcept> mediumList = _instance_.getMedium();
				if (mediumList.size() < _index_ + 1) {
					mediumList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return mediumList.get(Math.min(mediumList.size() - 1, _index_));
			case "sent":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getSent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setSent(_field_);
				}
				return _field_;}
			case "received":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getReceived();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setReceived(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Communication");
			}
		}
	}
	private static class SetCommunicationPayload {
		static void set(com.dtc.fhir.gwt.CommunicationPayload instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CommunicationPayload instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "contentString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setContentString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contentAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setContentAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "contentReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setContentReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CommunicationPayload");
			}
		}

		static Object get(com.dtc.fhir.gwt.CommunicationPayload _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "contentString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getContentString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setContentString(_field_);
				}
				return _field_;}
			case "contentAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getContentAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setContentAttachment(_field_);
				}
				return _field_;}
			case "contentReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getContentReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setContentReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CommunicationPayload");
			}
		}
	}
	private static class SetCommunicationRequest {
		static void set(com.dtc.fhir.gwt.CommunicationRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CommunicationRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "priority":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setPriority((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonList = instance.getReason();
					if (reasonList.size() < index + 1) {
						reasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonList.set(Math.min(reasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.CommunicationRequestStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.CommunicationRequestStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CommunicationRequestStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "scheduledDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setScheduledDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "scheduledPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setScheduledPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "requestedOn":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setRequestedOn((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "sender":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSender((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "recipient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> recipientList = instance.getRecipient();
					if (recipientList.size() < index + 1) {
						recipientList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						recipientList.set(Math.min(recipientList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "payload":
				if (value instanceof com.dtc.fhir.gwt.CommunicationRequestPayload || value == null) {
					List<com.dtc.fhir.gwt.CommunicationRequestPayload> payloadList = instance.getPayload();
					if (payloadList.size() < index + 1) {
						payloadList.add((com.dtc.fhir.gwt.CommunicationRequestPayload)value);
					} else {
						payloadList.set(Math.min(payloadList.size() - 1, index), (com.dtc.fhir.gwt.CommunicationRequestPayload)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "medium":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> mediumList = instance.getMedium();
					if (mediumList.size() < index + 1) {
						mediumList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						mediumList.set(Math.min(mediumList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "requester":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequester((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CommunicationRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.CommunicationRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "priority":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getPriority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setPriority(_field_);
				}
				return _field_;}
			case "reason":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonList = _instance_.getReason();
				if (reasonList.size() < _index_ + 1) {
					reasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonList.get(Math.min(reasonList.size() - 1, _index_));
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.CommunicationRequestStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CommunicationRequestStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "scheduledDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getScheduledDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setScheduledDateTime(_field_);
				}
				return _field_;}
			case "scheduledPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getScheduledPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setScheduledPeriod(_field_);
				}
				return _field_;}
			case "requestedOn":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getRequestedOn();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setRequestedOn(_field_);
				}
				return _field_;}
			case "sender":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSender();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSender(_field_);
				}
				return _field_;}
			case "recipient":
				List<com.dtc.fhir.gwt.Reference> recipientList = _instance_.getRecipient();
				if (recipientList.size() < _index_ + 1) {
					recipientList.add(new com.dtc.fhir.gwt.Reference());
				}
				return recipientList.get(Math.min(recipientList.size() - 1, _index_));
			case "payload":
				List<com.dtc.fhir.gwt.CommunicationRequestPayload> payloadList = _instance_.getPayload();
				if (payloadList.size() < _index_ + 1) {
					payloadList.add(new com.dtc.fhir.gwt.CommunicationRequestPayload());
				}
				return payloadList.get(Math.min(payloadList.size() - 1, _index_));
			case "medium":
				List<com.dtc.fhir.gwt.CodeableConcept> mediumList = _instance_.getMedium();
				if (mediumList.size() < _index_ + 1) {
					mediumList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return mediumList.get(Math.min(mediumList.size() - 1, _index_));
			case "requester":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequester();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequester(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CommunicationRequest");
			}
		}
	}
	private static class SetCommunicationRequestPayload {
		static void set(com.dtc.fhir.gwt.CommunicationRequestPayload instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CommunicationRequestPayload instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "contentString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setContentString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contentAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setContentAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "contentReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setContentReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CommunicationRequestPayload");
			}
		}

		static Object get(com.dtc.fhir.gwt.CommunicationRequestPayload _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "contentString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getContentString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setContentString(_field_);
				}
				return _field_;}
			case "contentAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getContentAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setContentAttachment(_field_);
				}
				return _field_;}
			case "contentReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getContentReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setContentReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CommunicationRequestPayload");
			}
		}
	}
	private static class SetCommunicationRequestStatus {
		static void set(com.dtc.fhir.gwt.CommunicationRequestStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CommunicationRequestStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.CommunicationRequestStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.CommunicationRequestStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CommunicationRequestStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CommunicationRequestStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.CommunicationRequestStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.CommunicationRequestStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CommunicationRequestStatus");
			}
		}
	}
	private static class SetCommunicationStatus {
		static void set(com.dtc.fhir.gwt.CommunicationStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CommunicationStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.CommunicationStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.CommunicationStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CommunicationStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CommunicationStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.CommunicationStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.CommunicationStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CommunicationStatus");
			}
		}
	}
	private static class SetComposition {
		static void set(com.dtc.fhir.gwt.Composition instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Composition instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.CompositionStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.CompositionStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CompositionStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "confidentiality":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setConfidentiality((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "event":
				if (value instanceof com.dtc.fhir.gwt.CompositionEvent || value == null) {
					List<com.dtc.fhir.gwt.CompositionEvent> eventList = instance.getEvent();
					if (eventList.size() < index + 1) {
						eventList.add((com.dtc.fhir.gwt.CompositionEvent)value);
					} else {
						eventList.set(Math.min(eventList.size() - 1, index), (com.dtc.fhir.gwt.CompositionEvent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> authorList = instance.getAuthor();
					if (authorList.size() < index + 1) {
						authorList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						authorList.set(Math.min(authorList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "title":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setTitle((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "clazz":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setClazz((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "custodian":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setCustodian((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "attester":
				if (value instanceof com.dtc.fhir.gwt.CompositionAttester || value == null) {
					List<com.dtc.fhir.gwt.CompositionAttester> attesterList = instance.getAttester();
					if (attesterList.size() < index + 1) {
						attesterList.add((com.dtc.fhir.gwt.CompositionAttester)value);
					} else {
						attesterList.set(Math.min(attesterList.size() - 1, index), (com.dtc.fhir.gwt.CompositionAttester)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "section":
				if (value instanceof com.dtc.fhir.gwt.CompositionSection || value == null) {
					List<com.dtc.fhir.gwt.CompositionSection> sectionList = instance.getSection();
					if (sectionList.size() < index + 1) {
						sectionList.add((com.dtc.fhir.gwt.CompositionSection)value);
					} else {
						sectionList.set(Math.min(sectionList.size() - 1, index), (com.dtc.fhir.gwt.CompositionSection)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Composition");
			}
		}

		static Object get(com.dtc.fhir.gwt.Composition _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.CompositionStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CompositionStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "confidentiality":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getConfidentiality();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setConfidentiality(_field_);
				}
				return _field_;}
			case "event":
				List<com.dtc.fhir.gwt.CompositionEvent> eventList = _instance_.getEvent();
				if (eventList.size() < _index_ + 1) {
					eventList.add(new com.dtc.fhir.gwt.CompositionEvent());
				}
				return eventList.get(Math.min(eventList.size() - 1, _index_));
			case "author":
				List<com.dtc.fhir.gwt.Reference> authorList = _instance_.getAuthor();
				if (authorList.size() < _index_ + 1) {
					authorList.add(new com.dtc.fhir.gwt.Reference());
				}
				return authorList.get(Math.min(authorList.size() - 1, _index_));
			case "title":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getTitle();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setTitle(_field_);
				}
				return _field_;}
			case "clazz":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getClazz();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setClazz(_field_);
				}
				return _field_;}
			case "custodian":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getCustodian();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setCustodian(_field_);
				}
				return _field_;}
			case "attester":
				List<com.dtc.fhir.gwt.CompositionAttester> attesterList = _instance_.getAttester();
				if (attesterList.size() < _index_ + 1) {
					attesterList.add(new com.dtc.fhir.gwt.CompositionAttester());
				}
				return attesterList.get(Math.min(attesterList.size() - 1, _index_));
			case "section":
				List<com.dtc.fhir.gwt.CompositionSection> sectionList = _instance_.getSection();
				if (sectionList.size() < _index_ + 1) {
					sectionList.add(new com.dtc.fhir.gwt.CompositionSection());
				}
				return sectionList.get(Math.min(sectionList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Composition");
			}
		}
	}
	private static class SetCompositionAttestationMode {
		static void set(com.dtc.fhir.gwt.CompositionAttestationMode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CompositionAttestationMode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.CompositionAttestationModeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.CompositionAttestationModeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CompositionAttestationModeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CompositionAttestationMode");
			}
		}

		static Object get(com.dtc.fhir.gwt.CompositionAttestationMode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.CompositionAttestationModeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CompositionAttestationMode");
			}
		}
	}
	private static class SetCompositionAttester {
		static void set(com.dtc.fhir.gwt.CompositionAttester instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CompositionAttester instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "time":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "party":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setParty((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "mode":
				if (value instanceof com.dtc.fhir.gwt.CompositionAttestationMode || value == null) {
					List<com.dtc.fhir.gwt.CompositionAttestationMode> modeList = instance.getMode();
					if (modeList.size() < index + 1) {
						modeList.add((com.dtc.fhir.gwt.CompositionAttestationMode)value);
					} else {
						modeList.set(Math.min(modeList.size() - 1, index), (com.dtc.fhir.gwt.CompositionAttestationMode)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CompositionAttester");
			}
		}

		static Object get(com.dtc.fhir.gwt.CompositionAttester _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "time":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setTime(_field_);
				}
				return _field_;}
			case "party":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getParty();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setParty(_field_);
				}
				return _field_;}
			case "mode":
				List<com.dtc.fhir.gwt.CompositionAttestationMode> modeList = _instance_.getMode();
				if (modeList.size() < _index_ + 1) {
					modeList.add(new com.dtc.fhir.gwt.CompositionAttestationMode());
				}
				return modeList.get(Math.min(modeList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CompositionAttester");
			}
		}
	}
	private static class SetCompositionEvent {
		static void set(com.dtc.fhir.gwt.CompositionEvent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CompositionEvent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> codeList = instance.getCode();
					if (codeList.size() < index + 1) {
						codeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						codeList.set(Math.min(codeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> detailList = instance.getDetail();
					if (detailList.size() < index + 1) {
						detailList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						detailList.set(Math.min(detailList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CompositionEvent");
			}
		}

		static Object get(com.dtc.fhir.gwt.CompositionEvent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "code":
				List<com.dtc.fhir.gwt.CodeableConcept> codeList = _instance_.getCode();
				if (codeList.size() < _index_ + 1) {
					codeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return codeList.get(Math.min(codeList.size() - 1, _index_));
			case "detail":
				List<com.dtc.fhir.gwt.Reference> detailList = _instance_.getDetail();
				if (detailList.size() < _index_ + 1) {
					detailList.add(new com.dtc.fhir.gwt.Reference());
				}
				return detailList.get(Math.min(detailList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CompositionEvent");
			}
		}
	}
	private static class SetCompositionSection {
		static void set(com.dtc.fhir.gwt.CompositionSection instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CompositionSection instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "entry":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> entryList = instance.getEntry();
					if (entryList.size() < index + 1) {
						entryList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						entryList.set(Math.min(entryList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "emptyReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setEmptyReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "title":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setTitle((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "orderedBy":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setOrderedBy((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "mode":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setMode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "section":
				if (value instanceof com.dtc.fhir.gwt.CompositionSection || value == null) {
					List<com.dtc.fhir.gwt.CompositionSection> sectionList = instance.getSection();
					if (sectionList.size() < index + 1) {
						sectionList.add((com.dtc.fhir.gwt.CompositionSection)value);
					} else {
						sectionList.set(Math.min(sectionList.size() - 1, index), (com.dtc.fhir.gwt.CompositionSection)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CompositionSection");
			}
		}

		static Object get(com.dtc.fhir.gwt.CompositionSection _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "entry":
				List<com.dtc.fhir.gwt.Reference> entryList = _instance_.getEntry();
				if (entryList.size() < _index_ + 1) {
					entryList.add(new com.dtc.fhir.gwt.Reference());
				}
				return entryList.get(Math.min(entryList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "emptyReason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getEmptyReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setEmptyReason(_field_);
				}
				return _field_;}
			case "title":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getTitle();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setTitle(_field_);
				}
				return _field_;}
			case "orderedBy":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getOrderedBy();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setOrderedBy(_field_);
				}
				return _field_;}
			case "mode":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getMode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setMode(_field_);
				}
				return _field_;}
			case "section":
				List<com.dtc.fhir.gwt.CompositionSection> sectionList = _instance_.getSection();
				if (sectionList.size() < _index_ + 1) {
					sectionList.add(new com.dtc.fhir.gwt.CompositionSection());
				}
				return sectionList.get(Math.min(sectionList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CompositionSection");
			}
		}
	}
	private static class SetCompositionStatus {
		static void set(com.dtc.fhir.gwt.CompositionStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.CompositionStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.CompositionStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.CompositionStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CompositionStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of CompositionStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.CompositionStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.CompositionStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of CompositionStatus");
			}
		}
	}
	private static class SetConceptMap {
		static void set(com.dtc.fhir.gwt.ConceptMap instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConceptMap instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.ConceptMapContact || value == null) {
					List<com.dtc.fhir.gwt.ConceptMapContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.ConceptMapContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.ConceptMapContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "copyright":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCopyright((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "sourceUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSourceUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "targetUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setTargetUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "element":
				if (value instanceof com.dtc.fhir.gwt.ConceptMapElement || value == null) {
					List<com.dtc.fhir.gwt.ConceptMapElement> elementList = instance.getElement();
					if (elementList.size() < index + 1) {
						elementList.add((com.dtc.fhir.gwt.ConceptMapElement)value);
					} else {
						elementList.set(Math.min(elementList.size() - 1, index), (com.dtc.fhir.gwt.ConceptMapElement)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "experimental":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExperimental((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "useContext":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> useContextList = instance.getUseContext();
					if (useContextList.size() < index + 1) {
						useContextList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						useContextList.set(Math.min(useContextList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "requirements":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRequirements((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "sourceReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSourceReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "targetReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTargetReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConceptMap");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConceptMap _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.ConceptMapContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.ConceptMapContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "copyright":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCopyright();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCopyright(_field_);
				}
				return _field_;}
			case "sourceUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSourceUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSourceUri(_field_);
				}
				return _field_;}
			case "targetUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getTargetUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setTargetUri(_field_);
				}
				return _field_;}
			case "element":
				List<com.dtc.fhir.gwt.ConceptMapElement> elementList = _instance_.getElement();
				if (elementList.size() < _index_ + 1) {
					elementList.add(new com.dtc.fhir.gwt.ConceptMapElement());
				}
				return elementList.get(Math.min(elementList.size() - 1, _index_));
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "experimental":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExperimental();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExperimental(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "useContext":
				List<com.dtc.fhir.gwt.CodeableConcept> useContextList = _instance_.getUseContext();
				if (useContextList.size() < _index_ + 1) {
					useContextList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return useContextList.get(Math.min(useContextList.size() - 1, _index_));
			case "requirements":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRequirements();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRequirements(_field_);
				}
				return _field_;}
			case "sourceReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSourceReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSourceReference(_field_);
				}
				return _field_;}
			case "targetReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTargetReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTargetReference(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConceptMap");
			}
		}
	}
	private static class SetConceptMapContact {
		static void set(com.dtc.fhir.gwt.ConceptMapContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConceptMapContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConceptMapContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConceptMapContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConceptMapContact");
			}
		}
	}
	private static class SetConceptMapDependsOn {
		static void set(com.dtc.fhir.gwt.ConceptMapDependsOn instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConceptMapDependsOn instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "element":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setElement((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCode((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "codeSystem":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setCodeSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConceptMapDependsOn");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConceptMapDependsOn _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "element":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getElement();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setElement(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "codeSystem":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getCodeSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setCodeSystem(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConceptMapDependsOn");
			}
		}
	}
	private static class SetConceptMapElement {
		static void set(com.dtc.fhir.gwt.ConceptMapElement instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConceptMapElement instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "target":
				if (value instanceof com.dtc.fhir.gwt.ConceptMapTarget || value == null) {
					List<com.dtc.fhir.gwt.ConceptMapTarget> targetList = instance.getTarget();
					if (targetList.size() < index + 1) {
						targetList.add((com.dtc.fhir.gwt.ConceptMapTarget)value);
					} else {
						targetList.set(Math.min(targetList.size() - 1, index), (com.dtc.fhir.gwt.ConceptMapTarget)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "codeSystem":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setCodeSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConceptMapElement");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConceptMapElement _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "target":
				List<com.dtc.fhir.gwt.ConceptMapTarget> targetList = _instance_.getTarget();
				if (targetList.size() < _index_ + 1) {
					targetList.add(new com.dtc.fhir.gwt.ConceptMapTarget());
				}
				return targetList.get(Math.min(targetList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "codeSystem":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getCodeSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setCodeSystem(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConceptMapElement");
			}
		}
	}
	private static class SetConceptMapEquivalence {
		static void set(com.dtc.fhir.gwt.ConceptMapEquivalence instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConceptMapEquivalence instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ConceptMapEquivalenceList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ConceptMapEquivalenceList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConceptMapEquivalenceList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConceptMapEquivalence");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConceptMapEquivalence _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ConceptMapEquivalenceList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConceptMapEquivalence");
			}
		}
	}
	private static class SetConceptMapTarget {
		static void set(com.dtc.fhir.gwt.ConceptMapTarget instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConceptMapTarget instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "codeSystem":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setCodeSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "product":
				if (value instanceof com.dtc.fhir.gwt.ConceptMapDependsOn || value == null) {
					List<com.dtc.fhir.gwt.ConceptMapDependsOn> productList = instance.getProduct();
					if (productList.size() < index + 1) {
						productList.add((com.dtc.fhir.gwt.ConceptMapDependsOn)value);
					} else {
						productList.set(Math.min(productList.size() - 1, index), (com.dtc.fhir.gwt.ConceptMapDependsOn)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "comments":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComments((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "dependsOn":
				if (value instanceof com.dtc.fhir.gwt.ConceptMapDependsOn || value == null) {
					List<com.dtc.fhir.gwt.ConceptMapDependsOn> dependsOnList = instance.getDependsOn();
					if (dependsOnList.size() < index + 1) {
						dependsOnList.add((com.dtc.fhir.gwt.ConceptMapDependsOn)value);
					} else {
						dependsOnList.set(Math.min(dependsOnList.size() - 1, index), (com.dtc.fhir.gwt.ConceptMapDependsOn)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "equivalence":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setEquivalence((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConceptMapTarget");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConceptMapTarget _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "codeSystem":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getCodeSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setCodeSystem(_field_);
				}
				return _field_;}
			case "product":
				List<com.dtc.fhir.gwt.ConceptMapDependsOn> productList = _instance_.getProduct();
				if (productList.size() < _index_ + 1) {
					productList.add(new com.dtc.fhir.gwt.ConceptMapDependsOn());
				}
				return productList.get(Math.min(productList.size() - 1, _index_));
			case "comments":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComments();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComments(_field_);
				}
				return _field_;}
			case "dependsOn":
				List<com.dtc.fhir.gwt.ConceptMapDependsOn> dependsOnList = _instance_.getDependsOn();
				if (dependsOnList.size() < _index_ + 1) {
					dependsOnList.add(new com.dtc.fhir.gwt.ConceptMapDependsOn());
				}
				return dependsOnList.get(Math.min(dependsOnList.size() - 1, _index_));
			case "equivalence":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getEquivalence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setEquivalence(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConceptMapTarget");
			}
		}
	}
	private static class SetCondition {
		static void set(com.dtc.fhir.gwt.Condition instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Condition instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "dateRecorded":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setDateRecorded((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "asserter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAsserter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "severity":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSeverity((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "stage":
				if (value instanceof com.dtc.fhir.gwt.ConditionStage || value == null) {
					instance.setStage((com.dtc.fhir.gwt.ConditionStage)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConditionStage");
				}
				break;
			case "evidence":
				if (value instanceof com.dtc.fhir.gwt.ConditionEvidence || value == null) {
					List<com.dtc.fhir.gwt.ConditionEvidence> evidenceList = instance.getEvidence();
					if (evidenceList.size() < index + 1) {
						evidenceList.add((com.dtc.fhir.gwt.ConditionEvidence)value);
					} else {
						evidenceList.set(Math.min(evidenceList.size() - 1, index), (com.dtc.fhir.gwt.ConditionEvidence)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "bodySite":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> bodySiteList = instance.getBodySite();
					if (bodySiteList.size() < index + 1) {
						bodySiteList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						bodySiteList.set(Math.min(bodySiteList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "notes":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setNotes((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "clinicalStatus":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setClinicalStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "verificationStatus":
				if (value instanceof com.dtc.fhir.gwt.ConditionVerificationStatus || value == null) {
					instance.setVerificationStatus((com.dtc.fhir.gwt.ConditionVerificationStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConditionVerificationStatus");
				}
				break;
			case "onsetDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setOnsetDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "onsetQuantity":
				if (value instanceof com.dtc.fhir.gwt.Age || value == null) {
					instance.setOnsetQuantity((com.dtc.fhir.gwt.Age)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Age");
				}
				break;
			case "onsetPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setOnsetPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "onsetRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setOnsetRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "onsetString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setOnsetString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "abatementDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setAbatementDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "abatementQuantity":
				if (value instanceof com.dtc.fhir.gwt.Age || value == null) {
					instance.setAbatementQuantity((com.dtc.fhir.gwt.Age)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Age");
				}
				break;
			case "abatementBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAbatementBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "abatementPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setAbatementPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "abatementRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setAbatementRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "abatementString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setAbatementString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Condition");
			}
		}

		static Object get(com.dtc.fhir.gwt.Condition _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "dateRecorded":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getDateRecorded();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setDateRecorded(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "asserter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAsserter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAsserter(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "severity":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSeverity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSeverity(_field_);
				}
				return _field_;}
			case "stage":
				{com.dtc.fhir.gwt.ConditionStage _field_ = _instance_.getStage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ConditionStage();
					_instance_.setStage(_field_);
				}
				return _field_;}
			case "evidence":
				List<com.dtc.fhir.gwt.ConditionEvidence> evidenceList = _instance_.getEvidence();
				if (evidenceList.size() < _index_ + 1) {
					evidenceList.add(new com.dtc.fhir.gwt.ConditionEvidence());
				}
				return evidenceList.get(Math.min(evidenceList.size() - 1, _index_));
			case "bodySite":
				List<com.dtc.fhir.gwt.CodeableConcept> bodySiteList = _instance_.getBodySite();
				if (bodySiteList.size() < _index_ + 1) {
					bodySiteList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return bodySiteList.get(Math.min(bodySiteList.size() - 1, _index_));
			case "notes":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getNotes();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setNotes(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "clinicalStatus":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getClinicalStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setClinicalStatus(_field_);
				}
				return _field_;}
			case "verificationStatus":
				{com.dtc.fhir.gwt.ConditionVerificationStatus _field_ = _instance_.getVerificationStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ConditionVerificationStatus();
					_instance_.setVerificationStatus(_field_);
				}
				return _field_;}
			case "onsetDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getOnsetDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setOnsetDateTime(_field_);
				}
				return _field_;}
			case "onsetQuantity":
				{com.dtc.fhir.gwt.Age _field_ = _instance_.getOnsetQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Age();
					_instance_.setOnsetQuantity(_field_);
				}
				return _field_;}
			case "onsetPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getOnsetPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setOnsetPeriod(_field_);
				}
				return _field_;}
			case "onsetRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getOnsetRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setOnsetRange(_field_);
				}
				return _field_;}
			case "onsetString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getOnsetString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setOnsetString(_field_);
				}
				return _field_;}
			case "abatementDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getAbatementDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setAbatementDateTime(_field_);
				}
				return _field_;}
			case "abatementQuantity":
				{com.dtc.fhir.gwt.Age _field_ = _instance_.getAbatementQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Age();
					_instance_.setAbatementQuantity(_field_);
				}
				return _field_;}
			case "abatementBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAbatementBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAbatementBoolean(_field_);
				}
				return _field_;}
			case "abatementPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getAbatementPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setAbatementPeriod(_field_);
				}
				return _field_;}
			case "abatementRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getAbatementRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setAbatementRange(_field_);
				}
				return _field_;}
			case "abatementString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getAbatementString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setAbatementString(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Condition");
			}
		}
	}
	private static class SetConditionEvidence {
		static void set(com.dtc.fhir.gwt.ConditionEvidence instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConditionEvidence instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> detailList = instance.getDetail();
					if (detailList.size() < index + 1) {
						detailList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						detailList.set(Math.min(detailList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConditionEvidence");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConditionEvidence _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "detail":
				List<com.dtc.fhir.gwt.Reference> detailList = _instance_.getDetail();
				if (detailList.size() < _index_ + 1) {
					detailList.add(new com.dtc.fhir.gwt.Reference());
				}
				return detailList.get(Math.min(detailList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConditionEvidence");
			}
		}
	}
	private static class SetConditionStage {
		static void set(com.dtc.fhir.gwt.ConditionStage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConditionStage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "assessment":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> assessmentList = instance.getAssessment();
					if (assessmentList.size() < index + 1) {
						assessmentList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						assessmentList.set(Math.min(assessmentList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "summary":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSummary((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConditionStage");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConditionStage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "assessment":
				List<com.dtc.fhir.gwt.Reference> assessmentList = _instance_.getAssessment();
				if (assessmentList.size() < _index_ + 1) {
					assessmentList.add(new com.dtc.fhir.gwt.Reference());
				}
				return assessmentList.get(Math.min(assessmentList.size() - 1, _index_));
			case "summary":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSummary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSummary(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConditionStage");
			}
		}
	}
	private static class SetConditionVerificationStatus {
		static void set(com.dtc.fhir.gwt.ConditionVerificationStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConditionVerificationStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ConditionVerificationStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ConditionVerificationStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConditionVerificationStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConditionVerificationStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConditionVerificationStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ConditionVerificationStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConditionVerificationStatus");
			}
		}
	}
	private static class SetConditionalDeleteStatus {
		static void set(com.dtc.fhir.gwt.ConditionalDeleteStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConditionalDeleteStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ConditionalDeleteStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ConditionalDeleteStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConditionalDeleteStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConditionalDeleteStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConditionalDeleteStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ConditionalDeleteStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConditionalDeleteStatus");
			}
		}
	}
	private static class SetConformance {
		static void set(com.dtc.fhir.gwt.Conformance instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Conformance instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.ConformanceContact || value == null) {
					List<com.dtc.fhir.gwt.ConformanceContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.ConformanceContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "copyright":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCopyright((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "experimental":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExperimental((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "requirements":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRequirements((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "implementation":
				if (value instanceof com.dtc.fhir.gwt.ConformanceImplementation || value == null) {
					instance.setImplementation((com.dtc.fhir.gwt.ConformanceImplementation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConformanceImplementation");
				}
				break;
			case "fhirVersion":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setFhirVersion((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "acceptUnknown":
				if (value instanceof com.dtc.fhir.gwt.UnknownContentCode || value == null) {
					instance.setAcceptUnknown((com.dtc.fhir.gwt.UnknownContentCode)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnknownContentCode");
				}
				break;
			case "kind":
				if (value instanceof com.dtc.fhir.gwt.ConformanceStatementKind || value == null) {
					instance.setKind((com.dtc.fhir.gwt.ConformanceStatementKind)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConformanceStatementKind");
				}
				break;
			case "software":
				if (value instanceof com.dtc.fhir.gwt.ConformanceSoftware || value == null) {
					instance.setSoftware((com.dtc.fhir.gwt.ConformanceSoftware)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConformanceSoftware");
				}
				break;
			case "format":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					List<com.dtc.fhir.gwt.Code> formatList = instance.getFormat();
					if (formatList.size() < index + 1) {
						formatList.add((com.dtc.fhir.gwt.Code)value);
					} else {
						formatList.set(Math.min(formatList.size() - 1, index), (com.dtc.fhir.gwt.Code)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "profile":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> profileList = instance.getProfile();
					if (profileList.size() < index + 1) {
						profileList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						profileList.set(Math.min(profileList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "rest":
				if (value instanceof com.dtc.fhir.gwt.ConformanceRest || value == null) {
					List<com.dtc.fhir.gwt.ConformanceRest> restList = instance.getRest();
					if (restList.size() < index + 1) {
						restList.add((com.dtc.fhir.gwt.ConformanceRest)value);
					} else {
						restList.set(Math.min(restList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceRest)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "messaging":
				if (value instanceof com.dtc.fhir.gwt.ConformanceMessaging || value == null) {
					List<com.dtc.fhir.gwt.ConformanceMessaging> messagingList = instance.getMessaging();
					if (messagingList.size() < index + 1) {
						messagingList.add((com.dtc.fhir.gwt.ConformanceMessaging)value);
					} else {
						messagingList.set(Math.min(messagingList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceMessaging)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "document":
				if (value instanceof com.dtc.fhir.gwt.ConformanceDocument || value == null) {
					List<com.dtc.fhir.gwt.ConformanceDocument> documentList = instance.getDocument();
					if (documentList.size() < index + 1) {
						documentList.add((com.dtc.fhir.gwt.ConformanceDocument)value);
					} else {
						documentList.set(Math.min(documentList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceDocument)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Conformance");
			}
		}

		static Object get(com.dtc.fhir.gwt.Conformance _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.ConformanceContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.ConformanceContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "copyright":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCopyright();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCopyright(_field_);
				}
				return _field_;}
			case "experimental":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExperimental();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExperimental(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "requirements":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRequirements();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRequirements(_field_);
				}
				return _field_;}
			case "implementation":
				{com.dtc.fhir.gwt.ConformanceImplementation _field_ = _instance_.getImplementation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ConformanceImplementation();
					_instance_.setImplementation(_field_);
				}
				return _field_;}
			case "fhirVersion":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getFhirVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setFhirVersion(_field_);
				}
				return _field_;}
			case "acceptUnknown":
				{com.dtc.fhir.gwt.UnknownContentCode _field_ = _instance_.getAcceptUnknown();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnknownContentCode();
					_instance_.setAcceptUnknown(_field_);
				}
				return _field_;}
			case "kind":
				{com.dtc.fhir.gwt.ConformanceStatementKind _field_ = _instance_.getKind();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ConformanceStatementKind();
					_instance_.setKind(_field_);
				}
				return _field_;}
			case "software":
				{com.dtc.fhir.gwt.ConformanceSoftware _field_ = _instance_.getSoftware();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ConformanceSoftware();
					_instance_.setSoftware(_field_);
				}
				return _field_;}
			case "format":
				List<com.dtc.fhir.gwt.Code> formatList = _instance_.getFormat();
				if (formatList.size() < _index_ + 1) {
					formatList.add(new com.dtc.fhir.gwt.Code());
				}
				return formatList.get(Math.min(formatList.size() - 1, _index_));
			case "profile":
				List<com.dtc.fhir.gwt.Reference> profileList = _instance_.getProfile();
				if (profileList.size() < _index_ + 1) {
					profileList.add(new com.dtc.fhir.gwt.Reference());
				}
				return profileList.get(Math.min(profileList.size() - 1, _index_));
			case "rest":
				List<com.dtc.fhir.gwt.ConformanceRest> restList = _instance_.getRest();
				if (restList.size() < _index_ + 1) {
					restList.add(new com.dtc.fhir.gwt.ConformanceRest());
				}
				return restList.get(Math.min(restList.size() - 1, _index_));
			case "messaging":
				List<com.dtc.fhir.gwt.ConformanceMessaging> messagingList = _instance_.getMessaging();
				if (messagingList.size() < _index_ + 1) {
					messagingList.add(new com.dtc.fhir.gwt.ConformanceMessaging());
				}
				return messagingList.get(Math.min(messagingList.size() - 1, _index_));
			case "document":
				List<com.dtc.fhir.gwt.ConformanceDocument> documentList = _instance_.getDocument();
				if (documentList.size() < _index_ + 1) {
					documentList.add(new com.dtc.fhir.gwt.ConformanceDocument());
				}
				return documentList.get(Math.min(documentList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Conformance");
			}
		}
	}
	private static class SetConformanceCertificate {
		static void set(com.dtc.fhir.gwt.ConformanceCertificate instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceCertificate instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "blob":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setBlob((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceCertificate");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceCertificate _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "blob":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getBlob();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setBlob(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceCertificate");
			}
		}
	}
	private static class SetConformanceContact {
		static void set(com.dtc.fhir.gwt.ConformanceContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceContact");
			}
		}
	}
	private static class SetConformanceDocument {
		static void set(com.dtc.fhir.gwt.ConformanceDocument instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceDocument instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "documentation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDocumentation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "mode":
				if (value instanceof com.dtc.fhir.gwt.DocumentMode || value == null) {
					instance.setMode((com.dtc.fhir.gwt.DocumentMode)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DocumentMode");
				}
				break;
			case "profile":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProfile((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceDocument");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceDocument _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "documentation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDocumentation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDocumentation(_field_);
				}
				return _field_;}
			case "mode":
				{com.dtc.fhir.gwt.DocumentMode _field_ = _instance_.getMode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DocumentMode();
					_instance_.setMode(_field_);
				}
				return _field_;}
			case "profile":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProfile();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProfile(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceDocument");
			}
		}
	}
	private static class SetConformanceEndpoint {
		static void set(com.dtc.fhir.gwt.ConformanceEndpoint instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceEndpoint instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setAddress((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "protocol":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setProtocol((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceEndpoint");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceEndpoint _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setAddress(_field_);
				}
				return _field_;}
			case "protocol":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getProtocol();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setProtocol(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceEndpoint");
			}
		}
	}
	private static class SetConformanceEvent {
		static void set(com.dtc.fhir.gwt.ConformanceEvent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceEvent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.MessageSignificanceCategory || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.MessageSignificanceCategory)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MessageSignificanceCategory");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "documentation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDocumentation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "focus":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setFocus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "response":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setResponse((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "mode":
				if (value instanceof com.dtc.fhir.gwt.ConformanceEventMode || value == null) {
					instance.setMode((com.dtc.fhir.gwt.ConformanceEventMode)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConformanceEventMode");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceEvent");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceEvent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.MessageSignificanceCategory _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MessageSignificanceCategory();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "documentation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDocumentation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDocumentation(_field_);
				}
				return _field_;}
			case "focus":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getFocus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setFocus(_field_);
				}
				return _field_;}
			case "response":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getResponse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setResponse(_field_);
				}
				return _field_;}
			case "mode":
				{com.dtc.fhir.gwt.ConformanceEventMode _field_ = _instance_.getMode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ConformanceEventMode();
					_instance_.setMode(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceEvent");
			}
		}
	}
	private static class SetConformanceEventMode {
		static void set(com.dtc.fhir.gwt.ConformanceEventMode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceEventMode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ConformanceEventModeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ConformanceEventModeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConformanceEventModeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceEventMode");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceEventMode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ConformanceEventModeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceEventMode");
			}
		}
	}
	private static class SetConformanceImplementation {
		static void set(com.dtc.fhir.gwt.ConformanceImplementation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceImplementation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceImplementation");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceImplementation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceImplementation");
			}
		}
	}
	private static class SetConformanceInteraction {
		static void set(com.dtc.fhir.gwt.ConformanceInteraction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceInteraction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.TypeRestfulInteraction || value == null) {
					instance.setCode((com.dtc.fhir.gwt.TypeRestfulInteraction)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TypeRestfulInteraction");
				}
				break;
			case "documentation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDocumentation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceInteraction");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceInteraction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.TypeRestfulInteraction _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TypeRestfulInteraction();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "documentation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDocumentation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDocumentation(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceInteraction");
			}
		}
	}
	private static class SetConformanceInteraction1 {
		static void set(com.dtc.fhir.gwt.ConformanceInteraction1 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceInteraction1 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.SystemRestfulInteraction || value == null) {
					instance.setCode((com.dtc.fhir.gwt.SystemRestfulInteraction)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SystemRestfulInteraction");
				}
				break;
			case "documentation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDocumentation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceInteraction1");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceInteraction1 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.SystemRestfulInteraction _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SystemRestfulInteraction();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "documentation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDocumentation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDocumentation(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceInteraction1");
			}
		}
	}
	private static class SetConformanceMessaging {
		static void set(com.dtc.fhir.gwt.ConformanceMessaging instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceMessaging instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "documentation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDocumentation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "reliableCache":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setReliableCache((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "endpoint":
				if (value instanceof com.dtc.fhir.gwt.ConformanceEndpoint || value == null) {
					List<com.dtc.fhir.gwt.ConformanceEndpoint> endpointList = instance.getEndpoint();
					if (endpointList.size() < index + 1) {
						endpointList.add((com.dtc.fhir.gwt.ConformanceEndpoint)value);
					} else {
						endpointList.set(Math.min(endpointList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceEndpoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "event":
				if (value instanceof com.dtc.fhir.gwt.ConformanceEvent || value == null) {
					List<com.dtc.fhir.gwt.ConformanceEvent> eventList = instance.getEvent();
					if (eventList.size() < index + 1) {
						eventList.add((com.dtc.fhir.gwt.ConformanceEvent)value);
					} else {
						eventList.set(Math.min(eventList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceEvent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceMessaging");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceMessaging _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "documentation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDocumentation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDocumentation(_field_);
				}
				return _field_;}
			case "reliableCache":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getReliableCache();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setReliableCache(_field_);
				}
				return _field_;}
			case "endpoint":
				List<com.dtc.fhir.gwt.ConformanceEndpoint> endpointList = _instance_.getEndpoint();
				if (endpointList.size() < _index_ + 1) {
					endpointList.add(new com.dtc.fhir.gwt.ConformanceEndpoint());
				}
				return endpointList.get(Math.min(endpointList.size() - 1, _index_));
			case "event":
				List<com.dtc.fhir.gwt.ConformanceEvent> eventList = _instance_.getEvent();
				if (eventList.size() < _index_ + 1) {
					eventList.add(new com.dtc.fhir.gwt.ConformanceEvent());
				}
				return eventList.get(Math.min(eventList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceMessaging");
			}
		}
	}
	private static class SetConformanceOperation {
		static void set(com.dtc.fhir.gwt.ConformanceOperation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceOperation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "definition":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDefinition((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceOperation");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceOperation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "definition":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDefinition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDefinition(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceOperation");
			}
		}
	}
	private static class SetConformanceResource {
		static void set(com.dtc.fhir.gwt.ConformanceResource instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceResource instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "interaction":
				if (value instanceof com.dtc.fhir.gwt.ConformanceInteraction || value == null) {
					List<com.dtc.fhir.gwt.ConformanceInteraction> interactionList = instance.getInteraction();
					if (interactionList.size() < index + 1) {
						interactionList.add((com.dtc.fhir.gwt.ConformanceInteraction)value);
					} else {
						interactionList.set(Math.min(interactionList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceInteraction)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "versioning":
				if (value instanceof com.dtc.fhir.gwt.ResourceVersionPolicy || value == null) {
					instance.setVersioning((com.dtc.fhir.gwt.ResourceVersionPolicy)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ResourceVersionPolicy");
				}
				break;
			case "readHistory":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setReadHistory((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "updateCreate":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setUpdateCreate((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "conditionalCreate":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setConditionalCreate((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "conditionalUpdate":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setConditionalUpdate((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "conditionalDelete":
				if (value instanceof com.dtc.fhir.gwt.ConditionalDeleteStatus || value == null) {
					instance.setConditionalDelete((com.dtc.fhir.gwt.ConditionalDeleteStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConditionalDeleteStatus");
				}
				break;
			case "searchInclude":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> searchIncludeList = instance.getSearchInclude();
					if (searchIncludeList.size() < index + 1) {
						searchIncludeList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						searchIncludeList.set(Math.min(searchIncludeList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "searchRevInclude":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> searchRevIncludeList = instance.getSearchRevInclude();
					if (searchRevIncludeList.size() < index + 1) {
						searchRevIncludeList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						searchRevIncludeList.set(Math.min(searchRevIncludeList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "searchParam":
				if (value instanceof com.dtc.fhir.gwt.ConformanceSearchParam || value == null) {
					List<com.dtc.fhir.gwt.ConformanceSearchParam> searchParamList = instance.getSearchParam();
					if (searchParamList.size() < index + 1) {
						searchParamList.add((com.dtc.fhir.gwt.ConformanceSearchParam)value);
					} else {
						searchParamList.set(Math.min(searchParamList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceSearchParam)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "profile":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProfile((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceResource");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceResource _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "interaction":
				List<com.dtc.fhir.gwt.ConformanceInteraction> interactionList = _instance_.getInteraction();
				if (interactionList.size() < _index_ + 1) {
					interactionList.add(new com.dtc.fhir.gwt.ConformanceInteraction());
				}
				return interactionList.get(Math.min(interactionList.size() - 1, _index_));
			case "versioning":
				{com.dtc.fhir.gwt.ResourceVersionPolicy _field_ = _instance_.getVersioning();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ResourceVersionPolicy();
					_instance_.setVersioning(_field_);
				}
				return _field_;}
			case "readHistory":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getReadHistory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setReadHistory(_field_);
				}
				return _field_;}
			case "updateCreate":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getUpdateCreate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setUpdateCreate(_field_);
				}
				return _field_;}
			case "conditionalCreate":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getConditionalCreate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setConditionalCreate(_field_);
				}
				return _field_;}
			case "conditionalUpdate":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getConditionalUpdate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setConditionalUpdate(_field_);
				}
				return _field_;}
			case "conditionalDelete":
				{com.dtc.fhir.gwt.ConditionalDeleteStatus _field_ = _instance_.getConditionalDelete();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ConditionalDeleteStatus();
					_instance_.setConditionalDelete(_field_);
				}
				return _field_;}
			case "searchInclude":
				List<com.dtc.fhir.gwt.StringDt> searchIncludeList = _instance_.getSearchInclude();
				if (searchIncludeList.size() < _index_ + 1) {
					searchIncludeList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return searchIncludeList.get(Math.min(searchIncludeList.size() - 1, _index_));
			case "searchRevInclude":
				List<com.dtc.fhir.gwt.StringDt> searchRevIncludeList = _instance_.getSearchRevInclude();
				if (searchRevIncludeList.size() < _index_ + 1) {
					searchRevIncludeList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return searchRevIncludeList.get(Math.min(searchRevIncludeList.size() - 1, _index_));
			case "searchParam":
				List<com.dtc.fhir.gwt.ConformanceSearchParam> searchParamList = _instance_.getSearchParam();
				if (searchParamList.size() < _index_ + 1) {
					searchParamList.add(new com.dtc.fhir.gwt.ConformanceSearchParam());
				}
				return searchParamList.get(Math.min(searchParamList.size() - 1, _index_));
			case "profile":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProfile();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProfile(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceResource");
			}
		}
	}
	private static class SetConformanceResourceStatus {
		static void set(com.dtc.fhir.gwt.ConformanceResourceStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceResourceStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ConformanceResourceStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ConformanceResourceStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConformanceResourceStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceResourceStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceResourceStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ConformanceResourceStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceResourceStatus");
			}
		}
	}
	private static class SetConformanceRest {
		static void set(com.dtc.fhir.gwt.ConformanceRest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceRest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "resource":
				if (value instanceof com.dtc.fhir.gwt.ConformanceResource || value == null) {
					List<com.dtc.fhir.gwt.ConformanceResource> resourceList = instance.getResource();
					if (resourceList.size() < index + 1) {
						resourceList.add((com.dtc.fhir.gwt.ConformanceResource)value);
					} else {
						resourceList.set(Math.min(resourceList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceResource)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "documentation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDocumentation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "operation":
				if (value instanceof com.dtc.fhir.gwt.ConformanceOperation || value == null) {
					List<com.dtc.fhir.gwt.ConformanceOperation> operationList = instance.getOperation();
					if (operationList.size() < index + 1) {
						operationList.add((com.dtc.fhir.gwt.ConformanceOperation)value);
					} else {
						operationList.set(Math.min(operationList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceOperation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "interaction":
				if (value instanceof com.dtc.fhir.gwt.ConformanceInteraction1 || value == null) {
					List<com.dtc.fhir.gwt.ConformanceInteraction1> interactionList = instance.getInteraction();
					if (interactionList.size() < index + 1) {
						interactionList.add((com.dtc.fhir.gwt.ConformanceInteraction1)value);
					} else {
						interactionList.set(Math.min(interactionList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceInteraction1)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "searchParam":
				if (value instanceof com.dtc.fhir.gwt.ConformanceSearchParam || value == null) {
					List<com.dtc.fhir.gwt.ConformanceSearchParam> searchParamList = instance.getSearchParam();
					if (searchParamList.size() < index + 1) {
						searchParamList.add((com.dtc.fhir.gwt.ConformanceSearchParam)value);
					} else {
						searchParamList.set(Math.min(searchParamList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceSearchParam)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "transactionMode":
				if (value instanceof com.dtc.fhir.gwt.TransactionMode || value == null) {
					instance.setTransactionMode((com.dtc.fhir.gwt.TransactionMode)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TransactionMode");
				}
				break;
			case "compartment":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					List<com.dtc.fhir.gwt.Uri> compartmentList = instance.getCompartment();
					if (compartmentList.size() < index + 1) {
						compartmentList.add((com.dtc.fhir.gwt.Uri)value);
					} else {
						compartmentList.set(Math.min(compartmentList.size() - 1, index), (com.dtc.fhir.gwt.Uri)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "mode":
				if (value instanceof com.dtc.fhir.gwt.RestfulConformanceMode || value == null) {
					instance.setMode((com.dtc.fhir.gwt.RestfulConformanceMode)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.RestfulConformanceMode");
				}
				break;
			case "security":
				if (value instanceof com.dtc.fhir.gwt.ConformanceSecurity || value == null) {
					instance.setSecurity((com.dtc.fhir.gwt.ConformanceSecurity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConformanceSecurity");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceRest");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceRest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "resource":
				List<com.dtc.fhir.gwt.ConformanceResource> resourceList = _instance_.getResource();
				if (resourceList.size() < _index_ + 1) {
					resourceList.add(new com.dtc.fhir.gwt.ConformanceResource());
				}
				return resourceList.get(Math.min(resourceList.size() - 1, _index_));
			case "documentation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDocumentation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDocumentation(_field_);
				}
				return _field_;}
			case "operation":
				List<com.dtc.fhir.gwt.ConformanceOperation> operationList = _instance_.getOperation();
				if (operationList.size() < _index_ + 1) {
					operationList.add(new com.dtc.fhir.gwt.ConformanceOperation());
				}
				return operationList.get(Math.min(operationList.size() - 1, _index_));
			case "interaction":
				List<com.dtc.fhir.gwt.ConformanceInteraction1> interactionList = _instance_.getInteraction();
				if (interactionList.size() < _index_ + 1) {
					interactionList.add(new com.dtc.fhir.gwt.ConformanceInteraction1());
				}
				return interactionList.get(Math.min(interactionList.size() - 1, _index_));
			case "searchParam":
				List<com.dtc.fhir.gwt.ConformanceSearchParam> searchParamList = _instance_.getSearchParam();
				if (searchParamList.size() < _index_ + 1) {
					searchParamList.add(new com.dtc.fhir.gwt.ConformanceSearchParam());
				}
				return searchParamList.get(Math.min(searchParamList.size() - 1, _index_));
			case "transactionMode":
				{com.dtc.fhir.gwt.TransactionMode _field_ = _instance_.getTransactionMode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TransactionMode();
					_instance_.setTransactionMode(_field_);
				}
				return _field_;}
			case "compartment":
				List<com.dtc.fhir.gwt.Uri> compartmentList = _instance_.getCompartment();
				if (compartmentList.size() < _index_ + 1) {
					compartmentList.add(new com.dtc.fhir.gwt.Uri());
				}
				return compartmentList.get(Math.min(compartmentList.size() - 1, _index_));
			case "mode":
				{com.dtc.fhir.gwt.RestfulConformanceMode _field_ = _instance_.getMode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.RestfulConformanceMode();
					_instance_.setMode(_field_);
				}
				return _field_;}
			case "security":
				{com.dtc.fhir.gwt.ConformanceSecurity _field_ = _instance_.getSecurity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ConformanceSecurity();
					_instance_.setSecurity(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceRest");
			}
		}
	}
	private static class SetConformanceSearchParam {
		static void set(com.dtc.fhir.gwt.ConformanceSearchParam instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceSearchParam instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					List<com.dtc.fhir.gwt.Code> targetList = instance.getTarget();
					if (targetList.size() < index + 1) {
						targetList.add((com.dtc.fhir.gwt.Code)value);
					} else {
						targetList.set(Math.min(targetList.size() - 1, index), (com.dtc.fhir.gwt.Code)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "documentation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDocumentation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "definition":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setDefinition((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "modifier":
				if (value instanceof com.dtc.fhir.gwt.SearchModifierCode || value == null) {
					List<com.dtc.fhir.gwt.SearchModifierCode> modifierList = instance.getModifier();
					if (modifierList.size() < index + 1) {
						modifierList.add((com.dtc.fhir.gwt.SearchModifierCode)value);
					} else {
						modifierList.set(Math.min(modifierList.size() - 1, index), (com.dtc.fhir.gwt.SearchModifierCode)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "chain":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> chainList = instance.getChain();
					if (chainList.size() < index + 1) {
						chainList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						chainList.set(Math.min(chainList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceSearchParam");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceSearchParam _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "target":
				List<com.dtc.fhir.gwt.Code> targetList = _instance_.getTarget();
				if (targetList.size() < _index_ + 1) {
					targetList.add(new com.dtc.fhir.gwt.Code());
				}
				return targetList.get(Math.min(targetList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "documentation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDocumentation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDocumentation(_field_);
				}
				return _field_;}
			case "definition":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getDefinition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setDefinition(_field_);
				}
				return _field_;}
			case "modifier":
				List<com.dtc.fhir.gwt.SearchModifierCode> modifierList = _instance_.getModifier();
				if (modifierList.size() < _index_ + 1) {
					modifierList.add(new com.dtc.fhir.gwt.SearchModifierCode());
				}
				return modifierList.get(Math.min(modifierList.size() - 1, _index_));
			case "chain":
				List<com.dtc.fhir.gwt.StringDt> chainList = _instance_.getChain();
				if (chainList.size() < _index_ + 1) {
					chainList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return chainList.get(Math.min(chainList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceSearchParam");
			}
		}
	}
	private static class SetConformanceSecurity {
		static void set(com.dtc.fhir.gwt.ConformanceSecurity instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceSecurity instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "service":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> serviceList = instance.getService();
					if (serviceList.size() < index + 1) {
						serviceList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						serviceList.set(Math.min(serviceList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "certificate":
				if (value instanceof com.dtc.fhir.gwt.ConformanceCertificate || value == null) {
					List<com.dtc.fhir.gwt.ConformanceCertificate> certificateList = instance.getCertificate();
					if (certificateList.size() < index + 1) {
						certificateList.add((com.dtc.fhir.gwt.ConformanceCertificate)value);
					} else {
						certificateList.set(Math.min(certificateList.size() - 1, index), (com.dtc.fhir.gwt.ConformanceCertificate)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "cors":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setCors((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceSecurity");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceSecurity _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "service":
				List<com.dtc.fhir.gwt.CodeableConcept> serviceList = _instance_.getService();
				if (serviceList.size() < _index_ + 1) {
					serviceList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return serviceList.get(Math.min(serviceList.size() - 1, _index_));
			case "certificate":
				List<com.dtc.fhir.gwt.ConformanceCertificate> certificateList = _instance_.getCertificate();
				if (certificateList.size() < _index_ + 1) {
					certificateList.add(new com.dtc.fhir.gwt.ConformanceCertificate());
				}
				return certificateList.get(Math.min(certificateList.size() - 1, _index_));
			case "cors":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getCors();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setCors(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceSecurity");
			}
		}
	}
	private static class SetConformanceSoftware {
		static void set(com.dtc.fhir.gwt.ConformanceSoftware instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceSoftware instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "releaseDate":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setReleaseDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceSoftware");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceSoftware _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "releaseDate":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getReleaseDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setReleaseDate(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceSoftware");
			}
		}
	}
	private static class SetConformanceStatementKind {
		static void set(com.dtc.fhir.gwt.ConformanceStatementKind instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConformanceStatementKind instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ConformanceStatementKindList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ConformanceStatementKindList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConformanceStatementKindList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConformanceStatementKind");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConformanceStatementKind _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ConformanceStatementKindList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConformanceStatementKind");
			}
		}
	}
	private static class SetConstraintSeverity {
		static void set(com.dtc.fhir.gwt.ConstraintSeverity instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ConstraintSeverity instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ConstraintSeverityList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ConstraintSeverityList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConstraintSeverityList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ConstraintSeverity");
			}
		}

		static Object get(com.dtc.fhir.gwt.ConstraintSeverity _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ConstraintSeverityList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ConstraintSeverity");
			}
		}
	}
	private static class SetContactPoint {
		static void set(com.dtc.fhir.gwt.ContactPoint instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContactPoint instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValue((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "use":
				if (value instanceof com.dtc.fhir.gwt.ContactPointUse || value == null) {
					instance.setUse((com.dtc.fhir.gwt.ContactPointUse)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPointUse");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.ContactPointSystem || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.ContactPointSystem)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPointSystem");
				}
				break;
			case "rank":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setRank((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContactPoint");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContactPoint _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "use":
				{com.dtc.fhir.gwt.ContactPointUse _field_ = _instance_.getUse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPointUse();
					_instance_.setUse(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.ContactPointSystem _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPointSystem();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "rank":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getRank();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setRank(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContactPoint");
			}
		}
	}
	private static class SetContactPointSystem {
		static void set(com.dtc.fhir.gwt.ContactPointSystem instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContactPointSystem instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ContactPointSystemList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ContactPointSystemList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPointSystemList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContactPointSystem");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContactPointSystem _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ContactPointSystemList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContactPointSystem");
			}
		}
	}
	private static class SetContactPointUse {
		static void set(com.dtc.fhir.gwt.ContactPointUse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContactPointUse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ContactPointUseList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ContactPointUseList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPointUseList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContactPointUse");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContactPointUse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ContactPointUseList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContactPointUse");
			}
		}
	}
	private static class SetContentType {
		static void set(com.dtc.fhir.gwt.ContentType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContentType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ContentTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ContentTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContentTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContentType");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContentType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ContentTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContentType");
			}
		}
	}
	private static class SetContract {
		static void set(com.dtc.fhir.gwt.Contract instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Contract instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "authority":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> authorityList = instance.getAuthority();
					if (authorityList.size() < index + 1) {
						authorityList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						authorityList.set(Math.min(authorityList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "issued":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setIssued((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "applies":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setApplies((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "domain":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> domainList = instance.getDomain();
					if (domainList.size() < index + 1) {
						domainList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						domainList.set(Math.min(domainList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> subjectList = instance.getSubject();
					if (subjectList.size() < index + 1) {
						subjectList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						subjectList.set(Math.min(subjectList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "action":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> actionList = instance.getAction();
					if (actionList.size() < index + 1) {
						actionList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						actionList.set(Math.min(actionList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "subType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> subTypeList = instance.getSubType();
					if (subTypeList.size() < index + 1) {
						subTypeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						subTypeList.set(Math.min(subTypeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "signer":
				if (value instanceof com.dtc.fhir.gwt.ContractSigner || value == null) {
					List<com.dtc.fhir.gwt.ContractSigner> signerList = instance.getSigner();
					if (signerList.size() < index + 1) {
						signerList.add((com.dtc.fhir.gwt.ContractSigner)value);
					} else {
						signerList.set(Math.min(signerList.size() - 1, index), (com.dtc.fhir.gwt.ContractSigner)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "actor":
				if (value instanceof com.dtc.fhir.gwt.ContractActor || value == null) {
					List<com.dtc.fhir.gwt.ContractActor> actorList = instance.getActor();
					if (actorList.size() < index + 1) {
						actorList.add((com.dtc.fhir.gwt.ContractActor)value);
					} else {
						actorList.set(Math.min(actorList.size() - 1, index), (com.dtc.fhir.gwt.ContractActor)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "term":
				if (value instanceof com.dtc.fhir.gwt.ContractTerm || value == null) {
					List<com.dtc.fhir.gwt.ContractTerm> termList = instance.getTerm();
					if (termList.size() < index + 1) {
						termList.add((com.dtc.fhir.gwt.ContractTerm)value);
					} else {
						termList.set(Math.min(termList.size() - 1, index), (com.dtc.fhir.gwt.ContractTerm)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "legal":
				if (value instanceof com.dtc.fhir.gwt.ContractLegal || value == null) {
					List<com.dtc.fhir.gwt.ContractLegal> legalList = instance.getLegal();
					if (legalList.size() < index + 1) {
						legalList.add((com.dtc.fhir.gwt.ContractLegal)value);
					} else {
						legalList.set(Math.min(legalList.size() - 1, index), (com.dtc.fhir.gwt.ContractLegal)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "friendly":
				if (value instanceof com.dtc.fhir.gwt.ContractFriendly || value == null) {
					List<com.dtc.fhir.gwt.ContractFriendly> friendlyList = instance.getFriendly();
					if (friendlyList.size() < index + 1) {
						friendlyList.add((com.dtc.fhir.gwt.ContractFriendly)value);
					} else {
						friendlyList.set(Math.min(friendlyList.size() - 1, index), (com.dtc.fhir.gwt.ContractFriendly)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "rule":
				if (value instanceof com.dtc.fhir.gwt.ContractRule || value == null) {
					List<com.dtc.fhir.gwt.ContractRule> ruleList = instance.getRule();
					if (ruleList.size() < index + 1) {
						ruleList.add((com.dtc.fhir.gwt.ContractRule)value);
					} else {
						ruleList.set(Math.min(ruleList.size() - 1, index), (com.dtc.fhir.gwt.ContractRule)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "actionReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> actionReasonList = instance.getActionReason();
					if (actionReasonList.size() < index + 1) {
						actionReasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						actionReasonList.set(Math.min(actionReasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "valuedItem":
				if (value instanceof com.dtc.fhir.gwt.ContractValuedItem || value == null) {
					List<com.dtc.fhir.gwt.ContractValuedItem> valuedItemList = instance.getValuedItem();
					if (valuedItemList.size() < index + 1) {
						valuedItemList.add((com.dtc.fhir.gwt.ContractValuedItem)value);
					} else {
						valuedItemList.set(Math.min(valuedItemList.size() - 1, index), (com.dtc.fhir.gwt.ContractValuedItem)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "bindingAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setBindingAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "bindingReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setBindingReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Contract");
			}
		}

		static Object get(com.dtc.fhir.gwt.Contract _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "authority":
				List<com.dtc.fhir.gwt.Reference> authorityList = _instance_.getAuthority();
				if (authorityList.size() < _index_ + 1) {
					authorityList.add(new com.dtc.fhir.gwt.Reference());
				}
				return authorityList.get(Math.min(authorityList.size() - 1, _index_));
			case "issued":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getIssued();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setIssued(_field_);
				}
				return _field_;}
			case "applies":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getApplies();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setApplies(_field_);
				}
				return _field_;}
			case "domain":
				List<com.dtc.fhir.gwt.Reference> domainList = _instance_.getDomain();
				if (domainList.size() < _index_ + 1) {
					domainList.add(new com.dtc.fhir.gwt.Reference());
				}
				return domainList.get(Math.min(domainList.size() - 1, _index_));
			case "subject":
				List<com.dtc.fhir.gwt.Reference> subjectList = _instance_.getSubject();
				if (subjectList.size() < _index_ + 1) {
					subjectList.add(new com.dtc.fhir.gwt.Reference());
				}
				return subjectList.get(Math.min(subjectList.size() - 1, _index_));
			case "action":
				List<com.dtc.fhir.gwt.CodeableConcept> actionList = _instance_.getAction();
				if (actionList.size() < _index_ + 1) {
					actionList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return actionList.get(Math.min(actionList.size() - 1, _index_));
			case "subType":
				List<com.dtc.fhir.gwt.CodeableConcept> subTypeList = _instance_.getSubType();
				if (subTypeList.size() < _index_ + 1) {
					subTypeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return subTypeList.get(Math.min(subTypeList.size() - 1, _index_));
			case "signer":
				List<com.dtc.fhir.gwt.ContractSigner> signerList = _instance_.getSigner();
				if (signerList.size() < _index_ + 1) {
					signerList.add(new com.dtc.fhir.gwt.ContractSigner());
				}
				return signerList.get(Math.min(signerList.size() - 1, _index_));
			case "actor":
				List<com.dtc.fhir.gwt.ContractActor> actorList = _instance_.getActor();
				if (actorList.size() < _index_ + 1) {
					actorList.add(new com.dtc.fhir.gwt.ContractActor());
				}
				return actorList.get(Math.min(actorList.size() - 1, _index_));
			case "term":
				List<com.dtc.fhir.gwt.ContractTerm> termList = _instance_.getTerm();
				if (termList.size() < _index_ + 1) {
					termList.add(new com.dtc.fhir.gwt.ContractTerm());
				}
				return termList.get(Math.min(termList.size() - 1, _index_));
			case "legal":
				List<com.dtc.fhir.gwt.ContractLegal> legalList = _instance_.getLegal();
				if (legalList.size() < _index_ + 1) {
					legalList.add(new com.dtc.fhir.gwt.ContractLegal());
				}
				return legalList.get(Math.min(legalList.size() - 1, _index_));
			case "friendly":
				List<com.dtc.fhir.gwt.ContractFriendly> friendlyList = _instance_.getFriendly();
				if (friendlyList.size() < _index_ + 1) {
					friendlyList.add(new com.dtc.fhir.gwt.ContractFriendly());
				}
				return friendlyList.get(Math.min(friendlyList.size() - 1, _index_));
			case "rule":
				List<com.dtc.fhir.gwt.ContractRule> ruleList = _instance_.getRule();
				if (ruleList.size() < _index_ + 1) {
					ruleList.add(new com.dtc.fhir.gwt.ContractRule());
				}
				return ruleList.get(Math.min(ruleList.size() - 1, _index_));
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "actionReason":
				List<com.dtc.fhir.gwt.CodeableConcept> actionReasonList = _instance_.getActionReason();
				if (actionReasonList.size() < _index_ + 1) {
					actionReasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return actionReasonList.get(Math.min(actionReasonList.size() - 1, _index_));
			case "valuedItem":
				List<com.dtc.fhir.gwt.ContractValuedItem> valuedItemList = _instance_.getValuedItem();
				if (valuedItemList.size() < _index_ + 1) {
					valuedItemList.add(new com.dtc.fhir.gwt.ContractValuedItem());
				}
				return valuedItemList.get(Math.min(valuedItemList.size() - 1, _index_));
			case "bindingAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getBindingAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setBindingAttachment(_field_);
				}
				return _field_;}
			case "bindingReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getBindingReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setBindingReference(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Contract");
			}
		}
	}
	private static class SetContractActor {
		static void set(com.dtc.fhir.gwt.ContractActor instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContractActor instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "entity":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEntity((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "role":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> roleList = instance.getRole();
					if (roleList.size() < index + 1) {
						roleList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						roleList.set(Math.min(roleList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContractActor");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContractActor _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "entity":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEntity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEntity(_field_);
				}
				return _field_;}
			case "role":
				List<com.dtc.fhir.gwt.CodeableConcept> roleList = _instance_.getRole();
				if (roleList.size() < _index_ + 1) {
					roleList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return roleList.get(Math.min(roleList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContractActor");
			}
		}
	}
	private static class SetContractActor1 {
		static void set(com.dtc.fhir.gwt.ContractActor1 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContractActor1 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "entity":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEntity((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "role":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> roleList = instance.getRole();
					if (roleList.size() < index + 1) {
						roleList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						roleList.set(Math.min(roleList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContractActor1");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContractActor1 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "entity":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEntity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEntity(_field_);
				}
				return _field_;}
			case "role":
				List<com.dtc.fhir.gwt.CodeableConcept> roleList = _instance_.getRole();
				if (roleList.size() < _index_ + 1) {
					roleList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return roleList.get(Math.min(roleList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContractActor1");
			}
		}
	}
	private static class SetContractFriendly {
		static void set(com.dtc.fhir.gwt.ContractFriendly instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContractFriendly instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "contentAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setContentAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "contentReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setContentReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContractFriendly");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContractFriendly _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "contentAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getContentAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setContentAttachment(_field_);
				}
				return _field_;}
			case "contentReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getContentReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setContentReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContractFriendly");
			}
		}
	}
	private static class SetContractLegal {
		static void set(com.dtc.fhir.gwt.ContractLegal instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContractLegal instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "contentAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setContentAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "contentReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setContentReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContractLegal");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContractLegal _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "contentAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getContentAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setContentAttachment(_field_);
				}
				return _field_;}
			case "contentReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getContentReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setContentReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContractLegal");
			}
		}
	}
	private static class SetContractRule {
		static void set(com.dtc.fhir.gwt.ContractRule instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContractRule instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "contentAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setContentAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "contentReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setContentReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContractRule");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContractRule _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "contentAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getContentAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setContentAttachment(_field_);
				}
				return _field_;}
			case "contentReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getContentReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setContentReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContractRule");
			}
		}
	}
	private static class SetContractSigner {
		static void set(com.dtc.fhir.gwt.ContractSigner instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContractSigner instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "signature":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setSignature((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "party":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setParty((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContractSigner");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContractSigner _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "signature":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getSignature();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setSignature(_field_);
				}
				return _field_;}
			case "party":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getParty();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setParty(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContractSigner");
			}
		}
	}
	private static class SetContractTerm {
		static void set(com.dtc.fhir.gwt.ContractTerm instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContractTerm instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "issued":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setIssued((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "applies":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setApplies((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "action":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> actionList = instance.getAction();
					if (actionList.size() < index + 1) {
						actionList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						actionList.set(Math.min(actionList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "subType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSubType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "actor":
				if (value instanceof com.dtc.fhir.gwt.ContractActor1 || value == null) {
					List<com.dtc.fhir.gwt.ContractActor1> actorList = instance.getActor();
					if (actorList.size() < index + 1) {
						actorList.add((com.dtc.fhir.gwt.ContractActor1)value);
					} else {
						actorList.set(Math.min(actorList.size() - 1, index), (com.dtc.fhir.gwt.ContractActor1)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "group":
				if (value instanceof com.dtc.fhir.gwt.ContractTerm || value == null) {
					List<com.dtc.fhir.gwt.ContractTerm> groupList = instance.getGroup();
					if (groupList.size() < index + 1) {
						groupList.add((com.dtc.fhir.gwt.ContractTerm)value);
					} else {
						groupList.set(Math.min(groupList.size() - 1, index), (com.dtc.fhir.gwt.ContractTerm)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "actionReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> actionReasonList = instance.getActionReason();
					if (actionReasonList.size() < index + 1) {
						actionReasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						actionReasonList.set(Math.min(actionReasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "valuedItem":
				if (value instanceof com.dtc.fhir.gwt.ContractValuedItem1 || value == null) {
					List<com.dtc.fhir.gwt.ContractValuedItem1> valuedItemList = instance.getValuedItem();
					if (valuedItemList.size() < index + 1) {
						valuedItemList.add((com.dtc.fhir.gwt.ContractValuedItem1)value);
					} else {
						valuedItemList.set(Math.min(valuedItemList.size() - 1, index), (com.dtc.fhir.gwt.ContractValuedItem1)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContractTerm");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContractTerm _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "issued":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getIssued();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setIssued(_field_);
				}
				return _field_;}
			case "applies":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getApplies();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setApplies(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "action":
				List<com.dtc.fhir.gwt.CodeableConcept> actionList = _instance_.getAction();
				if (actionList.size() < _index_ + 1) {
					actionList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return actionList.get(Math.min(actionList.size() - 1, _index_));
			case "subType":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSubType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSubType(_field_);
				}
				return _field_;}
			case "actor":
				List<com.dtc.fhir.gwt.ContractActor1> actorList = _instance_.getActor();
				if (actorList.size() < _index_ + 1) {
					actorList.add(new com.dtc.fhir.gwt.ContractActor1());
				}
				return actorList.get(Math.min(actorList.size() - 1, _index_));
			case "group":
				List<com.dtc.fhir.gwt.ContractTerm> groupList = _instance_.getGroup();
				if (groupList.size() < _index_ + 1) {
					groupList.add(new com.dtc.fhir.gwt.ContractTerm());
				}
				return groupList.get(Math.min(groupList.size() - 1, _index_));
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "actionReason":
				List<com.dtc.fhir.gwt.CodeableConcept> actionReasonList = _instance_.getActionReason();
				if (actionReasonList.size() < _index_ + 1) {
					actionReasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return actionReasonList.get(Math.min(actionReasonList.size() - 1, _index_));
			case "valuedItem":
				List<com.dtc.fhir.gwt.ContractValuedItem1> valuedItemList = _instance_.getValuedItem();
				if (valuedItemList.size() < _index_ + 1) {
					valuedItemList.add(new com.dtc.fhir.gwt.ContractValuedItem1());
				}
				return valuedItemList.get(Math.min(valuedItemList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContractTerm");
			}
		}
	}
	private static class SetContractValuedItem {
		static void set(com.dtc.fhir.gwt.ContractValuedItem instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContractValuedItem instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "entityCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setEntityCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "entityReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEntityReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "effectiveTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setEffectiveTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "unitPrice":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setUnitPrice((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "factor":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setFactor((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "points":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPoints((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "net":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setNet((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContractValuedItem");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContractValuedItem _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "entityCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getEntityCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setEntityCodeableConcept(_field_);
				}
				return _field_;}
			case "entityReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEntityReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEntityReference(_field_);
				}
				return _field_;}
			case "effectiveTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getEffectiveTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setEffectiveTime(_field_);
				}
				return _field_;}
			case "unitPrice":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getUnitPrice();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setUnitPrice(_field_);
				}
				return _field_;}
			case "factor":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getFactor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setFactor(_field_);
				}
				return _field_;}
			case "points":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPoints();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPoints(_field_);
				}
				return _field_;}
			case "net":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getNet();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setNet(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContractValuedItem");
			}
		}
	}
	private static class SetContractValuedItem1 {
		static void set(com.dtc.fhir.gwt.ContractValuedItem1 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ContractValuedItem1 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "entityCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setEntityCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "entityReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEntityReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "effectiveTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setEffectiveTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "unitPrice":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setUnitPrice((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "factor":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setFactor((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "points":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPoints((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "net":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setNet((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ContractValuedItem1");
			}
		}

		static Object get(com.dtc.fhir.gwt.ContractValuedItem1 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "entityCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getEntityCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setEntityCodeableConcept(_field_);
				}
				return _field_;}
			case "entityReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEntityReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEntityReference(_field_);
				}
				return _field_;}
			case "effectiveTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getEffectiveTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setEffectiveTime(_field_);
				}
				return _field_;}
			case "unitPrice":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getUnitPrice();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setUnitPrice(_field_);
				}
				return _field_;}
			case "factor":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getFactor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setFactor(_field_);
				}
				return _field_;}
			case "points":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPoints();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPoints(_field_);
				}
				return _field_;}
			case "net":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getNet();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setNet(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ContractValuedItem1");
			}
		}
	}
	private static class SetCount {
		static void set(com.dtc.fhir.gwt.Count instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Count instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "comparator":
				if (value instanceof com.dtc.fhir.gwt.QuantityComparator || value == null) {
					instance.setComparator((com.dtc.fhir.gwt.QuantityComparator)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuantityComparator");
				}
				break;
			case "unit":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUnit((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Count");
			}
		}

		static Object get(com.dtc.fhir.gwt.Count _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "comparator":
				{com.dtc.fhir.gwt.QuantityComparator _field_ = _instance_.getComparator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuantityComparator();
					_instance_.setComparator(_field_);
				}
				return _field_;}
			case "unit":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUnit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUnit(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Count");
			}
		}
	}
	private static class SetCoverage {
		static void set(com.dtc.fhir.gwt.Coverage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Coverage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "issuer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setIssuer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "bin":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setBin((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "group":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setGroup((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "plan":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPlan((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "subPlan":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setSubPlan((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "dependent":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setDependent((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "sequence":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSequence((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "network":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setNetwork((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "contract":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> contractList = instance.getContract();
					if (contractList.size() < index + 1) {
						contractList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						contractList.set(Math.min(contractList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "subscriberId":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setSubscriberId((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "subscriber":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubscriber((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Coverage");
			}
		}

		static Object get(com.dtc.fhir.gwt.Coverage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "issuer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getIssuer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setIssuer(_field_);
				}
				return _field_;}
			case "bin":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getBin();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setBin(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "group":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getGroup();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setGroup(_field_);
				}
				return _field_;}
			case "plan":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPlan();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPlan(_field_);
				}
				return _field_;}
			case "subPlan":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getSubPlan();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setSubPlan(_field_);
				}
				return _field_;}
			case "dependent":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getDependent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setDependent(_field_);
				}
				return _field_;}
			case "sequence":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSequence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSequence(_field_);
				}
				return _field_;}
			case "network":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getNetwork();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setNetwork(_field_);
				}
				return _field_;}
			case "contract":
				List<com.dtc.fhir.gwt.Reference> contractList = _instance_.getContract();
				if (contractList.size() < _index_ + 1) {
					contractList.add(new com.dtc.fhir.gwt.Reference());
				}
				return contractList.get(Math.min(contractList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "subscriberId":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getSubscriberId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setSubscriberId(_field_);
				}
				return _field_;}
			case "subscriber":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubscriber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubscriber(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Coverage");
			}
		}
	}
	private static class SetDataElement {
		static void set(com.dtc.fhir.gwt.DataElement instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DataElement instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.DataElementContact || value == null) {
					List<com.dtc.fhir.gwt.DataElementContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.DataElementContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.DataElementContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "copyright":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCopyright((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "element":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinition || value == null) {
					List<com.dtc.fhir.gwt.ElementDefinition> elementList = instance.getElement();
					if (elementList.size() < index + 1) {
						elementList.add((com.dtc.fhir.gwt.ElementDefinition)value);
					} else {
						elementList.set(Math.min(elementList.size() - 1, index), (com.dtc.fhir.gwt.ElementDefinition)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "experimental":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExperimental((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "useContext":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> useContextList = instance.getUseContext();
					if (useContextList.size() < index + 1) {
						useContextList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						useContextList.set(Math.min(useContextList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "stringency":
				if (value instanceof com.dtc.fhir.gwt.DataElementStringency || value == null) {
					instance.setStringency((com.dtc.fhir.gwt.DataElementStringency)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DataElementStringency");
				}
				break;
			case "mapping":
				if (value instanceof com.dtc.fhir.gwt.DataElementMapping || value == null) {
					List<com.dtc.fhir.gwt.DataElementMapping> mappingList = instance.getMapping();
					if (mappingList.size() < index + 1) {
						mappingList.add((com.dtc.fhir.gwt.DataElementMapping)value);
					} else {
						mappingList.set(Math.min(mappingList.size() - 1, index), (com.dtc.fhir.gwt.DataElementMapping)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DataElement");
			}
		}

		static Object get(com.dtc.fhir.gwt.DataElement _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.DataElementContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.DataElementContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "copyright":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCopyright();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCopyright(_field_);
				}
				return _field_;}
			case "element":
				List<com.dtc.fhir.gwt.ElementDefinition> elementList = _instance_.getElement();
				if (elementList.size() < _index_ + 1) {
					elementList.add(new com.dtc.fhir.gwt.ElementDefinition());
				}
				return elementList.get(Math.min(elementList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "experimental":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExperimental();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExperimental(_field_);
				}
				return _field_;}
			case "useContext":
				List<com.dtc.fhir.gwt.CodeableConcept> useContextList = _instance_.getUseContext();
				if (useContextList.size() < _index_ + 1) {
					useContextList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return useContextList.get(Math.min(useContextList.size() - 1, _index_));
			case "stringency":
				{com.dtc.fhir.gwt.DataElementStringency _field_ = _instance_.getStringency();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DataElementStringency();
					_instance_.setStringency(_field_);
				}
				return _field_;}
			case "mapping":
				List<com.dtc.fhir.gwt.DataElementMapping> mappingList = _instance_.getMapping();
				if (mappingList.size() < _index_ + 1) {
					mappingList.add(new com.dtc.fhir.gwt.DataElementMapping());
				}
				return mappingList.get(Math.min(mappingList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DataElement");
			}
		}
	}
	private static class SetDataElementContact {
		static void set(com.dtc.fhir.gwt.DataElementContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DataElementContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DataElementContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.DataElementContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DataElementContact");
			}
		}
	}
	private static class SetDataElementMapping {
		static void set(com.dtc.fhir.gwt.DataElementMapping instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DataElementMapping instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "uri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "comments":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComments((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identity":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setIdentity((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DataElementMapping");
			}
		}

		static Object get(com.dtc.fhir.gwt.DataElementMapping _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "uri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUri(_field_);
				}
				return _field_;}
			case "comments":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComments();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComments(_field_);
				}
				return _field_;}
			case "identity":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getIdentity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setIdentity(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DataElementMapping");
			}
		}
	}
	private static class SetDataElementStringency {
		static void set(com.dtc.fhir.gwt.DataElementStringency instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DataElementStringency instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DataElementStringencyList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DataElementStringencyList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DataElementStringencyList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DataElementStringency");
			}
		}

		static Object get(com.dtc.fhir.gwt.DataElementStringency _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DataElementStringencyList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DataElementStringency");
			}
		}
	}
	private static class SetDate {
		static void set(com.dtc.fhir.gwt.Date instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Date instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Date");
			}
		}

		static Object get(com.dtc.fhir.gwt.Date _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Date");
			}
		}
	}
	private static class SetDateTime {
		static void set(com.dtc.fhir.gwt.DateTime instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DateTime instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DateTime");
			}
		}

		static Object get(com.dtc.fhir.gwt.DateTime _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DateTime");
			}
		}
	}
	private static class SetDaysOfWeek {
		static void set(com.dtc.fhir.gwt.DaysOfWeek instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DaysOfWeek instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DaysOfWeekList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DaysOfWeekList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DaysOfWeekList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DaysOfWeek");
			}
		}

		static Object get(com.dtc.fhir.gwt.DaysOfWeek _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DaysOfWeekList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DaysOfWeek");
			}
		}
	}
	private static class SetDecimal {
		static void set(com.dtc.fhir.gwt.Decimal instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Decimal instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.math.BigDecimal || value == null) {
					instance.setValue((java.math.BigDecimal)value);
				} else {
					throw new IllegalArgumentException("value is not a java.math.BigDecimal");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Decimal");
			}
		}

		static Object get(com.dtc.fhir.gwt.Decimal _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.math.BigDecimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Decimal");
			}
		}
	}
	private static class SetDetectedIssue {
		static void set(com.dtc.fhir.gwt.DetectedIssue instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DetectedIssue instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "severity":
				if (value instanceof com.dtc.fhir.gwt.DetectedIssueSeverity || value == null) {
					instance.setSeverity((com.dtc.fhir.gwt.DetectedIssueSeverity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DetectedIssueSeverity");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "mitigation":
				if (value instanceof com.dtc.fhir.gwt.DetectedIssueMitigation || value == null) {
					List<com.dtc.fhir.gwt.DetectedIssueMitigation> mitigationList = instance.getMitigation();
					if (mitigationList.size() < index + 1) {
						mitigationList.add((com.dtc.fhir.gwt.DetectedIssueMitigation)value);
					} else {
						mitigationList.set(Math.min(mitigationList.size() - 1, index), (com.dtc.fhir.gwt.DetectedIssueMitigation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "implicated":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> implicatedList = instance.getImplicated();
					if (implicatedList.size() < index + 1) {
						implicatedList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						implicatedList.set(Math.min(implicatedList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDetail((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "reference":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setReference((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DetectedIssue");
			}
		}

		static Object get(com.dtc.fhir.gwt.DetectedIssue _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "severity":
				{com.dtc.fhir.gwt.DetectedIssueSeverity _field_ = _instance_.getSeverity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DetectedIssueSeverity();
					_instance_.setSeverity(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "mitigation":
				List<com.dtc.fhir.gwt.DetectedIssueMitigation> mitigationList = _instance_.getMitigation();
				if (mitigationList.size() < _index_ + 1) {
					mitigationList.add(new com.dtc.fhir.gwt.DetectedIssueMitigation());
				}
				return mitigationList.get(Math.min(mitigationList.size() - 1, _index_));
			case "implicated":
				List<com.dtc.fhir.gwt.Reference> implicatedList = _instance_.getImplicated();
				if (implicatedList.size() < _index_ + 1) {
					implicatedList.add(new com.dtc.fhir.gwt.Reference());
				}
				return implicatedList.get(Math.min(implicatedList.size() - 1, _index_));
			case "author":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthor(_field_);
				}
				return _field_;}
			case "detail":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDetail();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDetail(_field_);
				}
				return _field_;}
			case "reference":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setReference(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DetectedIssue");
			}
		}
	}
	private static class SetDetectedIssueMitigation {
		static void set(com.dtc.fhir.gwt.DetectedIssueMitigation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DetectedIssueMitigation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "action":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAction((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DetectedIssueMitigation");
			}
		}

		static Object get(com.dtc.fhir.gwt.DetectedIssueMitigation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "action":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAction();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAction(_field_);
				}
				return _field_;}
			case "author":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthor(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DetectedIssueMitigation");
			}
		}
	}
	private static class SetDetectedIssueSeverity {
		static void set(com.dtc.fhir.gwt.DetectedIssueSeverity instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DetectedIssueSeverity instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DetectedIssueSeverityList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DetectedIssueSeverityList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DetectedIssueSeverityList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DetectedIssueSeverity");
			}
		}

		static Object get(com.dtc.fhir.gwt.DetectedIssueSeverity _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DetectedIssueSeverityList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DetectedIssueSeverity");
			}
		}
	}
	private static class SetDevice {
		static void set(com.dtc.fhir.gwt.Device instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Device instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setLocation((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "owner":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOwner((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.DeviceStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.DeviceStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					List<com.dtc.fhir.gwt.Annotation> noteList = instance.getNote();
					if (noteList.size() < index + 1) {
						noteList.add((com.dtc.fhir.gwt.Annotation)value);
					} else {
						noteList.set(Math.min(noteList.size() - 1, index), (com.dtc.fhir.gwt.Annotation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "manufacturer":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setManufacturer((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "manufactureDate":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setManufactureDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "model":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setModel((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "expiry":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setExpiry((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "udi":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUdi((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "lotNumber":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLotNumber((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Device");
			}
		}

		static Object get(com.dtc.fhir.gwt.Device _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getLocation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setLocation(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "owner":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOwner();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOwner(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.DeviceStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DeviceStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "note":
				List<com.dtc.fhir.gwt.Annotation> noteList = _instance_.getNote();
				if (noteList.size() < _index_ + 1) {
					noteList.add(new com.dtc.fhir.gwt.Annotation());
				}
				return noteList.get(Math.min(noteList.size() - 1, _index_));
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.ContactPoint> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "manufacturer":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getManufacturer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setManufacturer(_field_);
				}
				return _field_;}
			case "manufactureDate":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getManufactureDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setManufactureDate(_field_);
				}
				return _field_;}
			case "model":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getModel();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setModel(_field_);
				}
				return _field_;}
			case "expiry":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getExpiry();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setExpiry(_field_);
				}
				return _field_;}
			case "udi":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUdi();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUdi(_field_);
				}
				return _field_;}
			case "lotNumber":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLotNumber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLotNumber(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Device");
			}
		}
	}
	private static class SetDeviceComponent {
		static void set(com.dtc.fhir.gwt.DeviceComponent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceComponent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "parent":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setParent((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSource((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "lastSystemChange":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setLastSystemChange((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "operationalStatus":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> operationalStatusList = instance.getOperationalStatus();
					if (operationalStatusList.size() < index + 1) {
						operationalStatusList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						operationalStatusList.set(Math.min(operationalStatusList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "parameterGroup":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setParameterGroup((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "measurementPrinciple":
				if (value instanceof com.dtc.fhir.gwt.MeasmntPrinciple || value == null) {
					instance.setMeasurementPrinciple((com.dtc.fhir.gwt.MeasmntPrinciple)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MeasmntPrinciple");
				}
				break;
			case "productionSpecification":
				if (value instanceof com.dtc.fhir.gwt.DeviceComponentProductionSpecification || value == null) {
					List<com.dtc.fhir.gwt.DeviceComponentProductionSpecification> productionSpecificationList = instance.getProductionSpecification();
					if (productionSpecificationList.size() < index + 1) {
						productionSpecificationList.add((com.dtc.fhir.gwt.DeviceComponentProductionSpecification)value);
					} else {
						productionSpecificationList.set(Math.min(productionSpecificationList.size() - 1, index), (com.dtc.fhir.gwt.DeviceComponentProductionSpecification)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "languageCode":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setLanguageCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceComponent");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceComponent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "parent":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getParent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setParent(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "source":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "lastSystemChange":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getLastSystemChange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setLastSystemChange(_field_);
				}
				return _field_;}
			case "operationalStatus":
				List<com.dtc.fhir.gwt.CodeableConcept> operationalStatusList = _instance_.getOperationalStatus();
				if (operationalStatusList.size() < _index_ + 1) {
					operationalStatusList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return operationalStatusList.get(Math.min(operationalStatusList.size() - 1, _index_));
			case "parameterGroup":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getParameterGroup();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setParameterGroup(_field_);
				}
				return _field_;}
			case "measurementPrinciple":
				{com.dtc.fhir.gwt.MeasmntPrinciple _field_ = _instance_.getMeasurementPrinciple();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MeasmntPrinciple();
					_instance_.setMeasurementPrinciple(_field_);
				}
				return _field_;}
			case "productionSpecification":
				List<com.dtc.fhir.gwt.DeviceComponentProductionSpecification> productionSpecificationList = _instance_.getProductionSpecification();
				if (productionSpecificationList.size() < _index_ + 1) {
					productionSpecificationList.add(new com.dtc.fhir.gwt.DeviceComponentProductionSpecification());
				}
				return productionSpecificationList.get(Math.min(productionSpecificationList.size() - 1, _index_));
			case "languageCode":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getLanguageCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setLanguageCode(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceComponent");
			}
		}
	}
	private static class SetDeviceComponentProductionSpecification {
		static void set(com.dtc.fhir.gwt.DeviceComponentProductionSpecification instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceComponentProductionSpecification instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "specType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSpecType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "componentId":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setComponentId((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "productionSpec":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setProductionSpec((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceComponentProductionSpecification");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceComponentProductionSpecification _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "specType":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSpecType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSpecType(_field_);
				}
				return _field_;}
			case "componentId":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getComponentId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setComponentId(_field_);
				}
				return _field_;}
			case "productionSpec":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getProductionSpec();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setProductionSpec(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceComponentProductionSpecification");
			}
		}
	}
	private static class SetDeviceMetric {
		static void set(com.dtc.fhir.gwt.DeviceMetric instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceMetric instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "parent":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setParent((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricCategory || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.DeviceMetricCategory)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricCategory");
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSource((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "operationalStatus":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricOperationalStatus || value == null) {
					instance.setOperationalStatus((com.dtc.fhir.gwt.DeviceMetricOperationalStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricOperationalStatus");
				}
				break;
			case "measurementPeriod":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setMeasurementPeriod((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "calibration":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricCalibration || value == null) {
					List<com.dtc.fhir.gwt.DeviceMetricCalibration> calibrationList = instance.getCalibration();
					if (calibrationList.size() < index + 1) {
						calibrationList.add((com.dtc.fhir.gwt.DeviceMetricCalibration)value);
					} else {
						calibrationList.set(Math.min(calibrationList.size() - 1, index), (com.dtc.fhir.gwt.DeviceMetricCalibration)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "unit":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setUnit((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "color":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricColor || value == null) {
					instance.setColor((com.dtc.fhir.gwt.DeviceMetricColor)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricColor");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceMetric");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceMetric _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "parent":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getParent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setParent(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.DeviceMetricCategory _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DeviceMetricCategory();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "source":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "operationalStatus":
				{com.dtc.fhir.gwt.DeviceMetricOperationalStatus _field_ = _instance_.getOperationalStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DeviceMetricOperationalStatus();
					_instance_.setOperationalStatus(_field_);
				}
				return _field_;}
			case "measurementPeriod":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getMeasurementPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setMeasurementPeriod(_field_);
				}
				return _field_;}
			case "calibration":
				List<com.dtc.fhir.gwt.DeviceMetricCalibration> calibrationList = _instance_.getCalibration();
				if (calibrationList.size() < _index_ + 1) {
					calibrationList.add(new com.dtc.fhir.gwt.DeviceMetricCalibration());
				}
				return calibrationList.get(Math.min(calibrationList.size() - 1, _index_));
			case "unit":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getUnit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setUnit(_field_);
				}
				return _field_;}
			case "color":
				{com.dtc.fhir.gwt.DeviceMetricColor _field_ = _instance_.getColor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DeviceMetricColor();
					_instance_.setColor(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceMetric");
			}
		}
	}
	private static class SetDeviceMetricCalibration {
		static void set(com.dtc.fhir.gwt.DeviceMetricCalibration instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceMetricCalibration instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "state":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricCalibrationState || value == null) {
					instance.setState((com.dtc.fhir.gwt.DeviceMetricCalibrationState)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricCalibrationState");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricCalibrationType || value == null) {
					instance.setType((com.dtc.fhir.gwt.DeviceMetricCalibrationType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricCalibrationType");
				}
				break;
			case "time":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setTime((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceMetricCalibration");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceMetricCalibration _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "state":
				{com.dtc.fhir.gwt.DeviceMetricCalibrationState _field_ = _instance_.getState();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DeviceMetricCalibrationState();
					_instance_.setState(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.DeviceMetricCalibrationType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DeviceMetricCalibrationType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "time":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setTime(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceMetricCalibration");
			}
		}
	}
	private static class SetDeviceMetricCalibrationState {
		static void set(com.dtc.fhir.gwt.DeviceMetricCalibrationState instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceMetricCalibrationState instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricCalibrationStateList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DeviceMetricCalibrationStateList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricCalibrationStateList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceMetricCalibrationState");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceMetricCalibrationState _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DeviceMetricCalibrationStateList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceMetricCalibrationState");
			}
		}
	}
	private static class SetDeviceMetricCalibrationType {
		static void set(com.dtc.fhir.gwt.DeviceMetricCalibrationType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceMetricCalibrationType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricCalibrationTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DeviceMetricCalibrationTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricCalibrationTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceMetricCalibrationType");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceMetricCalibrationType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DeviceMetricCalibrationTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceMetricCalibrationType");
			}
		}
	}
	private static class SetDeviceMetricCategory {
		static void set(com.dtc.fhir.gwt.DeviceMetricCategory instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceMetricCategory instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricCategoryList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DeviceMetricCategoryList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricCategoryList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceMetricCategory");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceMetricCategory _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DeviceMetricCategoryList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceMetricCategory");
			}
		}
	}
	private static class SetDeviceMetricColor {
		static void set(com.dtc.fhir.gwt.DeviceMetricColor instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceMetricColor instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricColorList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DeviceMetricColorList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricColorList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceMetricColor");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceMetricColor _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DeviceMetricColorList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceMetricColor");
			}
		}
	}
	private static class SetDeviceMetricOperationalStatus {
		static void set(com.dtc.fhir.gwt.DeviceMetricOperationalStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceMetricOperationalStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DeviceMetricOperationalStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DeviceMetricOperationalStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceMetricOperationalStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceMetricOperationalStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceMetricOperationalStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DeviceMetricOperationalStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceMetricOperationalStatus");
			}
		}
	}
	private static class SetDeviceStatus {
		static void set(com.dtc.fhir.gwt.DeviceStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DeviceStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DeviceStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DeviceStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceStatus");
			}
		}
	}
	private static class SetDeviceUseRequest {
		static void set(com.dtc.fhir.gwt.DeviceUseRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceUseRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "priority":
				if (value instanceof com.dtc.fhir.gwt.DeviceUseRequestPriority || value == null) {
					instance.setPriority((com.dtc.fhir.gwt.DeviceUseRequestPriority)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceUseRequestPriority");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.DeviceUseRequestStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.DeviceUseRequestStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceUseRequestStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "device":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDevice((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "notes":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> notesList = instance.getNotes();
					if (notesList.size() < index + 1) {
						notesList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						notesList.set(Math.min(notesList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "bodySiteCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setBodySiteCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "bodySiteReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setBodySiteReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "indication":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> indicationList = instance.getIndication();
					if (indicationList.size() < index + 1) {
						indicationList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						indicationList.set(Math.min(indicationList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "recordedOn":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setRecordedOn((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "timingTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setTimingTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "timingPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setTimingPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "timingDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setTimingDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "orderedOn":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setOrderedOn((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "prnReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> prnReasonList = instance.getPrnReason();
					if (prnReasonList.size() < index + 1) {
						prnReasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						prnReasonList.set(Math.min(prnReasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceUseRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceUseRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "priority":
				{com.dtc.fhir.gwt.DeviceUseRequestPriority _field_ = _instance_.getPriority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DeviceUseRequestPriority();
					_instance_.setPriority(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.DeviceUseRequestStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DeviceUseRequestStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "device":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDevice();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDevice(_field_);
				}
				return _field_;}
			case "notes":
				List<com.dtc.fhir.gwt.StringDt> notesList = _instance_.getNotes();
				if (notesList.size() < _index_ + 1) {
					notesList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return notesList.get(Math.min(notesList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "bodySiteCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getBodySiteCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setBodySiteCodeableConcept(_field_);
				}
				return _field_;}
			case "bodySiteReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getBodySiteReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setBodySiteReference(_field_);
				}
				return _field_;}
			case "indication":
				List<com.dtc.fhir.gwt.CodeableConcept> indicationList = _instance_.getIndication();
				if (indicationList.size() < _index_ + 1) {
					indicationList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return indicationList.get(Math.min(indicationList.size() - 1, _index_));
			case "recordedOn":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getRecordedOn();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setRecordedOn(_field_);
				}
				return _field_;}
			case "timingTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getTimingTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setTimingTiming(_field_);
				}
				return _field_;}
			case "timingPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getTimingPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setTimingPeriod(_field_);
				}
				return _field_;}
			case "timingDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getTimingDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setTimingDateTime(_field_);
				}
				return _field_;}
			case "orderedOn":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getOrderedOn();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setOrderedOn(_field_);
				}
				return _field_;}
			case "prnReason":
				List<com.dtc.fhir.gwt.CodeableConcept> prnReasonList = _instance_.getPrnReason();
				if (prnReasonList.size() < _index_ + 1) {
					prnReasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return prnReasonList.get(Math.min(prnReasonList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceUseRequest");
			}
		}
	}
	private static class SetDeviceUseRequestPriority {
		static void set(com.dtc.fhir.gwt.DeviceUseRequestPriority instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceUseRequestPriority instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DeviceUseRequestPriorityList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DeviceUseRequestPriorityList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceUseRequestPriorityList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceUseRequestPriority");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceUseRequestPriority _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DeviceUseRequestPriorityList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceUseRequestPriority");
			}
		}
	}
	private static class SetDeviceUseRequestStatus {
		static void set(com.dtc.fhir.gwt.DeviceUseRequestStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceUseRequestStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DeviceUseRequestStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DeviceUseRequestStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DeviceUseRequestStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceUseRequestStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceUseRequestStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DeviceUseRequestStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceUseRequestStatus");
			}
		}
	}
	private static class SetDeviceUseStatement {
		static void set(com.dtc.fhir.gwt.DeviceUseStatement instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DeviceUseStatement instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "device":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDevice((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "notes":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> notesList = instance.getNotes();
					if (notesList.size() < index + 1) {
						notesList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						notesList.set(Math.min(notesList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "bodySiteCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setBodySiteCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "bodySiteReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setBodySiteReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "indication":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> indicationList = instance.getIndication();
					if (indicationList.size() < index + 1) {
						indicationList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						indicationList.set(Math.min(indicationList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "recordedOn":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setRecordedOn((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "timingTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setTimingTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "timingPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setTimingPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "timingDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setTimingDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "whenUsed":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setWhenUsed((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DeviceUseStatement");
			}
		}

		static Object get(com.dtc.fhir.gwt.DeviceUseStatement _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "device":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDevice();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDevice(_field_);
				}
				return _field_;}
			case "notes":
				List<com.dtc.fhir.gwt.StringDt> notesList = _instance_.getNotes();
				if (notesList.size() < _index_ + 1) {
					notesList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return notesList.get(Math.min(notesList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "bodySiteCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getBodySiteCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setBodySiteCodeableConcept(_field_);
				}
				return _field_;}
			case "bodySiteReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getBodySiteReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setBodySiteReference(_field_);
				}
				return _field_;}
			case "indication":
				List<com.dtc.fhir.gwt.CodeableConcept> indicationList = _instance_.getIndication();
				if (indicationList.size() < _index_ + 1) {
					indicationList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return indicationList.get(Math.min(indicationList.size() - 1, _index_));
			case "recordedOn":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getRecordedOn();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setRecordedOn(_field_);
				}
				return _field_;}
			case "timingTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getTimingTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setTimingTiming(_field_);
				}
				return _field_;}
			case "timingPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getTimingPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setTimingPeriod(_field_);
				}
				return _field_;}
			case "timingDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getTimingDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setTimingDateTime(_field_);
				}
				return _field_;}
			case "whenUsed":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getWhenUsed();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setWhenUsed(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DeviceUseStatement");
			}
		}
	}
	private static class SetDiagnosticOrder {
		static void set(com.dtc.fhir.gwt.DiagnosticOrder instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DiagnosticOrder instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "priority":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticOrderPriority || value == null) {
					instance.setPriority((com.dtc.fhir.gwt.DiagnosticOrderPriority)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DiagnosticOrderPriority");
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonList = instance.getReason();
					if (reasonList.size() < index + 1) {
						reasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonList.set(Math.min(reasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticOrderStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.DiagnosticOrderStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DiagnosticOrderStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					List<com.dtc.fhir.gwt.Annotation> noteList = instance.getNote();
					if (noteList.size() < index + 1) {
						noteList.add((com.dtc.fhir.gwt.Annotation)value);
					} else {
						noteList.set(Math.min(noteList.size() - 1, index), (com.dtc.fhir.gwt.Annotation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "item":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticOrderItem || value == null) {
					List<com.dtc.fhir.gwt.DiagnosticOrderItem> itemList = instance.getItem();
					if (itemList.size() < index + 1) {
						itemList.add((com.dtc.fhir.gwt.DiagnosticOrderItem)value);
					} else {
						itemList.set(Math.min(itemList.size() - 1, index), (com.dtc.fhir.gwt.DiagnosticOrderItem)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "supportingInformation":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> supportingInformationList = instance.getSupportingInformation();
					if (supportingInformationList.size() < index + 1) {
						supportingInformationList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						supportingInformationList.set(Math.min(supportingInformationList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "event":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticOrderEvent || value == null) {
					List<com.dtc.fhir.gwt.DiagnosticOrderEvent> eventList = instance.getEvent();
					if (eventList.size() < index + 1) {
						eventList.add((com.dtc.fhir.gwt.DiagnosticOrderEvent)value);
					} else {
						eventList.set(Math.min(eventList.size() - 1, index), (com.dtc.fhir.gwt.DiagnosticOrderEvent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "specimen":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> specimenList = instance.getSpecimen();
					if (specimenList.size() < index + 1) {
						specimenList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						specimenList.set(Math.min(specimenList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "orderer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrderer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DiagnosticOrder");
			}
		}

		static Object get(com.dtc.fhir.gwt.DiagnosticOrder _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "priority":
				{com.dtc.fhir.gwt.DiagnosticOrderPriority _field_ = _instance_.getPriority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DiagnosticOrderPriority();
					_instance_.setPriority(_field_);
				}
				return _field_;}
			case "reason":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonList = _instance_.getReason();
				if (reasonList.size() < _index_ + 1) {
					reasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonList.get(Math.min(reasonList.size() - 1, _index_));
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.DiagnosticOrderStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DiagnosticOrderStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "note":
				List<com.dtc.fhir.gwt.Annotation> noteList = _instance_.getNote();
				if (noteList.size() < _index_ + 1) {
					noteList.add(new com.dtc.fhir.gwt.Annotation());
				}
				return noteList.get(Math.min(noteList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "item":
				List<com.dtc.fhir.gwt.DiagnosticOrderItem> itemList = _instance_.getItem();
				if (itemList.size() < _index_ + 1) {
					itemList.add(new com.dtc.fhir.gwt.DiagnosticOrderItem());
				}
				return itemList.get(Math.min(itemList.size() - 1, _index_));
			case "supportingInformation":
				List<com.dtc.fhir.gwt.Reference> supportingInformationList = _instance_.getSupportingInformation();
				if (supportingInformationList.size() < _index_ + 1) {
					supportingInformationList.add(new com.dtc.fhir.gwt.Reference());
				}
				return supportingInformationList.get(Math.min(supportingInformationList.size() - 1, _index_));
			case "event":
				List<com.dtc.fhir.gwt.DiagnosticOrderEvent> eventList = _instance_.getEvent();
				if (eventList.size() < _index_ + 1) {
					eventList.add(new com.dtc.fhir.gwt.DiagnosticOrderEvent());
				}
				return eventList.get(Math.min(eventList.size() - 1, _index_));
			case "specimen":
				List<com.dtc.fhir.gwt.Reference> specimenList = _instance_.getSpecimen();
				if (specimenList.size() < _index_ + 1) {
					specimenList.add(new com.dtc.fhir.gwt.Reference());
				}
				return specimenList.get(Math.min(specimenList.size() - 1, _index_));
			case "orderer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrderer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrderer(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DiagnosticOrder");
			}
		}
	}
	private static class SetDiagnosticOrderEvent {
		static void set(com.dtc.fhir.gwt.DiagnosticOrderEvent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DiagnosticOrderEvent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "actor":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setActor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticOrderStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.DiagnosticOrderStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DiagnosticOrderStatus");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "dateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DiagnosticOrderEvent");
			}
		}

		static Object get(com.dtc.fhir.gwt.DiagnosticOrderEvent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "actor":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getActor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setActor(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.DiagnosticOrderStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DiagnosticOrderStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "dateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDateTime(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DiagnosticOrderEvent");
			}
		}
	}
	private static class SetDiagnosticOrderItem {
		static void set(com.dtc.fhir.gwt.DiagnosticOrderItem instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DiagnosticOrderItem instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "status":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticOrderStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.DiagnosticOrderStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DiagnosticOrderStatus");
				}
				break;
			case "bodySite":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setBodySite((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "event":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticOrderEvent || value == null) {
					List<com.dtc.fhir.gwt.DiagnosticOrderEvent> eventList = instance.getEvent();
					if (eventList.size() < index + 1) {
						eventList.add((com.dtc.fhir.gwt.DiagnosticOrderEvent)value);
					} else {
						eventList.set(Math.min(eventList.size() - 1, index), (com.dtc.fhir.gwt.DiagnosticOrderEvent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "specimen":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> specimenList = instance.getSpecimen();
					if (specimenList.size() < index + 1) {
						specimenList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						specimenList.set(Math.min(specimenList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DiagnosticOrderItem");
			}
		}

		static Object get(com.dtc.fhir.gwt.DiagnosticOrderItem _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "status":
				{com.dtc.fhir.gwt.DiagnosticOrderStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DiagnosticOrderStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "bodySite":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getBodySite();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setBodySite(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "event":
				List<com.dtc.fhir.gwt.DiagnosticOrderEvent> eventList = _instance_.getEvent();
				if (eventList.size() < _index_ + 1) {
					eventList.add(new com.dtc.fhir.gwt.DiagnosticOrderEvent());
				}
				return eventList.get(Math.min(eventList.size() - 1, _index_));
			case "specimen":
				List<com.dtc.fhir.gwt.Reference> specimenList = _instance_.getSpecimen();
				if (specimenList.size() < _index_ + 1) {
					specimenList.add(new com.dtc.fhir.gwt.Reference());
				}
				return specimenList.get(Math.min(specimenList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DiagnosticOrderItem");
			}
		}
	}
	private static class SetDiagnosticOrderPriority {
		static void set(com.dtc.fhir.gwt.DiagnosticOrderPriority instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DiagnosticOrderPriority instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticOrderPriorityList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DiagnosticOrderPriorityList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DiagnosticOrderPriorityList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DiagnosticOrderPriority");
			}
		}

		static Object get(com.dtc.fhir.gwt.DiagnosticOrderPriority _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DiagnosticOrderPriorityList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DiagnosticOrderPriority");
			}
		}
	}
	private static class SetDiagnosticOrderStatus {
		static void set(com.dtc.fhir.gwt.DiagnosticOrderStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DiagnosticOrderStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticOrderStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DiagnosticOrderStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DiagnosticOrderStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DiagnosticOrderStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.DiagnosticOrderStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DiagnosticOrderStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DiagnosticOrderStatus");
			}
		}
	}
	private static class SetDiagnosticReport {
		static void set(com.dtc.fhir.gwt.DiagnosticReport instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DiagnosticReport instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> requestList = instance.getRequest();
					if (requestList.size() < index + 1) {
						requestList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						requestList.set(Math.min(requestList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "issued":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setIssued((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticReportStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.DiagnosticReportStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DiagnosticReportStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "effectiveDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setEffectiveDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "effectivePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setEffectivePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "imagingStudy":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> imagingStudyList = instance.getImagingStudy();
					if (imagingStudyList.size() < index + 1) {
						imagingStudyList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						imagingStudyList.set(Math.min(imagingStudyList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "conclusion":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setConclusion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "codedDiagnosis":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> codedDiagnosisList = instance.getCodedDiagnosis();
					if (codedDiagnosisList.size() < index + 1) {
						codedDiagnosisList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						codedDiagnosisList.set(Math.min(codedDiagnosisList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "presentedForm":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					List<com.dtc.fhir.gwt.Attachment> presentedFormList = instance.getPresentedForm();
					if (presentedFormList.size() < index + 1) {
						presentedFormList.add((com.dtc.fhir.gwt.Attachment)value);
					} else {
						presentedFormList.set(Math.min(presentedFormList.size() - 1, index), (com.dtc.fhir.gwt.Attachment)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "performer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPerformer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "specimen":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> specimenList = instance.getSpecimen();
					if (specimenList.size() < index + 1) {
						specimenList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						specimenList.set(Math.min(specimenList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "result":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> resultList = instance.getResult();
					if (resultList.size() < index + 1) {
						resultList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						resultList.set(Math.min(resultList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "image":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticReportImage || value == null) {
					List<com.dtc.fhir.gwt.DiagnosticReportImage> imageList = instance.getImage();
					if (imageList.size() < index + 1) {
						imageList.add((com.dtc.fhir.gwt.DiagnosticReportImage)value);
					} else {
						imageList.set(Math.min(imageList.size() - 1, index), (com.dtc.fhir.gwt.DiagnosticReportImage)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DiagnosticReport");
			}
		}

		static Object get(com.dtc.fhir.gwt.DiagnosticReport _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "request":
				List<com.dtc.fhir.gwt.Reference> requestList = _instance_.getRequest();
				if (requestList.size() < _index_ + 1) {
					requestList.add(new com.dtc.fhir.gwt.Reference());
				}
				return requestList.get(Math.min(requestList.size() - 1, _index_));
			case "issued":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getIssued();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setIssued(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.DiagnosticReportStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DiagnosticReportStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "effectiveDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getEffectiveDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setEffectiveDateTime(_field_);
				}
				return _field_;}
			case "effectivePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getEffectivePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setEffectivePeriod(_field_);
				}
				return _field_;}
			case "imagingStudy":
				List<com.dtc.fhir.gwt.Reference> imagingStudyList = _instance_.getImagingStudy();
				if (imagingStudyList.size() < _index_ + 1) {
					imagingStudyList.add(new com.dtc.fhir.gwt.Reference());
				}
				return imagingStudyList.get(Math.min(imagingStudyList.size() - 1, _index_));
			case "conclusion":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getConclusion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setConclusion(_field_);
				}
				return _field_;}
			case "codedDiagnosis":
				List<com.dtc.fhir.gwt.CodeableConcept> codedDiagnosisList = _instance_.getCodedDiagnosis();
				if (codedDiagnosisList.size() < _index_ + 1) {
					codedDiagnosisList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return codedDiagnosisList.get(Math.min(codedDiagnosisList.size() - 1, _index_));
			case "presentedForm":
				List<com.dtc.fhir.gwt.Attachment> presentedFormList = _instance_.getPresentedForm();
				if (presentedFormList.size() < _index_ + 1) {
					presentedFormList.add(new com.dtc.fhir.gwt.Attachment());
				}
				return presentedFormList.get(Math.min(presentedFormList.size() - 1, _index_));
			case "performer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPerformer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPerformer(_field_);
				}
				return _field_;}
			case "specimen":
				List<com.dtc.fhir.gwt.Reference> specimenList = _instance_.getSpecimen();
				if (specimenList.size() < _index_ + 1) {
					specimenList.add(new com.dtc.fhir.gwt.Reference());
				}
				return specimenList.get(Math.min(specimenList.size() - 1, _index_));
			case "result":
				List<com.dtc.fhir.gwt.Reference> resultList = _instance_.getResult();
				if (resultList.size() < _index_ + 1) {
					resultList.add(new com.dtc.fhir.gwt.Reference());
				}
				return resultList.get(Math.min(resultList.size() - 1, _index_));
			case "image":
				List<com.dtc.fhir.gwt.DiagnosticReportImage> imageList = _instance_.getImage();
				if (imageList.size() < _index_ + 1) {
					imageList.add(new com.dtc.fhir.gwt.DiagnosticReportImage());
				}
				return imageList.get(Math.min(imageList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DiagnosticReport");
			}
		}
	}
	private static class SetDiagnosticReportImage {
		static void set(com.dtc.fhir.gwt.DiagnosticReportImage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DiagnosticReportImage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "comment":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComment((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "link":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setLink((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DiagnosticReportImage");
			}
		}

		static Object get(com.dtc.fhir.gwt.DiagnosticReportImage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "comment":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComment(_field_);
				}
				return _field_;}
			case "link":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getLink();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setLink(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DiagnosticReportImage");
			}
		}
	}
	private static class SetDiagnosticReportStatus {
		static void set(com.dtc.fhir.gwt.DiagnosticReportStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DiagnosticReportStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DiagnosticReportStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DiagnosticReportStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DiagnosticReportStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DiagnosticReportStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.DiagnosticReportStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DiagnosticReportStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DiagnosticReportStatus");
			}
		}
	}
	private static class SetDigitalMediaType {
		static void set(com.dtc.fhir.gwt.DigitalMediaType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DigitalMediaType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DigitalMediaTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DigitalMediaTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DigitalMediaTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DigitalMediaType");
			}
		}

		static Object get(com.dtc.fhir.gwt.DigitalMediaType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DigitalMediaTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DigitalMediaType");
			}
		}
	}
	private static class SetDistance {
		static void set(com.dtc.fhir.gwt.Distance instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Distance instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "comparator":
				if (value instanceof com.dtc.fhir.gwt.QuantityComparator || value == null) {
					instance.setComparator((com.dtc.fhir.gwt.QuantityComparator)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuantityComparator");
				}
				break;
			case "unit":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUnit((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Distance");
			}
		}

		static Object get(com.dtc.fhir.gwt.Distance _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "comparator":
				{com.dtc.fhir.gwt.QuantityComparator _field_ = _instance_.getComparator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuantityComparator();
					_instance_.setComparator(_field_);
				}
				return _field_;}
			case "unit":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUnit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUnit(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Distance");
			}
		}
	}
	private static class SetDocumentManifest {
		static void set(com.dtc.fhir.gwt.DocumentManifest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentManifest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "content":
				if (value instanceof com.dtc.fhir.gwt.DocumentManifestContent || value == null) {
					List<com.dtc.fhir.gwt.DocumentManifestContent> contentList = instance.getContent();
					if (contentList.size() < index + 1) {
						contentList.add((com.dtc.fhir.gwt.DocumentManifestContent)value);
					} else {
						contentList.set(Math.min(contentList.size() - 1, index), (com.dtc.fhir.gwt.DocumentManifestContent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSource((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "masterIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setMasterIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> authorList = instance.getAuthor();
					if (authorList.size() < index + 1) {
						authorList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						authorList.set(Math.min(authorList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "recipient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> recipientList = instance.getRecipient();
					if (recipientList.size() < index + 1) {
						recipientList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						recipientList.set(Math.min(recipientList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "related":
				if (value instanceof com.dtc.fhir.gwt.DocumentManifestRelated || value == null) {
					List<com.dtc.fhir.gwt.DocumentManifestRelated> relatedList = instance.getRelated();
					if (relatedList.size() < index + 1) {
						relatedList.add((com.dtc.fhir.gwt.DocumentManifestRelated)value);
					} else {
						relatedList.set(Math.min(relatedList.size() - 1, index), (com.dtc.fhir.gwt.DocumentManifestRelated)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentManifest");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentManifest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "content":
				List<com.dtc.fhir.gwt.DocumentManifestContent> contentList = _instance_.getContent();
				if (contentList.size() < _index_ + 1) {
					contentList.add(new com.dtc.fhir.gwt.DocumentManifestContent());
				}
				return contentList.get(Math.min(contentList.size() - 1, _index_));
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "source":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "masterIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getMasterIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setMasterIdentifier(_field_);
				}
				return _field_;}
			case "author":
				List<com.dtc.fhir.gwt.Reference> authorList = _instance_.getAuthor();
				if (authorList.size() < _index_ + 1) {
					authorList.add(new com.dtc.fhir.gwt.Reference());
				}
				return authorList.get(Math.min(authorList.size() - 1, _index_));
			case "recipient":
				List<com.dtc.fhir.gwt.Reference> recipientList = _instance_.getRecipient();
				if (recipientList.size() < _index_ + 1) {
					recipientList.add(new com.dtc.fhir.gwt.Reference());
				}
				return recipientList.get(Math.min(recipientList.size() - 1, _index_));
			case "related":
				List<com.dtc.fhir.gwt.DocumentManifestRelated> relatedList = _instance_.getRelated();
				if (relatedList.size() < _index_ + 1) {
					relatedList.add(new com.dtc.fhir.gwt.DocumentManifestRelated());
				}
				return relatedList.get(Math.min(relatedList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentManifest");
			}
		}
	}
	private static class SetDocumentManifestContent {
		static void set(com.dtc.fhir.gwt.DocumentManifestContent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentManifestContent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "pAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setPAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "pReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentManifestContent");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentManifestContent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "pAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getPAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setPAttachment(_field_);
				}
				return _field_;}
			case "pReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentManifestContent");
			}
		}
	}
	private static class SetDocumentManifestRelated {
		static void set(com.dtc.fhir.gwt.DocumentManifestRelated instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentManifestRelated instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "ref":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRef((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentManifestRelated");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentManifestRelated _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "ref":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRef();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRef(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentManifestRelated");
			}
		}
	}
	private static class SetDocumentMode {
		static void set(com.dtc.fhir.gwt.DocumentMode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentMode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DocumentModeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DocumentModeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DocumentModeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentMode");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentMode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DocumentModeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentMode");
			}
		}
	}
	private static class SetDocumentReference {
		static void set(com.dtc.fhir.gwt.DocumentReference instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentReference instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "context":
				if (value instanceof com.dtc.fhir.gwt.DocumentReferenceContext || value == null) {
					instance.setContext((com.dtc.fhir.gwt.DocumentReferenceContext)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DocumentReferenceContext");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "content":
				if (value instanceof com.dtc.fhir.gwt.DocumentReferenceContent || value == null) {
					List<com.dtc.fhir.gwt.DocumentReferenceContent> contentList = instance.getContent();
					if (contentList.size() < index + 1) {
						contentList.add((com.dtc.fhir.gwt.DocumentReferenceContent)value);
					} else {
						contentList.set(Math.min(contentList.size() - 1, index), (com.dtc.fhir.gwt.DocumentReferenceContent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "masterIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setMasterIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "authenticator":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthenticator((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "securityLabel":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> securityLabelList = instance.getSecurityLabel();
					if (securityLabelList.size() < index + 1) {
						securityLabelList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						securityLabelList.set(Math.min(securityLabelList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> authorList = instance.getAuthor();
					if (authorList.size() < index + 1) {
						authorList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						authorList.set(Math.min(authorList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "clazz":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setClazz((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "custodian":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setCustodian((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "indexed":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setIndexed((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "docStatus":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setDocStatus((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "relatesTo":
				if (value instanceof com.dtc.fhir.gwt.DocumentReferenceRelatesTo || value == null) {
					List<com.dtc.fhir.gwt.DocumentReferenceRelatesTo> relatesToList = instance.getRelatesTo();
					if (relatesToList.size() < index + 1) {
						relatesToList.add((com.dtc.fhir.gwt.DocumentReferenceRelatesTo)value);
					} else {
						relatesToList.set(Math.min(relatesToList.size() - 1, index), (com.dtc.fhir.gwt.DocumentReferenceRelatesTo)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentReference");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentReference _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "context":
				{com.dtc.fhir.gwt.DocumentReferenceContext _field_ = _instance_.getContext();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DocumentReferenceContext();
					_instance_.setContext(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "content":
				List<com.dtc.fhir.gwt.DocumentReferenceContent> contentList = _instance_.getContent();
				if (contentList.size() < _index_ + 1) {
					contentList.add(new com.dtc.fhir.gwt.DocumentReferenceContent());
				}
				return contentList.get(Math.min(contentList.size() - 1, _index_));
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "masterIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getMasterIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setMasterIdentifier(_field_);
				}
				return _field_;}
			case "authenticator":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthenticator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthenticator(_field_);
				}
				return _field_;}
			case "securityLabel":
				List<com.dtc.fhir.gwt.CodeableConcept> securityLabelList = _instance_.getSecurityLabel();
				if (securityLabelList.size() < _index_ + 1) {
					securityLabelList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return securityLabelList.get(Math.min(securityLabelList.size() - 1, _index_));
			case "author":
				List<com.dtc.fhir.gwt.Reference> authorList = _instance_.getAuthor();
				if (authorList.size() < _index_ + 1) {
					authorList.add(new com.dtc.fhir.gwt.Reference());
				}
				return authorList.get(Math.min(authorList.size() - 1, _index_));
			case "clazz":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getClazz();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setClazz(_field_);
				}
				return _field_;}
			case "custodian":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getCustodian();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setCustodian(_field_);
				}
				return _field_;}
			case "indexed":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getIndexed();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setIndexed(_field_);
				}
				return _field_;}
			case "docStatus":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getDocStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setDocStatus(_field_);
				}
				return _field_;}
			case "relatesTo":
				List<com.dtc.fhir.gwt.DocumentReferenceRelatesTo> relatesToList = _instance_.getRelatesTo();
				if (relatesToList.size() < _index_ + 1) {
					relatesToList.add(new com.dtc.fhir.gwt.DocumentReferenceRelatesTo());
				}
				return relatesToList.get(Math.min(relatesToList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentReference");
			}
		}
	}
	private static class SetDocumentReferenceContent {
		static void set(com.dtc.fhir.gwt.DocumentReferenceContent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentReferenceContent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "attachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "format":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> formatList = instance.getFormat();
					if (formatList.size() < index + 1) {
						formatList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						formatList.set(Math.min(formatList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentReferenceContent");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentReferenceContent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "attachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setAttachment(_field_);
				}
				return _field_;}
			case "format":
				List<com.dtc.fhir.gwt.Coding> formatList = _instance_.getFormat();
				if (formatList.size() < _index_ + 1) {
					formatList.add(new com.dtc.fhir.gwt.Coding());
				}
				return formatList.get(Math.min(formatList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentReferenceContent");
			}
		}
	}
	private static class SetDocumentReferenceContext {
		static void set(com.dtc.fhir.gwt.DocumentReferenceContext instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentReferenceContext instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "event":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> eventList = instance.getEvent();
					if (eventList.size() < index + 1) {
						eventList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						eventList.set(Math.min(eventList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "related":
				if (value instanceof com.dtc.fhir.gwt.DocumentReferenceRelated || value == null) {
					List<com.dtc.fhir.gwt.DocumentReferenceRelated> relatedList = instance.getRelated();
					if (relatedList.size() < index + 1) {
						relatedList.add((com.dtc.fhir.gwt.DocumentReferenceRelated)value);
					} else {
						relatedList.set(Math.min(relatedList.size() - 1, index), (com.dtc.fhir.gwt.DocumentReferenceRelated)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "facilityType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setFacilityType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "practiceSetting":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setPracticeSetting((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "sourcePatientInfo":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSourcePatientInfo((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentReferenceContext");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentReferenceContext _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "event":
				List<com.dtc.fhir.gwt.CodeableConcept> eventList = _instance_.getEvent();
				if (eventList.size() < _index_ + 1) {
					eventList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return eventList.get(Math.min(eventList.size() - 1, _index_));
			case "related":
				List<com.dtc.fhir.gwt.DocumentReferenceRelated> relatedList = _instance_.getRelated();
				if (relatedList.size() < _index_ + 1) {
					relatedList.add(new com.dtc.fhir.gwt.DocumentReferenceRelated());
				}
				return relatedList.get(Math.min(relatedList.size() - 1, _index_));
			case "facilityType":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getFacilityType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setFacilityType(_field_);
				}
				return _field_;}
			case "practiceSetting":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getPracticeSetting();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setPracticeSetting(_field_);
				}
				return _field_;}
			case "sourcePatientInfo":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSourcePatientInfo();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSourcePatientInfo(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentReferenceContext");
			}
		}
	}
	private static class SetDocumentReferenceRelated {
		static void set(com.dtc.fhir.gwt.DocumentReferenceRelated instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentReferenceRelated instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "ref":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRef((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentReferenceRelated");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentReferenceRelated _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "ref":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRef();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRef(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentReferenceRelated");
			}
		}
	}
	private static class SetDocumentReferenceRelatesTo {
		static void set(com.dtc.fhir.gwt.DocumentReferenceRelatesTo instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentReferenceRelatesTo instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.DocumentRelationshipType || value == null) {
					instance.setCode((com.dtc.fhir.gwt.DocumentRelationshipType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DocumentRelationshipType");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentReferenceRelatesTo");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentReferenceRelatesTo _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.DocumentRelationshipType _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DocumentRelationshipType();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentReferenceRelatesTo");
			}
		}
	}
	private static class SetDocumentReferenceStatus {
		static void set(com.dtc.fhir.gwt.DocumentReferenceStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentReferenceStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DocumentReferenceStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DocumentReferenceStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DocumentReferenceStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentReferenceStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentReferenceStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DocumentReferenceStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentReferenceStatus");
			}
		}
	}
	private static class SetDocumentRelationshipType {
		static void set(com.dtc.fhir.gwt.DocumentRelationshipType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DocumentRelationshipType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DocumentRelationshipTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DocumentRelationshipTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DocumentRelationshipTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DocumentRelationshipType");
			}
		}

		static Object get(com.dtc.fhir.gwt.DocumentRelationshipType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DocumentRelationshipTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DocumentRelationshipType");
			}
		}
	}
	private static class SetDomainResource {
		static void set(com.dtc.fhir.gwt.DomainResource instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.DomainResource instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of DomainResource");
			}
		}

		static Object get(com.dtc.fhir.gwt.DomainResource _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of DomainResource");
			}
		}
	}
	private static class SetDuration {
		static void set(com.dtc.fhir.gwt.Duration instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Duration instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "comparator":
				if (value instanceof com.dtc.fhir.gwt.QuantityComparator || value == null) {
					instance.setComparator((com.dtc.fhir.gwt.QuantityComparator)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuantityComparator");
				}
				break;
			case "unit":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUnit((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Duration");
			}
		}

		static Object get(com.dtc.fhir.gwt.Duration _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "comparator":
				{com.dtc.fhir.gwt.QuantityComparator _field_ = _instance_.getComparator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuantityComparator();
					_instance_.setComparator(_field_);
				}
				return _field_;}
			case "unit":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUnit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUnit(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Duration");
			}
		}
	}
	private static class SetElementDefinition {
		static void set(com.dtc.fhir.gwt.ElementDefinition instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ElementDefinition instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "short":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setShort((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinitionType || value == null) {
					List<com.dtc.fhir.gwt.ElementDefinitionType> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.ElementDefinitionType)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.ElementDefinitionType)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "path":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPath((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "defaultValueCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setDefaultValueCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> codeList = instance.getCode();
					if (codeList.size() < index + 1) {
						codeList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						codeList.set(Math.min(codeList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "representation":
				if (value instanceof com.dtc.fhir.gwt.PropertyRepresentation || value == null) {
					List<com.dtc.fhir.gwt.PropertyRepresentation> representationList = instance.getRepresentation();
					if (representationList.size() < index + 1) {
						representationList.add((com.dtc.fhir.gwt.PropertyRepresentation)value);
					} else {
						representationList.set(Math.min(representationList.size() - 1, index), (com.dtc.fhir.gwt.PropertyRepresentation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "definition":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setDefinition((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "nameReference":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setNameReference((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "defaultValueBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setDefaultValueBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "defaultValueInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setDefaultValueInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "defaultValueDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setDefaultValueDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "defaultValueBase64Binary":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setDefaultValueBase64Binary((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "defaultValueInstant":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setDefaultValueInstant((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "defaultValueString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDefaultValueString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "defaultValueUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setDefaultValueUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "defaultValueDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setDefaultValueDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "defaultValueDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDefaultValueDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "defaultValueTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setDefaultValueTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "defaultValueCode":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setDefaultValueCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "defaultValueOid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setDefaultValueOid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "defaultValueUuid":
				if (value instanceof com.dtc.fhir.gwt.Uuid || value == null) {
					instance.setDefaultValueUuid((com.dtc.fhir.gwt.Uuid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uuid");
				}
				break;
			case "defaultValueId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setDefaultValueId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "defaultValueUnsignedInt":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setDefaultValueUnsignedInt((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "defaultValuePositiveInt":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setDefaultValuePositiveInt((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "defaultValueMarkdown":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setDefaultValueMarkdown((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "defaultValueAnnotation":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setDefaultValueAnnotation((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "defaultValueAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setDefaultValueAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "defaultValueIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setDefaultValueIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "defaultValueCoding":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setDefaultValueCoding((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "defaultValueQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setDefaultValueQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "defaultValueRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setDefaultValueRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "defaultValuePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setDefaultValuePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "defaultValueRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setDefaultValueRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "defaultValueReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDefaultValueReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "defaultValueSampledData":
				if (value instanceof com.dtc.fhir.gwt.SampledData || value == null) {
					instance.setDefaultValueSampledData((com.dtc.fhir.gwt.SampledData)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledData");
				}
				break;
			case "defaultValueSignature":
				if (value instanceof com.dtc.fhir.gwt.Signature || value == null) {
					instance.setDefaultValueSignature((com.dtc.fhir.gwt.Signature)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Signature");
				}
				break;
			case "defaultValueHumanName":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setDefaultValueHumanName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "defaultValueAddress":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setDefaultValueAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "defaultValueContactPoint":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					instance.setDefaultValueContactPoint((com.dtc.fhir.gwt.ContactPoint)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPoint");
				}
				break;
			case "defaultValueTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setDefaultValueTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "defaultValueMeta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setDefaultValueMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "meaningWhenMissing":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setMeaningWhenMissing((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "fixedBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setFixedBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "fixedInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setFixedInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "fixedDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setFixedDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "fixedBase64Binary":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setFixedBase64Binary((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "fixedInstant":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setFixedInstant((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "fixedString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setFixedString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "fixedDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setFixedDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "fixedUnsignedInt":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setFixedUnsignedInt((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "fixedPositiveInt":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setFixedPositiveInt((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "fixedMarkdown":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setFixedMarkdown((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "fixedAnnotation":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setFixedAnnotation((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "fixedAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setFixedAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "fixedIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setFixedIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "fixedCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setFixedCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "fixedCoding":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setFixedCoding((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "fixedQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setFixedQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "fixedRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setFixedRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "fixedPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setFixedPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "fixedRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setFixedRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "fixedReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setFixedReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "fixedSampledData":
				if (value instanceof com.dtc.fhir.gwt.SampledData || value == null) {
					instance.setFixedSampledData((com.dtc.fhir.gwt.SampledData)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledData");
				}
				break;
			case "fixedSignature":
				if (value instanceof com.dtc.fhir.gwt.Signature || value == null) {
					instance.setFixedSignature((com.dtc.fhir.gwt.Signature)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Signature");
				}
				break;
			case "fixedHumanName":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setFixedHumanName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "fixedAddress":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setFixedAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "fixedContactPoint":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					instance.setFixedContactPoint((com.dtc.fhir.gwt.ContactPoint)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPoint");
				}
				break;
			case "fixedTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setFixedTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "patternBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setPatternBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "patternInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setPatternInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "patternDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPatternDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "patternBase64Binary":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setPatternBase64Binary((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "patternInstant":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setPatternInstant((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "patternString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPatternString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "patternUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setPatternUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "patternDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setPatternDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "patternDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setPatternDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "patternTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setPatternTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "patternCode":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setPatternCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "patternOid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setPatternOid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "patternUuid":
				if (value instanceof com.dtc.fhir.gwt.Uuid || value == null) {
					instance.setPatternUuid((com.dtc.fhir.gwt.Uuid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uuid");
				}
				break;
			case "patternUnsignedInt":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setPatternUnsignedInt((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "patternPositiveInt":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setPatternPositiveInt((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "patternMarkdown":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setPatternMarkdown((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "patternAnnotation":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setPatternAnnotation((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "patternAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setPatternAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "patternIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setPatternIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "patternCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setPatternCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "patternCoding":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setPatternCoding((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "patternQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setPatternQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "patternRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setPatternRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "patternPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPatternPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "patternRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setPatternRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "patternReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatternReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "patternSampledData":
				if (value instanceof com.dtc.fhir.gwt.SampledData || value == null) {
					instance.setPatternSampledData((com.dtc.fhir.gwt.SampledData)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledData");
				}
				break;
			case "patternSignature":
				if (value instanceof com.dtc.fhir.gwt.Signature || value == null) {
					instance.setPatternSignature((com.dtc.fhir.gwt.Signature)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Signature");
				}
				break;
			case "patternHumanName":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setPatternHumanName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "patternAddress":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setPatternAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "patternContactPoint":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					instance.setPatternContactPoint((com.dtc.fhir.gwt.ContactPoint)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPoint");
				}
				break;
			case "patternTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setPatternTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "patternMeta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setPatternMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "exampleBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExampleBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "exampleInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setExampleInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "exampleDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setExampleDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "exampleBase64Binary":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setExampleBase64Binary((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "exampleInstant":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setExampleInstant((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "exampleString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setExampleString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "exampleUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setExampleUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "exampleDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setExampleDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "exampleDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setExampleDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "exampleTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setExampleTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "exampleCode":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setExampleCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "exampleOid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setExampleOid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "exampleUuid":
				if (value instanceof com.dtc.fhir.gwt.Uuid || value == null) {
					instance.setExampleUuid((com.dtc.fhir.gwt.Uuid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uuid");
				}
				break;
			case "exampleUnsignedInt":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setExampleUnsignedInt((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "examplePositiveInt":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setExamplePositiveInt((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "exampleMarkdown":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setExampleMarkdown((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "exampleAnnotation":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setExampleAnnotation((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "exampleAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setExampleAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "exampleIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setExampleIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "exampleCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setExampleCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "exampleCoding":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setExampleCoding((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "exampleQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setExampleQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "exampleRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setExampleRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "examplePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setExamplePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "exampleRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setExampleRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "exampleReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setExampleReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "exampleSampledData":
				if (value instanceof com.dtc.fhir.gwt.SampledData || value == null) {
					instance.setExampleSampledData((com.dtc.fhir.gwt.SampledData)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledData");
				}
				break;
			case "exampleSignature":
				if (value instanceof com.dtc.fhir.gwt.Signature || value == null) {
					instance.setExampleSignature((com.dtc.fhir.gwt.Signature)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Signature");
				}
				break;
			case "exampleHumanName":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setExampleHumanName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "exampleAddress":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setExampleAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "exampleContactPoint":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					instance.setExampleContactPoint((com.dtc.fhir.gwt.ContactPoint)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPoint");
				}
				break;
			case "exampleTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setExampleTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "exampleMeta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setExampleMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "minValueBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setMinValueBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "minValueInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setMinValueInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "minValueDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setMinValueDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "minValueBase64Binary":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setMinValueBase64Binary((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "minValueInstant":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setMinValueInstant((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "minValueString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setMinValueString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "minValueUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setMinValueUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "minValueDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setMinValueDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "minValueDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setMinValueDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "minValueTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setMinValueTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "minValueCode":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setMinValueCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "minValueOid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setMinValueOid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "minValueUuid":
				if (value instanceof com.dtc.fhir.gwt.Uuid || value == null) {
					instance.setMinValueUuid((com.dtc.fhir.gwt.Uuid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uuid");
				}
				break;
			case "minValueId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setMinValueId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "minValueUnsignedInt":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setMinValueUnsignedInt((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "minValuePositiveInt":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setMinValuePositiveInt((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "minValueMarkdown":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setMinValueMarkdown((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "minValueAnnotation":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setMinValueAnnotation((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "minValueAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setMinValueAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "minValueIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setMinValueIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "minValueCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMinValueCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "minValueCoding":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setMinValueCoding((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "minValueQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setMinValueQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "minValueRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setMinValueRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "minValuePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setMinValuePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "minValueRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setMinValueRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "minValueReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setMinValueReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "minValueSampledData":
				if (value instanceof com.dtc.fhir.gwt.SampledData || value == null) {
					instance.setMinValueSampledData((com.dtc.fhir.gwt.SampledData)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledData");
				}
				break;
			case "minValueSignature":
				if (value instanceof com.dtc.fhir.gwt.Signature || value == null) {
					instance.setMinValueSignature((com.dtc.fhir.gwt.Signature)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Signature");
				}
				break;
			case "minValueHumanName":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setMinValueHumanName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "minValueAddress":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setMinValueAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "minValueContactPoint":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					instance.setMinValueContactPoint((com.dtc.fhir.gwt.ContactPoint)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPoint");
				}
				break;
			case "minValueTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setMinValueTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "minValueMeta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMinValueMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "maxValueBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setMaxValueBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "maxValueInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setMaxValueInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "maxValueDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setMaxValueDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "maxValueBase64Binary":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setMaxValueBase64Binary((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "maxValueInstant":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setMaxValueInstant((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "maxValueString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setMaxValueString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "maxValueUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setMaxValueUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "maxValueDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setMaxValueDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "maxValueDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setMaxValueDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "maxValueTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setMaxValueTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "maxValueCode":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setMaxValueCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "maxValueOid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setMaxValueOid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "maxValueUuid":
				if (value instanceof com.dtc.fhir.gwt.Uuid || value == null) {
					instance.setMaxValueUuid((com.dtc.fhir.gwt.Uuid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uuid");
				}
				break;
			case "maxValueId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setMaxValueId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "maxValueUnsignedInt":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setMaxValueUnsignedInt((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "maxValuePositiveInt":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setMaxValuePositiveInt((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "maxValueMarkdown":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setMaxValueMarkdown((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "maxValueAnnotation":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setMaxValueAnnotation((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "maxValueAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setMaxValueAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "requirements":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setRequirements((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "label":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLabel((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "slicing":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinitionSlicing || value == null) {
					instance.setSlicing((com.dtc.fhir.gwt.ElementDefinitionSlicing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ElementDefinitionSlicing");
				}
				break;
			case "alias":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> aliasList = instance.getAlias();
					if (aliasList.size() < index + 1) {
						aliasList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						aliasList.set(Math.min(aliasList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "min":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setMin((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "max":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setMax((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "fixedUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setFixedUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "fixedDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setFixedDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "fixedTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setFixedTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "fixedCode":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setFixedCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "fixedOid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setFixedOid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "fixedUuid":
				if (value instanceof com.dtc.fhir.gwt.Uuid || value == null) {
					instance.setFixedUuid((com.dtc.fhir.gwt.Uuid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uuid");
				}
				break;
			case "fixedId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setFixedId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "fixedMeta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setFixedMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "patternId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setPatternId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "exampleId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setExampleId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "maxLength":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setMaxLength((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "isSummary":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setIsSummary((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "binding":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinitionBinding || value == null) {
					instance.setBinding((com.dtc.fhir.gwt.ElementDefinitionBinding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ElementDefinitionBinding");
				}
				break;
			case "maxValueIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setMaxValueIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "maxValueCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMaxValueCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "maxValueCoding":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setMaxValueCoding((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "maxValueQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setMaxValueQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "maxValueRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setMaxValueRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "maxValuePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setMaxValuePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "maxValueRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setMaxValueRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "maxValueReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setMaxValueReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "maxValueSampledData":
				if (value instanceof com.dtc.fhir.gwt.SampledData || value == null) {
					instance.setMaxValueSampledData((com.dtc.fhir.gwt.SampledData)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledData");
				}
				break;
			case "maxValueSignature":
				if (value instanceof com.dtc.fhir.gwt.Signature || value == null) {
					instance.setMaxValueSignature((com.dtc.fhir.gwt.Signature)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Signature");
				}
				break;
			case "maxValueHumanName":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setMaxValueHumanName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "maxValueAddress":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setMaxValueAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "maxValueContactPoint":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					instance.setMaxValueContactPoint((com.dtc.fhir.gwt.ContactPoint)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPoint");
				}
				break;
			case "maxValueTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setMaxValueTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "maxValueMeta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMaxValueMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "constraint":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinitionConstraint || value == null) {
					List<com.dtc.fhir.gwt.ElementDefinitionConstraint> constraintList = instance.getConstraint();
					if (constraintList.size() < index + 1) {
						constraintList.add((com.dtc.fhir.gwt.ElementDefinitionConstraint)value);
					} else {
						constraintList.set(Math.min(constraintList.size() - 1, index), (com.dtc.fhir.gwt.ElementDefinitionConstraint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "mustSupport":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setMustSupport((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "isModifier":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setIsModifier((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "mapping":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinitionMapping || value == null) {
					List<com.dtc.fhir.gwt.ElementDefinitionMapping> mappingList = instance.getMapping();
					if (mappingList.size() < index + 1) {
						mappingList.add((com.dtc.fhir.gwt.ElementDefinitionMapping)value);
					} else {
						mappingList.set(Math.min(mappingList.size() - 1, index), (com.dtc.fhir.gwt.ElementDefinitionMapping)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "condition":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					List<com.dtc.fhir.gwt.Id> conditionList = instance.getCondition();
					if (conditionList.size() < index + 1) {
						conditionList.add((com.dtc.fhir.gwt.Id)value);
					} else {
						conditionList.set(Math.min(conditionList.size() - 1, index), (com.dtc.fhir.gwt.Id)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "base":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinitionBase || value == null) {
					instance.setBase((com.dtc.fhir.gwt.ElementDefinitionBase)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ElementDefinitionBase");
				}
				break;
			case "comments":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setComments((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ElementDefinition");
			}
		}

		static Object get(com.dtc.fhir.gwt.ElementDefinition _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "short":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getShort();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setShort(_field_);
				}
				return _field_;}
			case "type":
				List<com.dtc.fhir.gwt.ElementDefinitionType> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.ElementDefinitionType());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "path":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPath();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPath(_field_);
				}
				return _field_;}
			case "defaultValueCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getDefaultValueCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setDefaultValueCodeableConcept(_field_);
				}
				return _field_;}
			case "code":
				List<com.dtc.fhir.gwt.Coding> codeList = _instance_.getCode();
				if (codeList.size() < _index_ + 1) {
					codeList.add(new com.dtc.fhir.gwt.Coding());
				}
				return codeList.get(Math.min(codeList.size() - 1, _index_));
			case "representation":
				List<com.dtc.fhir.gwt.PropertyRepresentation> representationList = _instance_.getRepresentation();
				if (representationList.size() < _index_ + 1) {
					representationList.add(new com.dtc.fhir.gwt.PropertyRepresentation());
				}
				return representationList.get(Math.min(representationList.size() - 1, _index_));
			case "definition":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getDefinition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setDefinition(_field_);
				}
				return _field_;}
			case "nameReference":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getNameReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setNameReference(_field_);
				}
				return _field_;}
			case "defaultValueBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getDefaultValueBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setDefaultValueBoolean(_field_);
				}
				return _field_;}
			case "defaultValueInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getDefaultValueInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setDefaultValueInteger(_field_);
				}
				return _field_;}
			case "defaultValueDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getDefaultValueDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setDefaultValueDecimal(_field_);
				}
				return _field_;}
			case "defaultValueBase64Binary":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getDefaultValueBase64Binary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setDefaultValueBase64Binary(_field_);
				}
				return _field_;}
			case "defaultValueInstant":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getDefaultValueInstant();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setDefaultValueInstant(_field_);
				}
				return _field_;}
			case "defaultValueString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDefaultValueString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDefaultValueString(_field_);
				}
				return _field_;}
			case "defaultValueUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getDefaultValueUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setDefaultValueUri(_field_);
				}
				return _field_;}
			case "defaultValueDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getDefaultValueDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setDefaultValueDate(_field_);
				}
				return _field_;}
			case "defaultValueDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDefaultValueDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDefaultValueDateTime(_field_);
				}
				return _field_;}
			case "defaultValueTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getDefaultValueTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setDefaultValueTime(_field_);
				}
				return _field_;}
			case "defaultValueCode":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getDefaultValueCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setDefaultValueCode(_field_);
				}
				return _field_;}
			case "defaultValueOid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getDefaultValueOid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setDefaultValueOid(_field_);
				}
				return _field_;}
			case "defaultValueUuid":
				{com.dtc.fhir.gwt.Uuid _field_ = _instance_.getDefaultValueUuid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uuid();
					_instance_.setDefaultValueUuid(_field_);
				}
				return _field_;}
			case "defaultValueId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getDefaultValueId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setDefaultValueId(_field_);
				}
				return _field_;}
			case "defaultValueUnsignedInt":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getDefaultValueUnsignedInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setDefaultValueUnsignedInt(_field_);
				}
				return _field_;}
			case "defaultValuePositiveInt":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getDefaultValuePositiveInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setDefaultValuePositiveInt(_field_);
				}
				return _field_;}
			case "defaultValueMarkdown":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getDefaultValueMarkdown();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setDefaultValueMarkdown(_field_);
				}
				return _field_;}
			case "defaultValueAnnotation":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getDefaultValueAnnotation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setDefaultValueAnnotation(_field_);
				}
				return _field_;}
			case "defaultValueAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getDefaultValueAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setDefaultValueAttachment(_field_);
				}
				return _field_;}
			case "defaultValueIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getDefaultValueIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setDefaultValueIdentifier(_field_);
				}
				return _field_;}
			case "defaultValueCoding":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getDefaultValueCoding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setDefaultValueCoding(_field_);
				}
				return _field_;}
			case "defaultValueQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getDefaultValueQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setDefaultValueQuantity(_field_);
				}
				return _field_;}
			case "defaultValueRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getDefaultValueRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setDefaultValueRange(_field_);
				}
				return _field_;}
			case "defaultValuePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getDefaultValuePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setDefaultValuePeriod(_field_);
				}
				return _field_;}
			case "defaultValueRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getDefaultValueRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setDefaultValueRatio(_field_);
				}
				return _field_;}
			case "defaultValueReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDefaultValueReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDefaultValueReference(_field_);
				}
				return _field_;}
			case "defaultValueSampledData":
				{com.dtc.fhir.gwt.SampledData _field_ = _instance_.getDefaultValueSampledData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledData();
					_instance_.setDefaultValueSampledData(_field_);
				}
				return _field_;}
			case "defaultValueSignature":
				{com.dtc.fhir.gwt.Signature _field_ = _instance_.getDefaultValueSignature();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Signature();
					_instance_.setDefaultValueSignature(_field_);
				}
				return _field_;}
			case "defaultValueHumanName":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getDefaultValueHumanName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setDefaultValueHumanName(_field_);
				}
				return _field_;}
			case "defaultValueAddress":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getDefaultValueAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setDefaultValueAddress(_field_);
				}
				return _field_;}
			case "defaultValueContactPoint":
				{com.dtc.fhir.gwt.ContactPoint _field_ = _instance_.getDefaultValueContactPoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPoint();
					_instance_.setDefaultValueContactPoint(_field_);
				}
				return _field_;}
			case "defaultValueTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getDefaultValueTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setDefaultValueTiming(_field_);
				}
				return _field_;}
			case "defaultValueMeta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getDefaultValueMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setDefaultValueMeta(_field_);
				}
				return _field_;}
			case "meaningWhenMissing":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getMeaningWhenMissing();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setMeaningWhenMissing(_field_);
				}
				return _field_;}
			case "fixedBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getFixedBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setFixedBoolean(_field_);
				}
				return _field_;}
			case "fixedInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getFixedInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setFixedInteger(_field_);
				}
				return _field_;}
			case "fixedDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getFixedDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setFixedDecimal(_field_);
				}
				return _field_;}
			case "fixedBase64Binary":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getFixedBase64Binary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setFixedBase64Binary(_field_);
				}
				return _field_;}
			case "fixedInstant":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getFixedInstant();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setFixedInstant(_field_);
				}
				return _field_;}
			case "fixedString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getFixedString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setFixedString(_field_);
				}
				return _field_;}
			case "fixedDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getFixedDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setFixedDateTime(_field_);
				}
				return _field_;}
			case "fixedUnsignedInt":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getFixedUnsignedInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setFixedUnsignedInt(_field_);
				}
				return _field_;}
			case "fixedPositiveInt":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getFixedPositiveInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setFixedPositiveInt(_field_);
				}
				return _field_;}
			case "fixedMarkdown":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getFixedMarkdown();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setFixedMarkdown(_field_);
				}
				return _field_;}
			case "fixedAnnotation":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getFixedAnnotation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setFixedAnnotation(_field_);
				}
				return _field_;}
			case "fixedAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getFixedAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setFixedAttachment(_field_);
				}
				return _field_;}
			case "fixedIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getFixedIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setFixedIdentifier(_field_);
				}
				return _field_;}
			case "fixedCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getFixedCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setFixedCodeableConcept(_field_);
				}
				return _field_;}
			case "fixedCoding":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getFixedCoding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setFixedCoding(_field_);
				}
				return _field_;}
			case "fixedQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getFixedQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setFixedQuantity(_field_);
				}
				return _field_;}
			case "fixedRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getFixedRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setFixedRange(_field_);
				}
				return _field_;}
			case "fixedPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getFixedPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setFixedPeriod(_field_);
				}
				return _field_;}
			case "fixedRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getFixedRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setFixedRatio(_field_);
				}
				return _field_;}
			case "fixedReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getFixedReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setFixedReference(_field_);
				}
				return _field_;}
			case "fixedSampledData":
				{com.dtc.fhir.gwt.SampledData _field_ = _instance_.getFixedSampledData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledData();
					_instance_.setFixedSampledData(_field_);
				}
				return _field_;}
			case "fixedSignature":
				{com.dtc.fhir.gwt.Signature _field_ = _instance_.getFixedSignature();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Signature();
					_instance_.setFixedSignature(_field_);
				}
				return _field_;}
			case "fixedHumanName":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getFixedHumanName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setFixedHumanName(_field_);
				}
				return _field_;}
			case "fixedAddress":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getFixedAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setFixedAddress(_field_);
				}
				return _field_;}
			case "fixedContactPoint":
				{com.dtc.fhir.gwt.ContactPoint _field_ = _instance_.getFixedContactPoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPoint();
					_instance_.setFixedContactPoint(_field_);
				}
				return _field_;}
			case "fixedTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getFixedTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setFixedTiming(_field_);
				}
				return _field_;}
			case "patternBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getPatternBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setPatternBoolean(_field_);
				}
				return _field_;}
			case "patternInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getPatternInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setPatternInteger(_field_);
				}
				return _field_;}
			case "patternDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPatternDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPatternDecimal(_field_);
				}
				return _field_;}
			case "patternBase64Binary":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getPatternBase64Binary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setPatternBase64Binary(_field_);
				}
				return _field_;}
			case "patternInstant":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getPatternInstant();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setPatternInstant(_field_);
				}
				return _field_;}
			case "patternString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPatternString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPatternString(_field_);
				}
				return _field_;}
			case "patternUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getPatternUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setPatternUri(_field_);
				}
				return _field_;}
			case "patternDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getPatternDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setPatternDate(_field_);
				}
				return _field_;}
			case "patternDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getPatternDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setPatternDateTime(_field_);
				}
				return _field_;}
			case "patternTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getPatternTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setPatternTime(_field_);
				}
				return _field_;}
			case "patternCode":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getPatternCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setPatternCode(_field_);
				}
				return _field_;}
			case "patternOid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getPatternOid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setPatternOid(_field_);
				}
				return _field_;}
			case "patternUuid":
				{com.dtc.fhir.gwt.Uuid _field_ = _instance_.getPatternUuid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uuid();
					_instance_.setPatternUuid(_field_);
				}
				return _field_;}
			case "patternUnsignedInt":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getPatternUnsignedInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setPatternUnsignedInt(_field_);
				}
				return _field_;}
			case "patternPositiveInt":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getPatternPositiveInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setPatternPositiveInt(_field_);
				}
				return _field_;}
			case "patternMarkdown":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getPatternMarkdown();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setPatternMarkdown(_field_);
				}
				return _field_;}
			case "patternAnnotation":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getPatternAnnotation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setPatternAnnotation(_field_);
				}
				return _field_;}
			case "patternAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getPatternAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setPatternAttachment(_field_);
				}
				return _field_;}
			case "patternIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getPatternIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setPatternIdentifier(_field_);
				}
				return _field_;}
			case "patternCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getPatternCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setPatternCodeableConcept(_field_);
				}
				return _field_;}
			case "patternCoding":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getPatternCoding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setPatternCoding(_field_);
				}
				return _field_;}
			case "patternQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getPatternQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setPatternQuantity(_field_);
				}
				return _field_;}
			case "patternRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getPatternRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setPatternRange(_field_);
				}
				return _field_;}
			case "patternPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPatternPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPatternPeriod(_field_);
				}
				return _field_;}
			case "patternRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getPatternRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setPatternRatio(_field_);
				}
				return _field_;}
			case "patternReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatternReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatternReference(_field_);
				}
				return _field_;}
			case "patternSampledData":
				{com.dtc.fhir.gwt.SampledData _field_ = _instance_.getPatternSampledData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledData();
					_instance_.setPatternSampledData(_field_);
				}
				return _field_;}
			case "patternSignature":
				{com.dtc.fhir.gwt.Signature _field_ = _instance_.getPatternSignature();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Signature();
					_instance_.setPatternSignature(_field_);
				}
				return _field_;}
			case "patternHumanName":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getPatternHumanName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setPatternHumanName(_field_);
				}
				return _field_;}
			case "patternAddress":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getPatternAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setPatternAddress(_field_);
				}
				return _field_;}
			case "patternContactPoint":
				{com.dtc.fhir.gwt.ContactPoint _field_ = _instance_.getPatternContactPoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPoint();
					_instance_.setPatternContactPoint(_field_);
				}
				return _field_;}
			case "patternTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getPatternTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setPatternTiming(_field_);
				}
				return _field_;}
			case "patternMeta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getPatternMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setPatternMeta(_field_);
				}
				return _field_;}
			case "exampleBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExampleBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExampleBoolean(_field_);
				}
				return _field_;}
			case "exampleInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getExampleInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setExampleInteger(_field_);
				}
				return _field_;}
			case "exampleDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getExampleDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setExampleDecimal(_field_);
				}
				return _field_;}
			case "exampleBase64Binary":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getExampleBase64Binary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setExampleBase64Binary(_field_);
				}
				return _field_;}
			case "exampleInstant":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getExampleInstant();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setExampleInstant(_field_);
				}
				return _field_;}
			case "exampleString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getExampleString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setExampleString(_field_);
				}
				return _field_;}
			case "exampleUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getExampleUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setExampleUri(_field_);
				}
				return _field_;}
			case "exampleDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getExampleDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setExampleDate(_field_);
				}
				return _field_;}
			case "exampleDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getExampleDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setExampleDateTime(_field_);
				}
				return _field_;}
			case "exampleTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getExampleTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setExampleTime(_field_);
				}
				return _field_;}
			case "exampleCode":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getExampleCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setExampleCode(_field_);
				}
				return _field_;}
			case "exampleOid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getExampleOid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setExampleOid(_field_);
				}
				return _field_;}
			case "exampleUuid":
				{com.dtc.fhir.gwt.Uuid _field_ = _instance_.getExampleUuid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uuid();
					_instance_.setExampleUuid(_field_);
				}
				return _field_;}
			case "exampleUnsignedInt":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getExampleUnsignedInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setExampleUnsignedInt(_field_);
				}
				return _field_;}
			case "examplePositiveInt":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getExamplePositiveInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setExamplePositiveInt(_field_);
				}
				return _field_;}
			case "exampleMarkdown":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getExampleMarkdown();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setExampleMarkdown(_field_);
				}
				return _field_;}
			case "exampleAnnotation":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getExampleAnnotation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setExampleAnnotation(_field_);
				}
				return _field_;}
			case "exampleAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getExampleAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setExampleAttachment(_field_);
				}
				return _field_;}
			case "exampleIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getExampleIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setExampleIdentifier(_field_);
				}
				return _field_;}
			case "exampleCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getExampleCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setExampleCodeableConcept(_field_);
				}
				return _field_;}
			case "exampleCoding":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getExampleCoding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setExampleCoding(_field_);
				}
				return _field_;}
			case "exampleQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getExampleQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setExampleQuantity(_field_);
				}
				return _field_;}
			case "exampleRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getExampleRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setExampleRange(_field_);
				}
				return _field_;}
			case "examplePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getExamplePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setExamplePeriod(_field_);
				}
				return _field_;}
			case "exampleRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getExampleRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setExampleRatio(_field_);
				}
				return _field_;}
			case "exampleReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getExampleReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setExampleReference(_field_);
				}
				return _field_;}
			case "exampleSampledData":
				{com.dtc.fhir.gwt.SampledData _field_ = _instance_.getExampleSampledData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledData();
					_instance_.setExampleSampledData(_field_);
				}
				return _field_;}
			case "exampleSignature":
				{com.dtc.fhir.gwt.Signature _field_ = _instance_.getExampleSignature();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Signature();
					_instance_.setExampleSignature(_field_);
				}
				return _field_;}
			case "exampleHumanName":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getExampleHumanName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setExampleHumanName(_field_);
				}
				return _field_;}
			case "exampleAddress":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getExampleAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setExampleAddress(_field_);
				}
				return _field_;}
			case "exampleContactPoint":
				{com.dtc.fhir.gwt.ContactPoint _field_ = _instance_.getExampleContactPoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPoint();
					_instance_.setExampleContactPoint(_field_);
				}
				return _field_;}
			case "exampleTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getExampleTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setExampleTiming(_field_);
				}
				return _field_;}
			case "exampleMeta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getExampleMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setExampleMeta(_field_);
				}
				return _field_;}
			case "minValueBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getMinValueBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setMinValueBoolean(_field_);
				}
				return _field_;}
			case "minValueInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getMinValueInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setMinValueInteger(_field_);
				}
				return _field_;}
			case "minValueDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getMinValueDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setMinValueDecimal(_field_);
				}
				return _field_;}
			case "minValueBase64Binary":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getMinValueBase64Binary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setMinValueBase64Binary(_field_);
				}
				return _field_;}
			case "minValueInstant":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getMinValueInstant();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setMinValueInstant(_field_);
				}
				return _field_;}
			case "minValueString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getMinValueString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setMinValueString(_field_);
				}
				return _field_;}
			case "minValueUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getMinValueUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setMinValueUri(_field_);
				}
				return _field_;}
			case "minValueDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getMinValueDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setMinValueDate(_field_);
				}
				return _field_;}
			case "minValueDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getMinValueDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setMinValueDateTime(_field_);
				}
				return _field_;}
			case "minValueTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getMinValueTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setMinValueTime(_field_);
				}
				return _field_;}
			case "minValueCode":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getMinValueCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setMinValueCode(_field_);
				}
				return _field_;}
			case "minValueOid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getMinValueOid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setMinValueOid(_field_);
				}
				return _field_;}
			case "minValueUuid":
				{com.dtc.fhir.gwt.Uuid _field_ = _instance_.getMinValueUuid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uuid();
					_instance_.setMinValueUuid(_field_);
				}
				return _field_;}
			case "minValueId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getMinValueId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setMinValueId(_field_);
				}
				return _field_;}
			case "minValueUnsignedInt":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getMinValueUnsignedInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setMinValueUnsignedInt(_field_);
				}
				return _field_;}
			case "minValuePositiveInt":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getMinValuePositiveInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setMinValuePositiveInt(_field_);
				}
				return _field_;}
			case "minValueMarkdown":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getMinValueMarkdown();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setMinValueMarkdown(_field_);
				}
				return _field_;}
			case "minValueAnnotation":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getMinValueAnnotation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setMinValueAnnotation(_field_);
				}
				return _field_;}
			case "minValueAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getMinValueAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setMinValueAttachment(_field_);
				}
				return _field_;}
			case "minValueIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getMinValueIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setMinValueIdentifier(_field_);
				}
				return _field_;}
			case "minValueCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMinValueCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMinValueCodeableConcept(_field_);
				}
				return _field_;}
			case "minValueCoding":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getMinValueCoding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setMinValueCoding(_field_);
				}
				return _field_;}
			case "minValueQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getMinValueQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setMinValueQuantity(_field_);
				}
				return _field_;}
			case "minValueRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getMinValueRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setMinValueRange(_field_);
				}
				return _field_;}
			case "minValuePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getMinValuePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setMinValuePeriod(_field_);
				}
				return _field_;}
			case "minValueRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getMinValueRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setMinValueRatio(_field_);
				}
				return _field_;}
			case "minValueReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getMinValueReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setMinValueReference(_field_);
				}
				return _field_;}
			case "minValueSampledData":
				{com.dtc.fhir.gwt.SampledData _field_ = _instance_.getMinValueSampledData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledData();
					_instance_.setMinValueSampledData(_field_);
				}
				return _field_;}
			case "minValueSignature":
				{com.dtc.fhir.gwt.Signature _field_ = _instance_.getMinValueSignature();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Signature();
					_instance_.setMinValueSignature(_field_);
				}
				return _field_;}
			case "minValueHumanName":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getMinValueHumanName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setMinValueHumanName(_field_);
				}
				return _field_;}
			case "minValueAddress":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getMinValueAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setMinValueAddress(_field_);
				}
				return _field_;}
			case "minValueContactPoint":
				{com.dtc.fhir.gwt.ContactPoint _field_ = _instance_.getMinValueContactPoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPoint();
					_instance_.setMinValueContactPoint(_field_);
				}
				return _field_;}
			case "minValueTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getMinValueTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setMinValueTiming(_field_);
				}
				return _field_;}
			case "minValueMeta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMinValueMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMinValueMeta(_field_);
				}
				return _field_;}
			case "maxValueBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getMaxValueBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setMaxValueBoolean(_field_);
				}
				return _field_;}
			case "maxValueInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getMaxValueInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setMaxValueInteger(_field_);
				}
				return _field_;}
			case "maxValueDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getMaxValueDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setMaxValueDecimal(_field_);
				}
				return _field_;}
			case "maxValueBase64Binary":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getMaxValueBase64Binary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setMaxValueBase64Binary(_field_);
				}
				return _field_;}
			case "maxValueInstant":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getMaxValueInstant();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setMaxValueInstant(_field_);
				}
				return _field_;}
			case "maxValueString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getMaxValueString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setMaxValueString(_field_);
				}
				return _field_;}
			case "maxValueUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getMaxValueUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setMaxValueUri(_field_);
				}
				return _field_;}
			case "maxValueDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getMaxValueDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setMaxValueDate(_field_);
				}
				return _field_;}
			case "maxValueDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getMaxValueDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setMaxValueDateTime(_field_);
				}
				return _field_;}
			case "maxValueTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getMaxValueTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setMaxValueTime(_field_);
				}
				return _field_;}
			case "maxValueCode":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getMaxValueCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setMaxValueCode(_field_);
				}
				return _field_;}
			case "maxValueOid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getMaxValueOid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setMaxValueOid(_field_);
				}
				return _field_;}
			case "maxValueUuid":
				{com.dtc.fhir.gwt.Uuid _field_ = _instance_.getMaxValueUuid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uuid();
					_instance_.setMaxValueUuid(_field_);
				}
				return _field_;}
			case "maxValueId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getMaxValueId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setMaxValueId(_field_);
				}
				return _field_;}
			case "maxValueUnsignedInt":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getMaxValueUnsignedInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setMaxValueUnsignedInt(_field_);
				}
				return _field_;}
			case "maxValuePositiveInt":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getMaxValuePositiveInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setMaxValuePositiveInt(_field_);
				}
				return _field_;}
			case "maxValueMarkdown":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getMaxValueMarkdown();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setMaxValueMarkdown(_field_);
				}
				return _field_;}
			case "maxValueAnnotation":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getMaxValueAnnotation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setMaxValueAnnotation(_field_);
				}
				return _field_;}
			case "maxValueAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getMaxValueAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setMaxValueAttachment(_field_);
				}
				return _field_;}
			case "requirements":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getRequirements();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setRequirements(_field_);
				}
				return _field_;}
			case "label":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLabel();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLabel(_field_);
				}
				return _field_;}
			case "slicing":
				{com.dtc.fhir.gwt.ElementDefinitionSlicing _field_ = _instance_.getSlicing();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ElementDefinitionSlicing();
					_instance_.setSlicing(_field_);
				}
				return _field_;}
			case "alias":
				List<com.dtc.fhir.gwt.StringDt> aliasList = _instance_.getAlias();
				if (aliasList.size() < _index_ + 1) {
					aliasList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return aliasList.get(Math.min(aliasList.size() - 1, _index_));
			case "min":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getMin();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setMin(_field_);
				}
				return _field_;}
			case "max":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getMax();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setMax(_field_);
				}
				return _field_;}
			case "fixedUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getFixedUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setFixedUri(_field_);
				}
				return _field_;}
			case "fixedDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getFixedDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setFixedDate(_field_);
				}
				return _field_;}
			case "fixedTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getFixedTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setFixedTime(_field_);
				}
				return _field_;}
			case "fixedCode":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getFixedCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setFixedCode(_field_);
				}
				return _field_;}
			case "fixedOid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getFixedOid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setFixedOid(_field_);
				}
				return _field_;}
			case "fixedUuid":
				{com.dtc.fhir.gwt.Uuid _field_ = _instance_.getFixedUuid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uuid();
					_instance_.setFixedUuid(_field_);
				}
				return _field_;}
			case "fixedId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getFixedId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setFixedId(_field_);
				}
				return _field_;}
			case "fixedMeta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getFixedMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setFixedMeta(_field_);
				}
				return _field_;}
			case "patternId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getPatternId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setPatternId(_field_);
				}
				return _field_;}
			case "exampleId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getExampleId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setExampleId(_field_);
				}
				return _field_;}
			case "maxLength":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getMaxLength();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setMaxLength(_field_);
				}
				return _field_;}
			case "isSummary":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getIsSummary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setIsSummary(_field_);
				}
				return _field_;}
			case "binding":
				{com.dtc.fhir.gwt.ElementDefinitionBinding _field_ = _instance_.getBinding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ElementDefinitionBinding();
					_instance_.setBinding(_field_);
				}
				return _field_;}
			case "maxValueIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getMaxValueIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setMaxValueIdentifier(_field_);
				}
				return _field_;}
			case "maxValueCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMaxValueCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMaxValueCodeableConcept(_field_);
				}
				return _field_;}
			case "maxValueCoding":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getMaxValueCoding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setMaxValueCoding(_field_);
				}
				return _field_;}
			case "maxValueQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getMaxValueQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setMaxValueQuantity(_field_);
				}
				return _field_;}
			case "maxValueRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getMaxValueRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setMaxValueRange(_field_);
				}
				return _field_;}
			case "maxValuePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getMaxValuePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setMaxValuePeriod(_field_);
				}
				return _field_;}
			case "maxValueRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getMaxValueRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setMaxValueRatio(_field_);
				}
				return _field_;}
			case "maxValueReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getMaxValueReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setMaxValueReference(_field_);
				}
				return _field_;}
			case "maxValueSampledData":
				{com.dtc.fhir.gwt.SampledData _field_ = _instance_.getMaxValueSampledData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledData();
					_instance_.setMaxValueSampledData(_field_);
				}
				return _field_;}
			case "maxValueSignature":
				{com.dtc.fhir.gwt.Signature _field_ = _instance_.getMaxValueSignature();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Signature();
					_instance_.setMaxValueSignature(_field_);
				}
				return _field_;}
			case "maxValueHumanName":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getMaxValueHumanName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setMaxValueHumanName(_field_);
				}
				return _field_;}
			case "maxValueAddress":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getMaxValueAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setMaxValueAddress(_field_);
				}
				return _field_;}
			case "maxValueContactPoint":
				{com.dtc.fhir.gwt.ContactPoint _field_ = _instance_.getMaxValueContactPoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPoint();
					_instance_.setMaxValueContactPoint(_field_);
				}
				return _field_;}
			case "maxValueTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getMaxValueTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setMaxValueTiming(_field_);
				}
				return _field_;}
			case "maxValueMeta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMaxValueMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMaxValueMeta(_field_);
				}
				return _field_;}
			case "constraint":
				List<com.dtc.fhir.gwt.ElementDefinitionConstraint> constraintList = _instance_.getConstraint();
				if (constraintList.size() < _index_ + 1) {
					constraintList.add(new com.dtc.fhir.gwt.ElementDefinitionConstraint());
				}
				return constraintList.get(Math.min(constraintList.size() - 1, _index_));
			case "mustSupport":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getMustSupport();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setMustSupport(_field_);
				}
				return _field_;}
			case "isModifier":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getIsModifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setIsModifier(_field_);
				}
				return _field_;}
			case "mapping":
				List<com.dtc.fhir.gwt.ElementDefinitionMapping> mappingList = _instance_.getMapping();
				if (mappingList.size() < _index_ + 1) {
					mappingList.add(new com.dtc.fhir.gwt.ElementDefinitionMapping());
				}
				return mappingList.get(Math.min(mappingList.size() - 1, _index_));
			case "condition":
				List<com.dtc.fhir.gwt.Id> conditionList = _instance_.getCondition();
				if (conditionList.size() < _index_ + 1) {
					conditionList.add(new com.dtc.fhir.gwt.Id());
				}
				return conditionList.get(Math.min(conditionList.size() - 1, _index_));
			case "base":
				{com.dtc.fhir.gwt.ElementDefinitionBase _field_ = _instance_.getBase();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ElementDefinitionBase();
					_instance_.setBase(_field_);
				}
				return _field_;}
			case "comments":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getComments();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setComments(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ElementDefinition");
			}
		}
	}
	private static class SetElementDefinitionBase {
		static void set(com.dtc.fhir.gwt.ElementDefinitionBase instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ElementDefinitionBase instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "path":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPath((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "min":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setMin((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "max":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setMax((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ElementDefinitionBase");
			}
		}

		static Object get(com.dtc.fhir.gwt.ElementDefinitionBase _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "path":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPath();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPath(_field_);
				}
				return _field_;}
			case "min":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getMin();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setMin(_field_);
				}
				return _field_;}
			case "max":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getMax();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setMax(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ElementDefinitionBase");
			}
		}
	}
	private static class SetElementDefinitionBinding {
		static void set(com.dtc.fhir.gwt.ElementDefinitionBinding instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ElementDefinitionBinding instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "valueSetUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setValueSetUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "valueSetReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setValueSetReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "strength":
				if (value instanceof com.dtc.fhir.gwt.BindingStrength || value == null) {
					instance.setStrength((com.dtc.fhir.gwt.BindingStrength)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BindingStrength");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ElementDefinitionBinding");
			}
		}

		static Object get(com.dtc.fhir.gwt.ElementDefinitionBinding _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "valueSetUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getValueSetUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setValueSetUri(_field_);
				}
				return _field_;}
			case "valueSetReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getValueSetReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setValueSetReference(_field_);
				}
				return _field_;}
			case "strength":
				{com.dtc.fhir.gwt.BindingStrength _field_ = _instance_.getStrength();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BindingStrength();
					_instance_.setStrength(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ElementDefinitionBinding");
			}
		}
	}
	private static class SetElementDefinitionConstraint {
		static void set(com.dtc.fhir.gwt.ElementDefinitionConstraint instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ElementDefinitionConstraint instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "key":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setKey((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "severity":
				if (value instanceof com.dtc.fhir.gwt.ConstraintSeverity || value == null) {
					instance.setSeverity((com.dtc.fhir.gwt.ConstraintSeverity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ConstraintSeverity");
				}
				break;
			case "requirements":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRequirements((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "xpath":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setXpath((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "human":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setHuman((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ElementDefinitionConstraint");
			}
		}

		static Object get(com.dtc.fhir.gwt.ElementDefinitionConstraint _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "key":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getKey();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setKey(_field_);
				}
				return _field_;}
			case "severity":
				{com.dtc.fhir.gwt.ConstraintSeverity _field_ = _instance_.getSeverity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ConstraintSeverity();
					_instance_.setSeverity(_field_);
				}
				return _field_;}
			case "requirements":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRequirements();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRequirements(_field_);
				}
				return _field_;}
			case "xpath":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getXpath();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setXpath(_field_);
				}
				return _field_;}
			case "human":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getHuman();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setHuman(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ElementDefinitionConstraint");
			}
		}
	}
	private static class SetElementDefinitionMapping {
		static void set(com.dtc.fhir.gwt.ElementDefinitionMapping instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ElementDefinitionMapping instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "map":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setMap((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identity":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setIdentity((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ElementDefinitionMapping");
			}
		}

		static Object get(com.dtc.fhir.gwt.ElementDefinitionMapping _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "map":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getMap();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setMap(_field_);
				}
				return _field_;}
			case "identity":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getIdentity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setIdentity(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ElementDefinitionMapping");
			}
		}
	}
	private static class SetElementDefinitionSlicing {
		static void set(com.dtc.fhir.gwt.ElementDefinitionSlicing instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ElementDefinitionSlicing instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "discriminator":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> discriminatorList = instance.getDiscriminator();
					if (discriminatorList.size() < index + 1) {
						discriminatorList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						discriminatorList.set(Math.min(discriminatorList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "ordered":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setOrdered((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "rules":
				if (value instanceof com.dtc.fhir.gwt.SlicingRules || value == null) {
					instance.setRules((com.dtc.fhir.gwt.SlicingRules)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SlicingRules");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ElementDefinitionSlicing");
			}
		}

		static Object get(com.dtc.fhir.gwt.ElementDefinitionSlicing _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "discriminator":
				List<com.dtc.fhir.gwt.StringDt> discriminatorList = _instance_.getDiscriminator();
				if (discriminatorList.size() < _index_ + 1) {
					discriminatorList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return discriminatorList.get(Math.min(discriminatorList.size() - 1, _index_));
			case "ordered":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getOrdered();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setOrdered(_field_);
				}
				return _field_;}
			case "rules":
				{com.dtc.fhir.gwt.SlicingRules _field_ = _instance_.getRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SlicingRules();
					_instance_.setRules(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ElementDefinitionSlicing");
			}
		}
	}
	private static class SetElementDefinitionType {
		static void set(com.dtc.fhir.gwt.ElementDefinitionType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ElementDefinitionType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "aggregation":
				if (value instanceof com.dtc.fhir.gwt.AggregationMode || value == null) {
					List<com.dtc.fhir.gwt.AggregationMode> aggregationList = instance.getAggregation();
					if (aggregationList.size() < index + 1) {
						aggregationList.add((com.dtc.fhir.gwt.AggregationMode)value);
					} else {
						aggregationList.set(Math.min(aggregationList.size() - 1, index), (com.dtc.fhir.gwt.AggregationMode)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "profile":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					List<com.dtc.fhir.gwt.Uri> profileList = instance.getProfile();
					if (profileList.size() < index + 1) {
						profileList.add((com.dtc.fhir.gwt.Uri)value);
					} else {
						profileList.set(Math.min(profileList.size() - 1, index), (com.dtc.fhir.gwt.Uri)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ElementDefinitionType");
			}
		}

		static Object get(com.dtc.fhir.gwt.ElementDefinitionType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "aggregation":
				List<com.dtc.fhir.gwt.AggregationMode> aggregationList = _instance_.getAggregation();
				if (aggregationList.size() < _index_ + 1) {
					aggregationList.add(new com.dtc.fhir.gwt.AggregationMode());
				}
				return aggregationList.get(Math.min(aggregationList.size() - 1, _index_));
			case "profile":
				List<com.dtc.fhir.gwt.Uri> profileList = _instance_.getProfile();
				if (profileList.size() < _index_ + 1) {
					profileList.add(new com.dtc.fhir.gwt.Uri());
				}
				return profileList.get(Math.min(profileList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ElementDefinitionType");
			}
		}
	}
	private static class SetEligibilityRequest {
		static void set(com.dtc.fhir.gwt.EligibilityRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EligibilityRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "provider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EligibilityRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.EligibilityRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "provider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProvider(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EligibilityRequest");
			}
		}
	}
	private static class SetEligibilityResponse {
		static void set(com.dtc.fhir.gwt.EligibilityResponse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EligibilityResponse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "requestOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "requestProvider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "disposition":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisposition((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EligibilityResponse");
			}
		}

		static Object get(com.dtc.fhir.gwt.EligibilityResponse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "outcome":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "requestOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestOrganization(_field_);
				}
				return _field_;}
			case "requestProvider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestProvider(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "disposition":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisposition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisposition(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EligibilityResponse");
			}
		}
	}
	private static class SetEncounter {
		static void set(com.dtc.fhir.gwt.Encounter instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Encounter instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "length":
				if (value instanceof com.dtc.fhir.gwt.Duration || value == null) {
					instance.setLength((com.dtc.fhir.gwt.Duration)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Duration");
				}
				break;
			case "location":
				if (value instanceof com.dtc.fhir.gwt.EncounterLocation || value == null) {
					List<com.dtc.fhir.gwt.EncounterLocation> locationList = instance.getLocation();
					if (locationList.size() < index + 1) {
						locationList.add((com.dtc.fhir.gwt.EncounterLocation)value);
					} else {
						locationList.set(Math.min(locationList.size() - 1, index), (com.dtc.fhir.gwt.EncounterLocation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "priority":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setPriority((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonList = instance.getReason();
					if (reasonList.size() < index + 1) {
						reasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonList.set(Math.min(reasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.EncounterState || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.EncounterState)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EncounterState");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "participant":
				if (value instanceof com.dtc.fhir.gwt.EncounterParticipant || value == null) {
					List<com.dtc.fhir.gwt.EncounterParticipant> participantList = instance.getParticipant();
					if (participantList.size() < index + 1) {
						participantList.add((com.dtc.fhir.gwt.EncounterParticipant)value);
					} else {
						participantList.set(Math.min(participantList.size() - 1, index), (com.dtc.fhir.gwt.EncounterParticipant)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "indication":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> indicationList = instance.getIndication();
					if (indicationList.size() < index + 1) {
						indicationList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						indicationList.set(Math.min(indicationList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "statusHistory":
				if (value instanceof com.dtc.fhir.gwt.EncounterStatusHistory || value == null) {
					List<com.dtc.fhir.gwt.EncounterStatusHistory> statusHistoryList = instance.getStatusHistory();
					if (statusHistoryList.size() < index + 1) {
						statusHistoryList.add((com.dtc.fhir.gwt.EncounterStatusHistory)value);
					} else {
						statusHistoryList.set(Math.min(statusHistoryList.size() - 1, index), (com.dtc.fhir.gwt.EncounterStatusHistory)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "episodeOfCare":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> episodeOfCareList = instance.getEpisodeOfCare();
					if (episodeOfCareList.size() < index + 1) {
						episodeOfCareList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						episodeOfCareList.set(Math.min(episodeOfCareList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "incomingReferral":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> incomingReferralList = instance.getIncomingReferral();
					if (incomingReferralList.size() < index + 1) {
						incomingReferralList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						incomingReferralList.set(Math.min(incomingReferralList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "appointment":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAppointment((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "hospitalization":
				if (value instanceof com.dtc.fhir.gwt.EncounterHospitalization || value == null) {
					instance.setHospitalization((com.dtc.fhir.gwt.EncounterHospitalization)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EncounterHospitalization");
				}
				break;
			case "serviceProvider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setServiceProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "clazz":
				if (value instanceof com.dtc.fhir.gwt.EncounterClass || value == null) {
					instance.setClazz((com.dtc.fhir.gwt.EncounterClass)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EncounterClass");
				}
				break;
			case "partOf":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPartOf((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Encounter");
			}
		}

		static Object get(com.dtc.fhir.gwt.Encounter _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "length":
				{com.dtc.fhir.gwt.Duration _field_ = _instance_.getLength();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Duration();
					_instance_.setLength(_field_);
				}
				return _field_;}
			case "location":
				List<com.dtc.fhir.gwt.EncounterLocation> locationList = _instance_.getLocation();
				if (locationList.size() < _index_ + 1) {
					locationList.add(new com.dtc.fhir.gwt.EncounterLocation());
				}
				return locationList.get(Math.min(locationList.size() - 1, _index_));
			case "priority":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getPriority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setPriority(_field_);
				}
				return _field_;}
			case "type":
				List<com.dtc.fhir.gwt.CodeableConcept> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "reason":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonList = _instance_.getReason();
				if (reasonList.size() < _index_ + 1) {
					reasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonList.get(Math.min(reasonList.size() - 1, _index_));
			case "status":
				{com.dtc.fhir.gwt.EncounterState _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.EncounterState();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "participant":
				List<com.dtc.fhir.gwt.EncounterParticipant> participantList = _instance_.getParticipant();
				if (participantList.size() < _index_ + 1) {
					participantList.add(new com.dtc.fhir.gwt.EncounterParticipant());
				}
				return participantList.get(Math.min(participantList.size() - 1, _index_));
			case "indication":
				List<com.dtc.fhir.gwt.Reference> indicationList = _instance_.getIndication();
				if (indicationList.size() < _index_ + 1) {
					indicationList.add(new com.dtc.fhir.gwt.Reference());
				}
				return indicationList.get(Math.min(indicationList.size() - 1, _index_));
			case "statusHistory":
				List<com.dtc.fhir.gwt.EncounterStatusHistory> statusHistoryList = _instance_.getStatusHistory();
				if (statusHistoryList.size() < _index_ + 1) {
					statusHistoryList.add(new com.dtc.fhir.gwt.EncounterStatusHistory());
				}
				return statusHistoryList.get(Math.min(statusHistoryList.size() - 1, _index_));
			case "episodeOfCare":
				List<com.dtc.fhir.gwt.Reference> episodeOfCareList = _instance_.getEpisodeOfCare();
				if (episodeOfCareList.size() < _index_ + 1) {
					episodeOfCareList.add(new com.dtc.fhir.gwt.Reference());
				}
				return episodeOfCareList.get(Math.min(episodeOfCareList.size() - 1, _index_));
			case "incomingReferral":
				List<com.dtc.fhir.gwt.Reference> incomingReferralList = _instance_.getIncomingReferral();
				if (incomingReferralList.size() < _index_ + 1) {
					incomingReferralList.add(new com.dtc.fhir.gwt.Reference());
				}
				return incomingReferralList.get(Math.min(incomingReferralList.size() - 1, _index_));
			case "appointment":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAppointment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAppointment(_field_);
				}
				return _field_;}
			case "hospitalization":
				{com.dtc.fhir.gwt.EncounterHospitalization _field_ = _instance_.getHospitalization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.EncounterHospitalization();
					_instance_.setHospitalization(_field_);
				}
				return _field_;}
			case "serviceProvider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getServiceProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setServiceProvider(_field_);
				}
				return _field_;}
			case "clazz":
				{com.dtc.fhir.gwt.EncounterClass _field_ = _instance_.getClazz();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.EncounterClass();
					_instance_.setClazz(_field_);
				}
				return _field_;}
			case "partOf":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPartOf();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPartOf(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Encounter");
			}
		}
	}
	private static class SetEncounterClass {
		static void set(com.dtc.fhir.gwt.EncounterClass instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EncounterClass instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.EncounterClassList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.EncounterClassList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EncounterClassList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EncounterClass");
			}
		}

		static Object get(com.dtc.fhir.gwt.EncounterClass _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.EncounterClassList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EncounterClass");
			}
		}
	}
	private static class SetEncounterHospitalization {
		static void set(com.dtc.fhir.gwt.EncounterHospitalization instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EncounterHospitalization instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "destination":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDestination((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "origin":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrigin((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "preAdmissionIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setPreAdmissionIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "admitSource":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAdmitSource((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "admittingDiagnosis":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> admittingDiagnosisList = instance.getAdmittingDiagnosis();
					if (admittingDiagnosisList.size() < index + 1) {
						admittingDiagnosisList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						admittingDiagnosisList.set(Math.min(admittingDiagnosisList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reAdmission":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReAdmission((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "dietPreference":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> dietPreferenceList = instance.getDietPreference();
					if (dietPreferenceList.size() < index + 1) {
						dietPreferenceList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						dietPreferenceList.set(Math.min(dietPreferenceList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "specialCourtesy":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> specialCourtesyList = instance.getSpecialCourtesy();
					if (specialCourtesyList.size() < index + 1) {
						specialCourtesyList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						specialCourtesyList.set(Math.min(specialCourtesyList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "specialArrangement":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> specialArrangementList = instance.getSpecialArrangement();
					if (specialArrangementList.size() < index + 1) {
						specialArrangementList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						specialArrangementList.set(Math.min(specialArrangementList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "dischargeDisposition":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setDischargeDisposition((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "dischargeDiagnosis":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> dischargeDiagnosisList = instance.getDischargeDiagnosis();
					if (dischargeDiagnosisList.size() < index + 1) {
						dischargeDiagnosisList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						dischargeDiagnosisList.set(Math.min(dischargeDiagnosisList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EncounterHospitalization");
			}
		}

		static Object get(com.dtc.fhir.gwt.EncounterHospitalization _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "destination":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDestination();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDestination(_field_);
				}
				return _field_;}
			case "origin":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrigin();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrigin(_field_);
				}
				return _field_;}
			case "preAdmissionIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getPreAdmissionIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setPreAdmissionIdentifier(_field_);
				}
				return _field_;}
			case "admitSource":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAdmitSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAdmitSource(_field_);
				}
				return _field_;}
			case "admittingDiagnosis":
				List<com.dtc.fhir.gwt.Reference> admittingDiagnosisList = _instance_.getAdmittingDiagnosis();
				if (admittingDiagnosisList.size() < _index_ + 1) {
					admittingDiagnosisList.add(new com.dtc.fhir.gwt.Reference());
				}
				return admittingDiagnosisList.get(Math.min(admittingDiagnosisList.size() - 1, _index_));
			case "reAdmission":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReAdmission();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReAdmission(_field_);
				}
				return _field_;}
			case "dietPreference":
				List<com.dtc.fhir.gwt.CodeableConcept> dietPreferenceList = _instance_.getDietPreference();
				if (dietPreferenceList.size() < _index_ + 1) {
					dietPreferenceList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return dietPreferenceList.get(Math.min(dietPreferenceList.size() - 1, _index_));
			case "specialCourtesy":
				List<com.dtc.fhir.gwt.CodeableConcept> specialCourtesyList = _instance_.getSpecialCourtesy();
				if (specialCourtesyList.size() < _index_ + 1) {
					specialCourtesyList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return specialCourtesyList.get(Math.min(specialCourtesyList.size() - 1, _index_));
			case "specialArrangement":
				List<com.dtc.fhir.gwt.CodeableConcept> specialArrangementList = _instance_.getSpecialArrangement();
				if (specialArrangementList.size() < _index_ + 1) {
					specialArrangementList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return specialArrangementList.get(Math.min(specialArrangementList.size() - 1, _index_));
			case "dischargeDisposition":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getDischargeDisposition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setDischargeDisposition(_field_);
				}
				return _field_;}
			case "dischargeDiagnosis":
				List<com.dtc.fhir.gwt.Reference> dischargeDiagnosisList = _instance_.getDischargeDiagnosis();
				if (dischargeDiagnosisList.size() < _index_ + 1) {
					dischargeDiagnosisList.add(new com.dtc.fhir.gwt.Reference());
				}
				return dischargeDiagnosisList.get(Math.min(dischargeDiagnosisList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EncounterHospitalization");
			}
		}
	}
	private static class SetEncounterLocation {
		static void set(com.dtc.fhir.gwt.EncounterLocation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EncounterLocation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setLocation((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.EncounterLocationStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.EncounterLocationStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EncounterLocationStatus");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EncounterLocation");
			}
		}

		static Object get(com.dtc.fhir.gwt.EncounterLocation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getLocation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setLocation(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.EncounterLocationStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.EncounterLocationStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EncounterLocation");
			}
		}
	}
	private static class SetEncounterLocationStatus {
		static void set(com.dtc.fhir.gwt.EncounterLocationStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EncounterLocationStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.EncounterLocationStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.EncounterLocationStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EncounterLocationStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EncounterLocationStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.EncounterLocationStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.EncounterLocationStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EncounterLocationStatus");
			}
		}
	}
	private static class SetEncounterParticipant {
		static void set(com.dtc.fhir.gwt.EncounterParticipant instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EncounterParticipant instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "individual":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setIndividual((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EncounterParticipant");
			}
		}

		static Object get(com.dtc.fhir.gwt.EncounterParticipant _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				List<com.dtc.fhir.gwt.CodeableConcept> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "individual":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getIndividual();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setIndividual(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EncounterParticipant");
			}
		}
	}
	private static class SetEncounterState {
		static void set(com.dtc.fhir.gwt.EncounterState instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EncounterState instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.EncounterStateList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.EncounterStateList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EncounterStateList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EncounterState");
			}
		}

		static Object get(com.dtc.fhir.gwt.EncounterState _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.EncounterStateList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EncounterState");
			}
		}
	}
	private static class SetEncounterStatusHistory {
		static void set(com.dtc.fhir.gwt.EncounterStatusHistory instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EncounterStatusHistory instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "status":
				if (value instanceof com.dtc.fhir.gwt.EncounterState || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.EncounterState)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EncounterState");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EncounterStatusHistory");
			}
		}

		static Object get(com.dtc.fhir.gwt.EncounterStatusHistory _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "status":
				{com.dtc.fhir.gwt.EncounterState _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.EncounterState();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EncounterStatusHistory");
			}
		}
	}
	private static class SetEnrollmentRequest {
		static void set(com.dtc.fhir.gwt.EnrollmentRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EnrollmentRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "relationship":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRelationship((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "coverage":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setCoverage((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "provider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EnrollmentRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.EnrollmentRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "relationship":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRelationship();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRelationship(_field_);
				}
				return _field_;}
			case "coverage":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getCoverage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setCoverage(_field_);
				}
				return _field_;}
			case "provider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProvider(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EnrollmentRequest");
			}
		}
	}
	private static class SetEnrollmentResponse {
		static void set(com.dtc.fhir.gwt.EnrollmentResponse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EnrollmentResponse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "requestOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "requestProvider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "disposition":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisposition((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EnrollmentResponse");
			}
		}

		static Object get(com.dtc.fhir.gwt.EnrollmentResponse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "outcome":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "requestOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestOrganization(_field_);
				}
				return _field_;}
			case "requestProvider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestProvider(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "disposition":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisposition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisposition(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EnrollmentResponse");
			}
		}
	}
	private static class SetEpisodeOfCare {
		static void set(com.dtc.fhir.gwt.EpisodeOfCare instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EpisodeOfCare instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.EpisodeOfCareStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.EpisodeOfCareStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EpisodeOfCareStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "managingOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setManagingOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "statusHistory":
				if (value instanceof com.dtc.fhir.gwt.EpisodeOfCareStatusHistory || value == null) {
					List<com.dtc.fhir.gwt.EpisodeOfCareStatusHistory> statusHistoryList = instance.getStatusHistory();
					if (statusHistoryList.size() < index + 1) {
						statusHistoryList.add((com.dtc.fhir.gwt.EpisodeOfCareStatusHistory)value);
					} else {
						statusHistoryList.set(Math.min(statusHistoryList.size() - 1, index), (com.dtc.fhir.gwt.EpisodeOfCareStatusHistory)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "referralRequest":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> referralRequestList = instance.getReferralRequest();
					if (referralRequestList.size() < index + 1) {
						referralRequestList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						referralRequestList.set(Math.min(referralRequestList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "careManager":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setCareManager((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "condition":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> conditionList = instance.getCondition();
					if (conditionList.size() < index + 1) {
						conditionList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						conditionList.set(Math.min(conditionList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "careTeam":
				if (value instanceof com.dtc.fhir.gwt.EpisodeOfCareCareTeam || value == null) {
					List<com.dtc.fhir.gwt.EpisodeOfCareCareTeam> careTeamList = instance.getCareTeam();
					if (careTeamList.size() < index + 1) {
						careTeamList.add((com.dtc.fhir.gwt.EpisodeOfCareCareTeam)value);
					} else {
						careTeamList.set(Math.min(careTeamList.size() - 1, index), (com.dtc.fhir.gwt.EpisodeOfCareCareTeam)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EpisodeOfCare");
			}
		}

		static Object get(com.dtc.fhir.gwt.EpisodeOfCare _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				List<com.dtc.fhir.gwt.CodeableConcept> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "status":
				{com.dtc.fhir.gwt.EpisodeOfCareStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.EpisodeOfCareStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "managingOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getManagingOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setManagingOrganization(_field_);
				}
				return _field_;}
			case "statusHistory":
				List<com.dtc.fhir.gwt.EpisodeOfCareStatusHistory> statusHistoryList = _instance_.getStatusHistory();
				if (statusHistoryList.size() < _index_ + 1) {
					statusHistoryList.add(new com.dtc.fhir.gwt.EpisodeOfCareStatusHistory());
				}
				return statusHistoryList.get(Math.min(statusHistoryList.size() - 1, _index_));
			case "referralRequest":
				List<com.dtc.fhir.gwt.Reference> referralRequestList = _instance_.getReferralRequest();
				if (referralRequestList.size() < _index_ + 1) {
					referralRequestList.add(new com.dtc.fhir.gwt.Reference());
				}
				return referralRequestList.get(Math.min(referralRequestList.size() - 1, _index_));
			case "careManager":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getCareManager();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setCareManager(_field_);
				}
				return _field_;}
			case "condition":
				List<com.dtc.fhir.gwt.Reference> conditionList = _instance_.getCondition();
				if (conditionList.size() < _index_ + 1) {
					conditionList.add(new com.dtc.fhir.gwt.Reference());
				}
				return conditionList.get(Math.min(conditionList.size() - 1, _index_));
			case "careTeam":
				List<com.dtc.fhir.gwt.EpisodeOfCareCareTeam> careTeamList = _instance_.getCareTeam();
				if (careTeamList.size() < _index_ + 1) {
					careTeamList.add(new com.dtc.fhir.gwt.EpisodeOfCareCareTeam());
				}
				return careTeamList.get(Math.min(careTeamList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EpisodeOfCare");
			}
		}
	}
	private static class SetEpisodeOfCareCareTeam {
		static void set(com.dtc.fhir.gwt.EpisodeOfCareCareTeam instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EpisodeOfCareCareTeam instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "role":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> roleList = instance.getRole();
					if (roleList.size() < index + 1) {
						roleList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						roleList.set(Math.min(roleList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "member":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setMember((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EpisodeOfCareCareTeam");
			}
		}

		static Object get(com.dtc.fhir.gwt.EpisodeOfCareCareTeam _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "role":
				List<com.dtc.fhir.gwt.CodeableConcept> roleList = _instance_.getRole();
				if (roleList.size() < _index_ + 1) {
					roleList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return roleList.get(Math.min(roleList.size() - 1, _index_));
			case "member":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getMember();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setMember(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EpisodeOfCareCareTeam");
			}
		}
	}
	private static class SetEpisodeOfCareStatus {
		static void set(com.dtc.fhir.gwt.EpisodeOfCareStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EpisodeOfCareStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.EpisodeOfCareStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.EpisodeOfCareStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EpisodeOfCareStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EpisodeOfCareStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.EpisodeOfCareStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.EpisodeOfCareStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EpisodeOfCareStatus");
			}
		}
	}
	private static class SetEpisodeOfCareStatusHistory {
		static void set(com.dtc.fhir.gwt.EpisodeOfCareStatusHistory instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EpisodeOfCareStatusHistory instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "status":
				if (value instanceof com.dtc.fhir.gwt.EpisodeOfCareStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.EpisodeOfCareStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EpisodeOfCareStatus");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EpisodeOfCareStatusHistory");
			}
		}

		static Object get(com.dtc.fhir.gwt.EpisodeOfCareStatusHistory _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "status":
				{com.dtc.fhir.gwt.EpisodeOfCareStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.EpisodeOfCareStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EpisodeOfCareStatusHistory");
			}
		}
	}
	private static class SetEventTiming {
		static void set(com.dtc.fhir.gwt.EventTiming instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.EventTiming instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.EventTimingList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.EventTimingList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EventTimingList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of EventTiming");
			}
		}

		static Object get(com.dtc.fhir.gwt.EventTiming _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.EventTimingList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of EventTiming");
			}
		}
	}
	private static class SetExplanationOfBenefit {
		static void set(com.dtc.fhir.gwt.ExplanationOfBenefit instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ExplanationOfBenefit instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "requestOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "requestProvider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "disposition":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisposition((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ExplanationOfBenefit");
			}
		}

		static Object get(com.dtc.fhir.gwt.ExplanationOfBenefit _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "outcome":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "requestOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestOrganization(_field_);
				}
				return _field_;}
			case "requestProvider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestProvider(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "disposition":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisposition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisposition(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ExplanationOfBenefit");
			}
		}
	}
	private static class SetExtensionContext {
		static void set(com.dtc.fhir.gwt.ExtensionContext instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ExtensionContext instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ExtensionContextList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ExtensionContextList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ExtensionContextList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ExtensionContext");
			}
		}

		static Object get(com.dtc.fhir.gwt.ExtensionContext _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ExtensionContextList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ExtensionContext");
			}
		}
	}
	private static class SetFamilyHistoryStatus {
		static void set(com.dtc.fhir.gwt.FamilyHistoryStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.FamilyHistoryStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.FamilyHistoryStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.FamilyHistoryStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.FamilyHistoryStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of FamilyHistoryStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.FamilyHistoryStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.FamilyHistoryStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of FamilyHistoryStatus");
			}
		}
	}
	private static class SetFamilyMemberHistory {
		static void set(com.dtc.fhir.gwt.FamilyMemberHistory instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.FamilyMemberHistory instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.FamilyHistoryStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.FamilyHistoryStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.FamilyHistoryStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setNote((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "gender":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setGender((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "relationship":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRelationship((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "bornPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setBornPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "bornString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setBornString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "ageQuantity":
				if (value instanceof com.dtc.fhir.gwt.Age || value == null) {
					instance.setAgeQuantity((com.dtc.fhir.gwt.Age)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Age");
				}
				break;
			case "deceasedBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setDeceasedBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "deceasedQuantity":
				if (value instanceof com.dtc.fhir.gwt.Age || value == null) {
					instance.setDeceasedQuantity((com.dtc.fhir.gwt.Age)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Age");
				}
				break;
			case "deceasedRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setDeceasedRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "deceasedDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setDeceasedDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "deceasedString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDeceasedString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "condition":
				if (value instanceof com.dtc.fhir.gwt.FamilyMemberHistoryCondition || value == null) {
					List<com.dtc.fhir.gwt.FamilyMemberHistoryCondition> conditionList = instance.getCondition();
					if (conditionList.size() < index + 1) {
						conditionList.add((com.dtc.fhir.gwt.FamilyMemberHistoryCondition)value);
					} else {
						conditionList.set(Math.min(conditionList.size() - 1, index), (com.dtc.fhir.gwt.FamilyMemberHistoryCondition)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "bornDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setBornDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "ageRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setAgeRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "ageString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setAgeString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of FamilyMemberHistory");
			}
		}

		static Object get(com.dtc.fhir.gwt.FamilyMemberHistory _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.FamilyHistoryStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.FamilyHistoryStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "note":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "gender":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getGender();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setGender(_field_);
				}
				return _field_;}
			case "relationship":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRelationship();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRelationship(_field_);
				}
				return _field_;}
			case "bornPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getBornPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setBornPeriod(_field_);
				}
				return _field_;}
			case "bornString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getBornString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setBornString(_field_);
				}
				return _field_;}
			case "ageQuantity":
				{com.dtc.fhir.gwt.Age _field_ = _instance_.getAgeQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Age();
					_instance_.setAgeQuantity(_field_);
				}
				return _field_;}
			case "deceasedBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getDeceasedBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setDeceasedBoolean(_field_);
				}
				return _field_;}
			case "deceasedQuantity":
				{com.dtc.fhir.gwt.Age _field_ = _instance_.getDeceasedQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Age();
					_instance_.setDeceasedQuantity(_field_);
				}
				return _field_;}
			case "deceasedRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getDeceasedRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setDeceasedRange(_field_);
				}
				return _field_;}
			case "deceasedDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getDeceasedDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setDeceasedDate(_field_);
				}
				return _field_;}
			case "deceasedString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDeceasedString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDeceasedString(_field_);
				}
				return _field_;}
			case "condition":
				List<com.dtc.fhir.gwt.FamilyMemberHistoryCondition> conditionList = _instance_.getCondition();
				if (conditionList.size() < _index_ + 1) {
					conditionList.add(new com.dtc.fhir.gwt.FamilyMemberHistoryCondition());
				}
				return conditionList.get(Math.min(conditionList.size() - 1, _index_));
			case "bornDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getBornDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setBornDate(_field_);
				}
				return _field_;}
			case "ageRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getAgeRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setAgeRange(_field_);
				}
				return _field_;}
			case "ageString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getAgeString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setAgeString(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of FamilyMemberHistory");
			}
		}
	}
	private static class SetFamilyMemberHistoryCondition {
		static void set(com.dtc.fhir.gwt.FamilyMemberHistoryCondition instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.FamilyMemberHistoryCondition instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setNote((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "onsetQuantity":
				if (value instanceof com.dtc.fhir.gwt.Age || value == null) {
					instance.setOnsetQuantity((com.dtc.fhir.gwt.Age)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Age");
				}
				break;
			case "onsetPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setOnsetPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "onsetRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setOnsetRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "onsetString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setOnsetString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of FamilyMemberHistoryCondition");
			}
		}

		static Object get(com.dtc.fhir.gwt.FamilyMemberHistoryCondition _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "outcome":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "note":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "onsetQuantity":
				{com.dtc.fhir.gwt.Age _field_ = _instance_.getOnsetQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Age();
					_instance_.setOnsetQuantity(_field_);
				}
				return _field_;}
			case "onsetPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getOnsetPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setOnsetPeriod(_field_);
				}
				return _field_;}
			case "onsetRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getOnsetRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setOnsetRange(_field_);
				}
				return _field_;}
			case "onsetString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getOnsetString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setOnsetString(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of FamilyMemberHistoryCondition");
			}
		}
	}
	private static class SetFilterOperator {
		static void set(com.dtc.fhir.gwt.FilterOperator instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.FilterOperator instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of FilterOperator");
			}
		}

		static Object get(com.dtc.fhir.gwt.FilterOperator _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of FilterOperator");
			}
		}
	}
	private static class SetFlag {
		static void set(com.dtc.fhir.gwt.Flag instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Flag instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.FlagStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.FlagStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.FlagStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Flag");
			}
		}

		static Object get(com.dtc.fhir.gwt.Flag _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.FlagStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.FlagStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "author":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthor(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Flag");
			}
		}
	}
	private static class SetFlagStatus {
		static void set(com.dtc.fhir.gwt.FlagStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.FlagStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.FlagStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.FlagStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.FlagStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of FlagStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.FlagStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.FlagStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of FlagStatus");
			}
		}
	}
	private static class SetGoal {
		static void set(com.dtc.fhir.gwt.Goal instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Goal instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "priority":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setPriority((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.GoalOutcome || value == null) {
					List<com.dtc.fhir.gwt.GoalOutcome> outcomeList = instance.getOutcome();
					if (outcomeList.size() < index + 1) {
						outcomeList.add((com.dtc.fhir.gwt.GoalOutcome)value);
					} else {
						outcomeList.set(Math.min(outcomeList.size() - 1, index), (com.dtc.fhir.gwt.GoalOutcome)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.GoalStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.GoalStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GoalStatus");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					List<com.dtc.fhir.gwt.Annotation> noteList = instance.getNote();
					if (noteList.size() < index + 1) {
						noteList.add((com.dtc.fhir.gwt.Annotation)value);
					} else {
						noteList.set(Math.min(noteList.size() - 1, index), (com.dtc.fhir.gwt.Annotation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> categoryList = instance.getCategory();
					if (categoryList.size() < index + 1) {
						categoryList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						categoryList.set(Math.min(categoryList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "startCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setStartCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "targetDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setTargetDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "targetQuantity":
				if (value instanceof com.dtc.fhir.gwt.Duration || value == null) {
					instance.setTargetQuantity((com.dtc.fhir.gwt.Duration)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Duration");
				}
				break;
			case "statusDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setStatusDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "statusReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setStatusReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "startDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setStartDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "addresses":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> addressesList = instance.getAddresses();
					if (addressesList.size() < index + 1) {
						addressesList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						addressesList.set(Math.min(addressesList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Goal");
			}
		}

		static Object get(com.dtc.fhir.gwt.Goal _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "priority":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getPriority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setPriority(_field_);
				}
				return _field_;}
			case "outcome":
				List<com.dtc.fhir.gwt.GoalOutcome> outcomeList = _instance_.getOutcome();
				if (outcomeList.size() < _index_ + 1) {
					outcomeList.add(new com.dtc.fhir.gwt.GoalOutcome());
				}
				return outcomeList.get(Math.min(outcomeList.size() - 1, _index_));
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.GoalStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.GoalStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "note":
				List<com.dtc.fhir.gwt.Annotation> noteList = _instance_.getNote();
				if (noteList.size() < _index_ + 1) {
					noteList.add(new com.dtc.fhir.gwt.Annotation());
				}
				return noteList.get(Math.min(noteList.size() - 1, _index_));
			case "category":
				List<com.dtc.fhir.gwt.CodeableConcept> categoryList = _instance_.getCategory();
				if (categoryList.size() < _index_ + 1) {
					categoryList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return categoryList.get(Math.min(categoryList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "startCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getStartCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setStartCodeableConcept(_field_);
				}
				return _field_;}
			case "targetDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getTargetDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setTargetDate(_field_);
				}
				return _field_;}
			case "targetQuantity":
				{com.dtc.fhir.gwt.Duration _field_ = _instance_.getTargetQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Duration();
					_instance_.setTargetQuantity(_field_);
				}
				return _field_;}
			case "statusDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getStatusDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setStatusDate(_field_);
				}
				return _field_;}
			case "statusReason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getStatusReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setStatusReason(_field_);
				}
				return _field_;}
			case "author":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthor(_field_);
				}
				return _field_;}
			case "startDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getStartDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setStartDate(_field_);
				}
				return _field_;}
			case "addresses":
				List<com.dtc.fhir.gwt.Reference> addressesList = _instance_.getAddresses();
				if (addressesList.size() < _index_ + 1) {
					addressesList.add(new com.dtc.fhir.gwt.Reference());
				}
				return addressesList.get(Math.min(addressesList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Goal");
			}
		}
	}
	private static class SetGoalOutcome {
		static void set(com.dtc.fhir.gwt.GoalOutcome instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.GoalOutcome instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "resultCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setResultCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "resultReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setResultReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of GoalOutcome");
			}
		}

		static Object get(com.dtc.fhir.gwt.GoalOutcome _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "resultCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getResultCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setResultCodeableConcept(_field_);
				}
				return _field_;}
			case "resultReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getResultReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setResultReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of GoalOutcome");
			}
		}
	}
	private static class SetGoalStatus {
		static void set(com.dtc.fhir.gwt.GoalStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.GoalStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.GoalStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.GoalStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GoalStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of GoalStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.GoalStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.GoalStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of GoalStatus");
			}
		}
	}
	private static class SetGroup {
		static void set(com.dtc.fhir.gwt.Group instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Group instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.GroupType || value == null) {
					instance.setType((com.dtc.fhir.gwt.GroupType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GroupType");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "characteristic":
				if (value instanceof com.dtc.fhir.gwt.GroupCharacteristic || value == null) {
					List<com.dtc.fhir.gwt.GroupCharacteristic> characteristicList = instance.getCharacteristic();
					if (characteristicList.size() < index + 1) {
						characteristicList.add((com.dtc.fhir.gwt.GroupCharacteristic)value);
					} else {
						characteristicList.set(Math.min(characteristicList.size() - 1, index), (com.dtc.fhir.gwt.GroupCharacteristic)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "actual":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setActual((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "member":
				if (value instanceof com.dtc.fhir.gwt.GroupMember || value == null) {
					List<com.dtc.fhir.gwt.GroupMember> memberList = instance.getMember();
					if (memberList.size() < index + 1) {
						memberList.add((com.dtc.fhir.gwt.GroupMember)value);
					} else {
						memberList.set(Math.min(memberList.size() - 1, index), (com.dtc.fhir.gwt.GroupMember)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Group");
			}
		}

		static Object get(com.dtc.fhir.gwt.Group _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.GroupType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.GroupType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "characteristic":
				List<com.dtc.fhir.gwt.GroupCharacteristic> characteristicList = _instance_.getCharacteristic();
				if (characteristicList.size() < _index_ + 1) {
					characteristicList.add(new com.dtc.fhir.gwt.GroupCharacteristic());
				}
				return characteristicList.get(Math.min(characteristicList.size() - 1, _index_));
			case "quantity":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "actual":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getActual();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setActual(_field_);
				}
				return _field_;}
			case "member":
				List<com.dtc.fhir.gwt.GroupMember> memberList = _instance_.getMember();
				if (memberList.size() < _index_ + 1) {
					memberList.add(new com.dtc.fhir.gwt.GroupMember());
				}
				return memberList.get(Math.min(memberList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Group");
			}
		}
	}
	private static class SetGroupCharacteristic {
		static void set(com.dtc.fhir.gwt.GroupCharacteristic instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.GroupCharacteristic instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "valueQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setValueQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "valueCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setValueCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "valueRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setValueRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "exclude":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExclude((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "valueBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setValueBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of GroupCharacteristic");
			}
		}

		static Object get(com.dtc.fhir.gwt.GroupCharacteristic _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "valueQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getValueQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setValueQuantity(_field_);
				}
				return _field_;}
			case "valueCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getValueCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setValueCodeableConcept(_field_);
				}
				return _field_;}
			case "valueRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getValueRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setValueRange(_field_);
				}
				return _field_;}
			case "exclude":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExclude();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExclude(_field_);
				}
				return _field_;}
			case "valueBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getValueBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setValueBoolean(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of GroupCharacteristic");
			}
		}
	}
	private static class SetGroupMember {
		static void set(com.dtc.fhir.gwt.GroupMember instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.GroupMember instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "entity":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEntity((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "inactive":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setInactive((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of GroupMember");
			}
		}

		static Object get(com.dtc.fhir.gwt.GroupMember _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "entity":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEntity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEntity(_field_);
				}
				return _field_;}
			case "inactive":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getInactive();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setInactive(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of GroupMember");
			}
		}
	}
	private static class SetGroupType {
		static void set(com.dtc.fhir.gwt.GroupType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.GroupType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.GroupTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.GroupTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GroupTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of GroupType");
			}
		}

		static Object get(com.dtc.fhir.gwt.GroupType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.GroupTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of GroupType");
			}
		}
	}
	private static class SetGuideDependencyType {
		static void set(com.dtc.fhir.gwt.GuideDependencyType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.GuideDependencyType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.GuideDependencyTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.GuideDependencyTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GuideDependencyTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of GuideDependencyType");
			}
		}

		static Object get(com.dtc.fhir.gwt.GuideDependencyType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.GuideDependencyTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of GuideDependencyType");
			}
		}
	}
	private static class SetGuidePageKind {
		static void set(com.dtc.fhir.gwt.GuidePageKind instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.GuidePageKind instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.GuidePageKindList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.GuidePageKindList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GuidePageKindList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of GuidePageKind");
			}
		}

		static Object get(com.dtc.fhir.gwt.GuidePageKind _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.GuidePageKindList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of GuidePageKind");
			}
		}
	}
	private static class SetGuideResourcePurpose {
		static void set(com.dtc.fhir.gwt.GuideResourcePurpose instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.GuideResourcePurpose instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.GuideResourcePurposeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.GuideResourcePurposeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GuideResourcePurposeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of GuideResourcePurpose");
			}
		}

		static Object get(com.dtc.fhir.gwt.GuideResourcePurpose _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.GuideResourcePurposeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of GuideResourcePurpose");
			}
		}
	}
	private static class SetHTTPVerb {
		static void set(com.dtc.fhir.gwt.HTTPVerb instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.HTTPVerb instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.HTTPVerbList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.HTTPVerbList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HTTPVerbList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of HTTPVerb");
			}
		}

		static Object get(com.dtc.fhir.gwt.HTTPVerb _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.HTTPVerbList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of HTTPVerb");
			}
		}
	}
	private static class SetHealthcareService {
		static void set(com.dtc.fhir.gwt.HealthcareService instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.HealthcareService instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setLocation((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "publicKey":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublicKey((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "comment":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComment((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "photo":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setPhoto((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "characteristic":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> characteristicList = instance.getCharacteristic();
					if (characteristicList.size() < index + 1) {
						characteristicList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						characteristicList.set(Math.min(characteristicList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "providedBy":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProvidedBy((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "serviceCategory":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setServiceCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "serviceType":
				if (value instanceof com.dtc.fhir.gwt.HealthcareServiceServiceType || value == null) {
					List<com.dtc.fhir.gwt.HealthcareServiceServiceType> serviceTypeList = instance.getServiceType();
					if (serviceTypeList.size() < index + 1) {
						serviceTypeList.add((com.dtc.fhir.gwt.HealthcareServiceServiceType)value);
					} else {
						serviceTypeList.set(Math.min(serviceTypeList.size() - 1, index), (com.dtc.fhir.gwt.HealthcareServiceServiceType)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "serviceName":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setServiceName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "extraDetails":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setExtraDetails((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "coverageArea":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> coverageAreaList = instance.getCoverageArea();
					if (coverageAreaList.size() < index + 1) {
						coverageAreaList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						coverageAreaList.set(Math.min(coverageAreaList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "serviceProvisionCode":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> serviceProvisionCodeList = instance.getServiceProvisionCode();
					if (serviceProvisionCodeList.size() < index + 1) {
						serviceProvisionCodeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						serviceProvisionCodeList.set(Math.min(serviceProvisionCodeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "eligibility":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setEligibility((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "eligibilityNote":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setEligibilityNote((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "programName":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> programNameList = instance.getProgramName();
					if (programNameList.size() < index + 1) {
						programNameList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						programNameList.set(Math.min(programNameList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "referralMethod":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> referralMethodList = instance.getReferralMethod();
					if (referralMethodList.size() < index + 1) {
						referralMethodList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						referralMethodList.set(Math.min(referralMethodList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "appointmentRequired":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAppointmentRequired((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "availableTime":
				if (value instanceof com.dtc.fhir.gwt.HealthcareServiceAvailableTime || value == null) {
					List<com.dtc.fhir.gwt.HealthcareServiceAvailableTime> availableTimeList = instance.getAvailableTime();
					if (availableTimeList.size() < index + 1) {
						availableTimeList.add((com.dtc.fhir.gwt.HealthcareServiceAvailableTime)value);
					} else {
						availableTimeList.set(Math.min(availableTimeList.size() - 1, index), (com.dtc.fhir.gwt.HealthcareServiceAvailableTime)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "notAvailable":
				if (value instanceof com.dtc.fhir.gwt.HealthcareServiceNotAvailable || value == null) {
					List<com.dtc.fhir.gwt.HealthcareServiceNotAvailable> notAvailableList = instance.getNotAvailable();
					if (notAvailableList.size() < index + 1) {
						notAvailableList.add((com.dtc.fhir.gwt.HealthcareServiceNotAvailable)value);
					} else {
						notAvailableList.set(Math.min(notAvailableList.size() - 1, index), (com.dtc.fhir.gwt.HealthcareServiceNotAvailable)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "availabilityExceptions":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setAvailabilityExceptions((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of HealthcareService");
			}
		}

		static Object get(com.dtc.fhir.gwt.HealthcareService _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getLocation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setLocation(_field_);
				}
				return _field_;}
			case "publicKey":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublicKey();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublicKey(_field_);
				}
				return _field_;}
			case "comment":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComment(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "photo":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getPhoto();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setPhoto(_field_);
				}
				return _field_;}
			case "characteristic":
				List<com.dtc.fhir.gwt.CodeableConcept> characteristicList = _instance_.getCharacteristic();
				if (characteristicList.size() < _index_ + 1) {
					characteristicList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return characteristicList.get(Math.min(characteristicList.size() - 1, _index_));
			case "providedBy":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProvidedBy();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProvidedBy(_field_);
				}
				return _field_;}
			case "serviceCategory":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getServiceCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setServiceCategory(_field_);
				}
				return _field_;}
			case "serviceType":
				List<com.dtc.fhir.gwt.HealthcareServiceServiceType> serviceTypeList = _instance_.getServiceType();
				if (serviceTypeList.size() < _index_ + 1) {
					serviceTypeList.add(new com.dtc.fhir.gwt.HealthcareServiceServiceType());
				}
				return serviceTypeList.get(Math.min(serviceTypeList.size() - 1, _index_));
			case "serviceName":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getServiceName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setServiceName(_field_);
				}
				return _field_;}
			case "extraDetails":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getExtraDetails();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setExtraDetails(_field_);
				}
				return _field_;}
			case "coverageArea":
				List<com.dtc.fhir.gwt.Reference> coverageAreaList = _instance_.getCoverageArea();
				if (coverageAreaList.size() < _index_ + 1) {
					coverageAreaList.add(new com.dtc.fhir.gwt.Reference());
				}
				return coverageAreaList.get(Math.min(coverageAreaList.size() - 1, _index_));
			case "serviceProvisionCode":
				List<com.dtc.fhir.gwt.CodeableConcept> serviceProvisionCodeList = _instance_.getServiceProvisionCode();
				if (serviceProvisionCodeList.size() < _index_ + 1) {
					serviceProvisionCodeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return serviceProvisionCodeList.get(Math.min(serviceProvisionCodeList.size() - 1, _index_));
			case "eligibility":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getEligibility();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setEligibility(_field_);
				}
				return _field_;}
			case "eligibilityNote":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getEligibilityNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setEligibilityNote(_field_);
				}
				return _field_;}
			case "programName":
				List<com.dtc.fhir.gwt.StringDt> programNameList = _instance_.getProgramName();
				if (programNameList.size() < _index_ + 1) {
					programNameList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return programNameList.get(Math.min(programNameList.size() - 1, _index_));
			case "referralMethod":
				List<com.dtc.fhir.gwt.CodeableConcept> referralMethodList = _instance_.getReferralMethod();
				if (referralMethodList.size() < _index_ + 1) {
					referralMethodList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return referralMethodList.get(Math.min(referralMethodList.size() - 1, _index_));
			case "appointmentRequired":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAppointmentRequired();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAppointmentRequired(_field_);
				}
				return _field_;}
			case "availableTime":
				List<com.dtc.fhir.gwt.HealthcareServiceAvailableTime> availableTimeList = _instance_.getAvailableTime();
				if (availableTimeList.size() < _index_ + 1) {
					availableTimeList.add(new com.dtc.fhir.gwt.HealthcareServiceAvailableTime());
				}
				return availableTimeList.get(Math.min(availableTimeList.size() - 1, _index_));
			case "notAvailable":
				List<com.dtc.fhir.gwt.HealthcareServiceNotAvailable> notAvailableList = _instance_.getNotAvailable();
				if (notAvailableList.size() < _index_ + 1) {
					notAvailableList.add(new com.dtc.fhir.gwt.HealthcareServiceNotAvailable());
				}
				return notAvailableList.get(Math.min(notAvailableList.size() - 1, _index_));
			case "availabilityExceptions":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getAvailabilityExceptions();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setAvailabilityExceptions(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of HealthcareService");
			}
		}
	}
	private static class SetHealthcareServiceAvailableTime {
		static void set(com.dtc.fhir.gwt.HealthcareServiceAvailableTime instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.HealthcareServiceAvailableTime instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "daysOfWeek":
				if (value instanceof com.dtc.fhir.gwt.DaysOfWeek || value == null) {
					List<com.dtc.fhir.gwt.DaysOfWeek> daysOfWeekList = instance.getDaysOfWeek();
					if (daysOfWeekList.size() < index + 1) {
						daysOfWeekList.add((com.dtc.fhir.gwt.DaysOfWeek)value);
					} else {
						daysOfWeekList.set(Math.min(daysOfWeekList.size() - 1, index), (com.dtc.fhir.gwt.DaysOfWeek)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "availableStartTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setAvailableStartTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "availableEndTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setAvailableEndTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "allDay":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAllDay((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of HealthcareServiceAvailableTime");
			}
		}

		static Object get(com.dtc.fhir.gwt.HealthcareServiceAvailableTime _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "daysOfWeek":
				List<com.dtc.fhir.gwt.DaysOfWeek> daysOfWeekList = _instance_.getDaysOfWeek();
				if (daysOfWeekList.size() < _index_ + 1) {
					daysOfWeekList.add(new com.dtc.fhir.gwt.DaysOfWeek());
				}
				return daysOfWeekList.get(Math.min(daysOfWeekList.size() - 1, _index_));
			case "availableStartTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getAvailableStartTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setAvailableStartTime(_field_);
				}
				return _field_;}
			case "availableEndTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getAvailableEndTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setAvailableEndTime(_field_);
				}
				return _field_;}
			case "allDay":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAllDay();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAllDay(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of HealthcareServiceAvailableTime");
			}
		}
	}
	private static class SetHealthcareServiceNotAvailable {
		static void set(com.dtc.fhir.gwt.HealthcareServiceNotAvailable instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.HealthcareServiceNotAvailable instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "during":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setDuring((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of HealthcareServiceNotAvailable");
			}
		}

		static Object get(com.dtc.fhir.gwt.HealthcareServiceNotAvailable _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "during":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getDuring();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setDuring(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of HealthcareServiceNotAvailable");
			}
		}
	}
	private static class SetHealthcareServiceServiceType {
		static void set(com.dtc.fhir.gwt.HealthcareServiceServiceType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.HealthcareServiceServiceType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "specialty":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> specialtyList = instance.getSpecialty();
					if (specialtyList.size() < index + 1) {
						specialtyList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						specialtyList.set(Math.min(specialtyList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of HealthcareServiceServiceType");
			}
		}

		static Object get(com.dtc.fhir.gwt.HealthcareServiceServiceType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "specialty":
				List<com.dtc.fhir.gwt.CodeableConcept> specialtyList = _instance_.getSpecialty();
				if (specialtyList.size() < _index_ + 1) {
					specialtyList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return specialtyList.get(Math.min(specialtyList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of HealthcareServiceServiceType");
			}
		}
	}
	private static class SetHumanName {
		static void set(com.dtc.fhir.gwt.HumanName instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.HumanName instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "family":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> familyList = instance.getFamily();
					if (familyList.size() < index + 1) {
						familyList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						familyList.set(Math.min(familyList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "given":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> givenList = instance.getGiven();
					if (givenList.size() < index + 1) {
						givenList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						givenList.set(Math.min(givenList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "prefix":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> prefixList = instance.getPrefix();
					if (prefixList.size() < index + 1) {
						prefixList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						prefixList.set(Math.min(prefixList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "suffix":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> suffixList = instance.getSuffix();
					if (suffixList.size() < index + 1) {
						suffixList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						suffixList.set(Math.min(suffixList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "use":
				if (value instanceof com.dtc.fhir.gwt.NameUse || value == null) {
					instance.setUse((com.dtc.fhir.gwt.NameUse)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NameUse");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of HumanName");
			}
		}

		static Object get(com.dtc.fhir.gwt.HumanName _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "family":
				List<com.dtc.fhir.gwt.StringDt> familyList = _instance_.getFamily();
				if (familyList.size() < _index_ + 1) {
					familyList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return familyList.get(Math.min(familyList.size() - 1, _index_));
			case "given":
				List<com.dtc.fhir.gwt.StringDt> givenList = _instance_.getGiven();
				if (givenList.size() < _index_ + 1) {
					givenList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return givenList.get(Math.min(givenList.size() - 1, _index_));
			case "prefix":
				List<com.dtc.fhir.gwt.StringDt> prefixList = _instance_.getPrefix();
				if (prefixList.size() < _index_ + 1) {
					prefixList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return prefixList.get(Math.min(prefixList.size() - 1, _index_));
			case "suffix":
				List<com.dtc.fhir.gwt.StringDt> suffixList = _instance_.getSuffix();
				if (suffixList.size() < _index_ + 1) {
					suffixList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return suffixList.get(Math.min(suffixList.size() - 1, _index_));
			case "use":
				{com.dtc.fhir.gwt.NameUse _field_ = _instance_.getUse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.NameUse();
					_instance_.setUse(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of HumanName");
			}
		}
	}
	private static class SetId {
		static void set(com.dtc.fhir.gwt.Id instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Id instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Id");
			}
		}

		static Object get(com.dtc.fhir.gwt.Id _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Id");
			}
		}
	}
	private static class SetIdentifier {
		static void set(com.dtc.fhir.gwt.Identifier instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Identifier instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "value":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValue((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "assigner":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAssigner((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "use":
				if (value instanceof com.dtc.fhir.gwt.IdentifierUse || value == null) {
					instance.setUse((com.dtc.fhir.gwt.IdentifierUse)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IdentifierUse");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Identifier");
			}
		}

		static Object get(com.dtc.fhir.gwt.Identifier _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "value":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "assigner":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAssigner();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAssigner(_field_);
				}
				return _field_;}
			case "use":
				{com.dtc.fhir.gwt.IdentifierUse _field_ = _instance_.getUse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IdentifierUse();
					_instance_.setUse(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Identifier");
			}
		}
	}
	private static class SetIdentifierUse {
		static void set(com.dtc.fhir.gwt.IdentifierUse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.IdentifierUse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.IdentifierUseList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.IdentifierUseList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IdentifierUseList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of IdentifierUse");
			}
		}

		static Object get(com.dtc.fhir.gwt.IdentifierUse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.IdentifierUseList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of IdentifierUse");
			}
		}
	}
	private static class SetIdentityAssuranceLevel {
		static void set(com.dtc.fhir.gwt.IdentityAssuranceLevel instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.IdentityAssuranceLevel instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.IdentityAssuranceLevelList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.IdentityAssuranceLevelList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IdentityAssuranceLevelList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of IdentityAssuranceLevel");
			}
		}

		static Object get(com.dtc.fhir.gwt.IdentityAssuranceLevel _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.IdentityAssuranceLevelList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of IdentityAssuranceLevel");
			}
		}
	}
	private static class SetImagingObjectSelection {
		static void set(com.dtc.fhir.gwt.ImagingObjectSelection instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImagingObjectSelection instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "authoringTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setAuthoringTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "title":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setTitle((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "uid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setUid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "study":
				if (value instanceof com.dtc.fhir.gwt.ImagingObjectSelectionStudy || value == null) {
					List<com.dtc.fhir.gwt.ImagingObjectSelectionStudy> studyList = instance.getStudy();
					if (studyList.size() < index + 1) {
						studyList.add((com.dtc.fhir.gwt.ImagingObjectSelectionStudy)value);
					} else {
						studyList.set(Math.min(studyList.size() - 1, index), (com.dtc.fhir.gwt.ImagingObjectSelectionStudy)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImagingObjectSelection");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImagingObjectSelection _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "authoringTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getAuthoringTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setAuthoringTime(_field_);
				}
				return _field_;}
			case "author":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthor(_field_);
				}
				return _field_;}
			case "title":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getTitle();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setTitle(_field_);
				}
				return _field_;}
			case "uid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getUid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setUid(_field_);
				}
				return _field_;}
			case "study":
				List<com.dtc.fhir.gwt.ImagingObjectSelectionStudy> studyList = _instance_.getStudy();
				if (studyList.size() < _index_ + 1) {
					studyList.add(new com.dtc.fhir.gwt.ImagingObjectSelectionStudy());
				}
				return studyList.get(Math.min(studyList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImagingObjectSelection");
			}
		}
	}
	private static class SetImagingObjectSelectionFrames {
		static void set(com.dtc.fhir.gwt.ImagingObjectSelectionFrames instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImagingObjectSelectionFrames instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "frameNumbers":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					List<com.dtc.fhir.gwt.UnsignedInt> frameNumbersList = instance.getFrameNumbers();
					if (frameNumbersList.size() < index + 1) {
						frameNumbersList.add((com.dtc.fhir.gwt.UnsignedInt)value);
					} else {
						frameNumbersList.set(Math.min(frameNumbersList.size() - 1, index), (com.dtc.fhir.gwt.UnsignedInt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImagingObjectSelectionFrames");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImagingObjectSelectionFrames _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "frameNumbers":
				List<com.dtc.fhir.gwt.UnsignedInt> frameNumbersList = _instance_.getFrameNumbers();
				if (frameNumbersList.size() < _index_ + 1) {
					frameNumbersList.add(new com.dtc.fhir.gwt.UnsignedInt());
				}
				return frameNumbersList.get(Math.min(frameNumbersList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImagingObjectSelectionFrames");
			}
		}
	}
	private static class SetImagingObjectSelectionInstance {
		static void set(com.dtc.fhir.gwt.ImagingObjectSelectionInstance instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImagingObjectSelectionInstance instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "frames":
				if (value instanceof com.dtc.fhir.gwt.ImagingObjectSelectionFrames || value == null) {
					List<com.dtc.fhir.gwt.ImagingObjectSelectionFrames> framesList = instance.getFrames();
					if (framesList.size() < index + 1) {
						framesList.add((com.dtc.fhir.gwt.ImagingObjectSelectionFrames)value);
					} else {
						framesList.set(Math.min(framesList.size() - 1, index), (com.dtc.fhir.gwt.ImagingObjectSelectionFrames)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "sopClass":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setSopClass((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "uid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setUid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImagingObjectSelectionInstance");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImagingObjectSelectionInstance _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "frames":
				List<com.dtc.fhir.gwt.ImagingObjectSelectionFrames> framesList = _instance_.getFrames();
				if (framesList.size() < _index_ + 1) {
					framesList.add(new com.dtc.fhir.gwt.ImagingObjectSelectionFrames());
				}
				return framesList.get(Math.min(framesList.size() - 1, _index_));
			case "sopClass":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getSopClass();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setSopClass(_field_);
				}
				return _field_;}
			case "uid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getUid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setUid(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImagingObjectSelectionInstance");
			}
		}
	}
	private static class SetImagingObjectSelectionSeries {
		static void set(com.dtc.fhir.gwt.ImagingObjectSelectionSeries instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImagingObjectSelectionSeries instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "instance":
				if (value instanceof com.dtc.fhir.gwt.ImagingObjectSelectionInstance || value == null) {
					List<com.dtc.fhir.gwt.ImagingObjectSelectionInstance> instanceList = instance.getInstance();
					if (instanceList.size() < index + 1) {
						instanceList.add((com.dtc.fhir.gwt.ImagingObjectSelectionInstance)value);
					} else {
						instanceList.set(Math.min(instanceList.size() - 1, index), (com.dtc.fhir.gwt.ImagingObjectSelectionInstance)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "uid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setUid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImagingObjectSelectionSeries");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImagingObjectSelectionSeries _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "instance":
				List<com.dtc.fhir.gwt.ImagingObjectSelectionInstance> instanceList = _instance_.getInstance();
				if (instanceList.size() < _index_ + 1) {
					instanceList.add(new com.dtc.fhir.gwt.ImagingObjectSelectionInstance());
				}
				return instanceList.get(Math.min(instanceList.size() - 1, _index_));
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "uid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getUid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setUid(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImagingObjectSelectionSeries");
			}
		}
	}
	private static class SetImagingObjectSelectionStudy {
		static void set(com.dtc.fhir.gwt.ImagingObjectSelectionStudy instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImagingObjectSelectionStudy instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "imagingStudy":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setImagingStudy((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "uid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setUid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "series":
				if (value instanceof com.dtc.fhir.gwt.ImagingObjectSelectionSeries || value == null) {
					List<com.dtc.fhir.gwt.ImagingObjectSelectionSeries> seriesList = instance.getSeries();
					if (seriesList.size() < index + 1) {
						seriesList.add((com.dtc.fhir.gwt.ImagingObjectSelectionSeries)value);
					} else {
						seriesList.set(Math.min(seriesList.size() - 1, index), (com.dtc.fhir.gwt.ImagingObjectSelectionSeries)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImagingObjectSelectionStudy");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImagingObjectSelectionStudy _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "imagingStudy":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getImagingStudy();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setImagingStudy(_field_);
				}
				return _field_;}
			case "uid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getUid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setUid(_field_);
				}
				return _field_;}
			case "series":
				List<com.dtc.fhir.gwt.ImagingObjectSelectionSeries> seriesList = _instance_.getSeries();
				if (seriesList.size() < _index_ + 1) {
					seriesList.add(new com.dtc.fhir.gwt.ImagingObjectSelectionSeries());
				}
				return seriesList.get(Math.min(seriesList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImagingObjectSelectionStudy");
			}
		}
	}
	private static class SetImagingStudy {
		static void set(com.dtc.fhir.gwt.ImagingStudy instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImagingStudy instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modalityList":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> modalityListList = instance.getModalityList();
					if (modalityListList.size() < index + 1) {
						modalityListList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						modalityListList.set(Math.min(modalityListList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "availability":
				if (value instanceof com.dtc.fhir.gwt.InstanceAvailability || value == null) {
					instance.setAvailability((com.dtc.fhir.gwt.InstanceAvailability)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.InstanceAvailability");
				}
				break;
			case "numberOfSeries":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setNumberOfSeries((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "numberOfInstances":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setNumberOfInstances((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "interpreter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setInterpreter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "started":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setStarted((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "uid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setUid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "accession":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setAccession((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "order":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> orderList = instance.getOrder();
					if (orderList.size() < index + 1) {
						orderList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						orderList.set(Math.min(orderList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "referrer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReferrer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "procedure":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> procedureList = instance.getProcedure();
					if (procedureList.size() < index + 1) {
						procedureList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						procedureList.set(Math.min(procedureList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "series":
				if (value instanceof com.dtc.fhir.gwt.ImagingStudySeries || value == null) {
					List<com.dtc.fhir.gwt.ImagingStudySeries> seriesList = instance.getSeries();
					if (seriesList.size() < index + 1) {
						seriesList.add((com.dtc.fhir.gwt.ImagingStudySeries)value);
					} else {
						seriesList.set(Math.min(seriesList.size() - 1, index), (com.dtc.fhir.gwt.ImagingStudySeries)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImagingStudy");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImagingStudy _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "modalityList":
				List<com.dtc.fhir.gwt.Coding> modalityListList = _instance_.getModalityList();
				if (modalityListList.size() < _index_ + 1) {
					modalityListList.add(new com.dtc.fhir.gwt.Coding());
				}
				return modalityListList.get(Math.min(modalityListList.size() - 1, _index_));
			case "availability":
				{com.dtc.fhir.gwt.InstanceAvailability _field_ = _instance_.getAvailability();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.InstanceAvailability();
					_instance_.setAvailability(_field_);
				}
				return _field_;}
			case "numberOfSeries":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getNumberOfSeries();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setNumberOfSeries(_field_);
				}
				return _field_;}
			case "numberOfInstances":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getNumberOfInstances();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setNumberOfInstances(_field_);
				}
				return _field_;}
			case "interpreter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getInterpreter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setInterpreter(_field_);
				}
				return _field_;}
			case "started":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getStarted();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setStarted(_field_);
				}
				return _field_;}
			case "uid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getUid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setUid(_field_);
				}
				return _field_;}
			case "accession":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getAccession();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setAccession(_field_);
				}
				return _field_;}
			case "order":
				List<com.dtc.fhir.gwt.Reference> orderList = _instance_.getOrder();
				if (orderList.size() < _index_ + 1) {
					orderList.add(new com.dtc.fhir.gwt.Reference());
				}
				return orderList.get(Math.min(orderList.size() - 1, _index_));
			case "referrer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReferrer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReferrer(_field_);
				}
				return _field_;}
			case "procedure":
				List<com.dtc.fhir.gwt.Reference> procedureList = _instance_.getProcedure();
				if (procedureList.size() < _index_ + 1) {
					procedureList.add(new com.dtc.fhir.gwt.Reference());
				}
				return procedureList.get(Math.min(procedureList.size() - 1, _index_));
			case "series":
				List<com.dtc.fhir.gwt.ImagingStudySeries> seriesList = _instance_.getSeries();
				if (seriesList.size() < _index_ + 1) {
					seriesList.add(new com.dtc.fhir.gwt.ImagingStudySeries());
				}
				return seriesList.get(Math.min(seriesList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImagingStudy");
			}
		}
	}
	private static class SetImagingStudyInstance {
		static void set(com.dtc.fhir.gwt.ImagingStudyInstance instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImagingStudyInstance instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setType((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "number":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setNumber((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "content":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					List<com.dtc.fhir.gwt.Attachment> contentList = instance.getContent();
					if (contentList.size() < index + 1) {
						contentList.add((com.dtc.fhir.gwt.Attachment)value);
					} else {
						contentList.set(Math.min(contentList.size() - 1, index), (com.dtc.fhir.gwt.Attachment)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "sopClass":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setSopClass((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "title":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setTitle((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "uid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setUid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImagingStudyInstance");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImagingStudyInstance _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "number":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getNumber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setNumber(_field_);
				}
				return _field_;}
			case "content":
				List<com.dtc.fhir.gwt.Attachment> contentList = _instance_.getContent();
				if (contentList.size() < _index_ + 1) {
					contentList.add(new com.dtc.fhir.gwt.Attachment());
				}
				return contentList.get(Math.min(contentList.size() - 1, _index_));
			case "sopClass":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getSopClass();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setSopClass(_field_);
				}
				return _field_;}
			case "title":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getTitle();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setTitle(_field_);
				}
				return _field_;}
			case "uid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getUid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setUid(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImagingStudyInstance");
			}
		}
	}
	private static class SetImagingStudySeries {
		static void set(com.dtc.fhir.gwt.ImagingStudySeries instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImagingStudySeries instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "instance":
				if (value instanceof com.dtc.fhir.gwt.ImagingStudyInstance || value == null) {
					List<com.dtc.fhir.gwt.ImagingStudyInstance> instanceList = instance.getInstance();
					if (instanceList.size() < index + 1) {
						instanceList.add((com.dtc.fhir.gwt.ImagingStudyInstance)value);
					} else {
						instanceList.set(Math.min(instanceList.size() - 1, index), (com.dtc.fhir.gwt.ImagingStudyInstance)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "number":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setNumber((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "bodySite":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setBodySite((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "availability":
				if (value instanceof com.dtc.fhir.gwt.InstanceAvailability || value == null) {
					instance.setAvailability((com.dtc.fhir.gwt.InstanceAvailability)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.InstanceAvailability");
				}
				break;
			case "numberOfInstances":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setNumberOfInstances((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "started":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setStarted((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "uid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setUid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "modality":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setModality((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "laterality":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setLaterality((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImagingStudySeries");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImagingStudySeries _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "instance":
				List<com.dtc.fhir.gwt.ImagingStudyInstance> instanceList = _instance_.getInstance();
				if (instanceList.size() < _index_ + 1) {
					instanceList.add(new com.dtc.fhir.gwt.ImagingStudyInstance());
				}
				return instanceList.get(Math.min(instanceList.size() - 1, _index_));
			case "number":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getNumber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setNumber(_field_);
				}
				return _field_;}
			case "bodySite":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getBodySite();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setBodySite(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "availability":
				{com.dtc.fhir.gwt.InstanceAvailability _field_ = _instance_.getAvailability();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.InstanceAvailability();
					_instance_.setAvailability(_field_);
				}
				return _field_;}
			case "numberOfInstances":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getNumberOfInstances();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setNumberOfInstances(_field_);
				}
				return _field_;}
			case "started":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getStarted();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setStarted(_field_);
				}
				return _field_;}
			case "uid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getUid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setUid(_field_);
				}
				return _field_;}
			case "modality":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getModality();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setModality(_field_);
				}
				return _field_;}
			case "laterality":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getLaterality();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setLaterality(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImagingStudySeries");
			}
		}
	}
	private static class SetImmunization {
		static void set(com.dtc.fhir.gwt.Immunization instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Immunization instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setLocation((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					List<com.dtc.fhir.gwt.Annotation> noteList = instance.getNote();
					if (noteList.size() < index + 1) {
						noteList.add((com.dtc.fhir.gwt.Annotation)value);
					} else {
						noteList.set(Math.min(noteList.size() - 1, index), (com.dtc.fhir.gwt.Annotation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "wasNotGiven":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setWasNotGiven((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "explanation":
				if (value instanceof com.dtc.fhir.gwt.ImmunizationExplanation || value == null) {
					instance.setExplanation((com.dtc.fhir.gwt.ImmunizationExplanation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ImmunizationExplanation");
				}
				break;
			case "vaccinationProtocol":
				if (value instanceof com.dtc.fhir.gwt.ImmunizationVaccinationProtocol || value == null) {
					List<com.dtc.fhir.gwt.ImmunizationVaccinationProtocol> vaccinationProtocolList = instance.getVaccinationProtocol();
					if (vaccinationProtocolList.size() < index + 1) {
						vaccinationProtocolList.add((com.dtc.fhir.gwt.ImmunizationVaccinationProtocol)value);
					} else {
						vaccinationProtocolList.set(Math.min(vaccinationProtocolList.size() - 1, index), (com.dtc.fhir.gwt.ImmunizationVaccinationProtocol)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "manufacturer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setManufacturer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "vaccineCode":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setVaccineCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "expirationDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setExpirationDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "doseQuantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setDoseQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "reported":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setReported((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "site":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSite((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "route":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRoute((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "requester":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequester((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "performer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPerformer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "lotNumber":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLotNumber((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "reaction":
				if (value instanceof com.dtc.fhir.gwt.ImmunizationReaction || value == null) {
					List<com.dtc.fhir.gwt.ImmunizationReaction> reactionList = instance.getReaction();
					if (reactionList.size() < index + 1) {
						reactionList.add((com.dtc.fhir.gwt.ImmunizationReaction)value);
					} else {
						reactionList.set(Math.min(reactionList.size() - 1, index), (com.dtc.fhir.gwt.ImmunizationReaction)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Immunization");
			}
		}

		static Object get(com.dtc.fhir.gwt.Immunization _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getLocation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setLocation(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "note":
				List<com.dtc.fhir.gwt.Annotation> noteList = _instance_.getNote();
				if (noteList.size() < _index_ + 1) {
					noteList.add(new com.dtc.fhir.gwt.Annotation());
				}
				return noteList.get(Math.min(noteList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "wasNotGiven":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getWasNotGiven();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setWasNotGiven(_field_);
				}
				return _field_;}
			case "explanation":
				{com.dtc.fhir.gwt.ImmunizationExplanation _field_ = _instance_.getExplanation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ImmunizationExplanation();
					_instance_.setExplanation(_field_);
				}
				return _field_;}
			case "vaccinationProtocol":
				List<com.dtc.fhir.gwt.ImmunizationVaccinationProtocol> vaccinationProtocolList = _instance_.getVaccinationProtocol();
				if (vaccinationProtocolList.size() < _index_ + 1) {
					vaccinationProtocolList.add(new com.dtc.fhir.gwt.ImmunizationVaccinationProtocol());
				}
				return vaccinationProtocolList.get(Math.min(vaccinationProtocolList.size() - 1, _index_));
			case "manufacturer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getManufacturer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setManufacturer(_field_);
				}
				return _field_;}
			case "vaccineCode":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getVaccineCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setVaccineCode(_field_);
				}
				return _field_;}
			case "expirationDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getExpirationDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setExpirationDate(_field_);
				}
				return _field_;}
			case "doseQuantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getDoseQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setDoseQuantity(_field_);
				}
				return _field_;}
			case "reported":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getReported();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setReported(_field_);
				}
				return _field_;}
			case "site":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSite();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSite(_field_);
				}
				return _field_;}
			case "route":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRoute();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRoute(_field_);
				}
				return _field_;}
			case "requester":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequester();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequester(_field_);
				}
				return _field_;}
			case "performer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPerformer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPerformer(_field_);
				}
				return _field_;}
			case "lotNumber":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLotNumber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLotNumber(_field_);
				}
				return _field_;}
			case "reaction":
				List<com.dtc.fhir.gwt.ImmunizationReaction> reactionList = _instance_.getReaction();
				if (reactionList.size() < _index_ + 1) {
					reactionList.add(new com.dtc.fhir.gwt.ImmunizationReaction());
				}
				return reactionList.get(Math.min(reactionList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Immunization");
			}
		}
	}
	private static class SetImmunizationExplanation {
		static void set(com.dtc.fhir.gwt.ImmunizationExplanation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImmunizationExplanation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonList = instance.getReason();
					if (reasonList.size() < index + 1) {
						reasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonList.set(Math.min(reasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reasonNotGiven":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonNotGivenList = instance.getReasonNotGiven();
					if (reasonNotGivenList.size() < index + 1) {
						reasonNotGivenList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonNotGivenList.set(Math.min(reasonNotGivenList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImmunizationExplanation");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImmunizationExplanation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "reason":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonList = _instance_.getReason();
				if (reasonList.size() < _index_ + 1) {
					reasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonList.get(Math.min(reasonList.size() - 1, _index_));
			case "reasonNotGiven":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonNotGivenList = _instance_.getReasonNotGiven();
				if (reasonNotGivenList.size() < _index_ + 1) {
					reasonNotGivenList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonNotGivenList.get(Math.min(reasonNotGivenList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImmunizationExplanation");
			}
		}
	}
	private static class SetImmunizationReaction {
		static void set(com.dtc.fhir.gwt.ImmunizationReaction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImmunizationReaction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "reported":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setReported((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDetail((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImmunizationReaction");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImmunizationReaction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "reported":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getReported();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setReported(_field_);
				}
				return _field_;}
			case "detail":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDetail();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDetail(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImmunizationReaction");
			}
		}
	}
	private static class SetImmunizationRecommendation {
		static void set(com.dtc.fhir.gwt.ImmunizationRecommendation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImmunizationRecommendation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "recommendation":
				if (value instanceof com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation || value == null) {
					List<com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation> recommendationList = instance.getRecommendation();
					if (recommendationList.size() < index + 1) {
						recommendationList.add((com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation)value);
					} else {
						recommendationList.set(Math.min(recommendationList.size() - 1, index), (com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImmunizationRecommendation");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImmunizationRecommendation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "recommendation":
				List<com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation> recommendationList = _instance_.getRecommendation();
				if (recommendationList.size() < _index_ + 1) {
					recommendationList.add(new com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation());
				}
				return recommendationList.get(Math.min(recommendationList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImmunizationRecommendation");
			}
		}
	}
	private static class SetImmunizationRecommendationDateCriterion {
		static void set(com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setValue((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImmunizationRecommendationDateCriterion");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImmunizationRecommendationDateCriterion");
			}
		}
	}
	private static class SetImmunizationRecommendationProtocol {
		static void set(com.dtc.fhir.gwt.ImmunizationRecommendationProtocol instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImmunizationRecommendationProtocol instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "authority":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthority((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "series":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setSeries((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "doseSequence":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setDoseSequence((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImmunizationRecommendationProtocol");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImmunizationRecommendationProtocol _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "authority":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthority(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "series":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getSeries();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setSeries(_field_);
				}
				return _field_;}
			case "doseSequence":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getDoseSequence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setDoseSequence(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImmunizationRecommendationProtocol");
			}
		}
	}
	private static class SetImmunizationRecommendationRecommendation {
		static void set(com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "protocol":
				if (value instanceof com.dtc.fhir.gwt.ImmunizationRecommendationProtocol || value == null) {
					instance.setProtocol((com.dtc.fhir.gwt.ImmunizationRecommendationProtocol)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ImmunizationRecommendationProtocol");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "supportingPatientInformation":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> supportingPatientInformationList = instance.getSupportingPatientInformation();
					if (supportingPatientInformationList.size() < index + 1) {
						supportingPatientInformationList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						supportingPatientInformationList.set(Math.min(supportingPatientInformationList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "vaccineCode":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setVaccineCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "doseNumber":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setDoseNumber((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "forecastStatus":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setForecastStatus((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "dateCriterion":
				if (value instanceof com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion || value == null) {
					List<com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion> dateCriterionList = instance.getDateCriterion();
					if (dateCriterionList.size() < index + 1) {
						dateCriterionList.add((com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion)value);
					} else {
						dateCriterionList.set(Math.min(dateCriterionList.size() - 1, index), (com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "supportingImmunization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> supportingImmunizationList = instance.getSupportingImmunization();
					if (supportingImmunizationList.size() < index + 1) {
						supportingImmunizationList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						supportingImmunizationList.set(Math.min(supportingImmunizationList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImmunizationRecommendationRecommendation");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImmunizationRecommendationRecommendation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "protocol":
				{com.dtc.fhir.gwt.ImmunizationRecommendationProtocol _field_ = _instance_.getProtocol();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ImmunizationRecommendationProtocol();
					_instance_.setProtocol(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "supportingPatientInformation":
				List<com.dtc.fhir.gwt.Reference> supportingPatientInformationList = _instance_.getSupportingPatientInformation();
				if (supportingPatientInformationList.size() < _index_ + 1) {
					supportingPatientInformationList.add(new com.dtc.fhir.gwt.Reference());
				}
				return supportingPatientInformationList.get(Math.min(supportingPatientInformationList.size() - 1, _index_));
			case "vaccineCode":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getVaccineCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setVaccineCode(_field_);
				}
				return _field_;}
			case "doseNumber":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getDoseNumber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setDoseNumber(_field_);
				}
				return _field_;}
			case "forecastStatus":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getForecastStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setForecastStatus(_field_);
				}
				return _field_;}
			case "dateCriterion":
				List<com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion> dateCriterionList = _instance_.getDateCriterion();
				if (dateCriterionList.size() < _index_ + 1) {
					dateCriterionList.add(new com.dtc.fhir.gwt.ImmunizationRecommendationDateCriterion());
				}
				return dateCriterionList.get(Math.min(dateCriterionList.size() - 1, _index_));
			case "supportingImmunization":
				List<com.dtc.fhir.gwt.Reference> supportingImmunizationList = _instance_.getSupportingImmunization();
				if (supportingImmunizationList.size() < _index_ + 1) {
					supportingImmunizationList.add(new com.dtc.fhir.gwt.Reference());
				}
				return supportingImmunizationList.get(Math.min(supportingImmunizationList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImmunizationRecommendationRecommendation");
			}
		}
	}
	private static class SetImmunizationVaccinationProtocol {
		static void set(com.dtc.fhir.gwt.ImmunizationVaccinationProtocol instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImmunizationVaccinationProtocol instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "authority":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthority((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "series":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setSeries((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "doseSequence":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setDoseSequence((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "seriesDoses":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setSeriesDoses((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "targetDisease":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> targetDiseaseList = instance.getTargetDisease();
					if (targetDiseaseList.size() < index + 1) {
						targetDiseaseList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						targetDiseaseList.set(Math.min(targetDiseaseList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "doseStatus":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setDoseStatus((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "doseStatusReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setDoseStatusReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImmunizationVaccinationProtocol");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImmunizationVaccinationProtocol _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "authority":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthority(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "series":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getSeries();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setSeries(_field_);
				}
				return _field_;}
			case "doseSequence":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getDoseSequence();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setDoseSequence(_field_);
				}
				return _field_;}
			case "seriesDoses":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getSeriesDoses();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setSeriesDoses(_field_);
				}
				return _field_;}
			case "targetDisease":
				List<com.dtc.fhir.gwt.CodeableConcept> targetDiseaseList = _instance_.getTargetDisease();
				if (targetDiseaseList.size() < _index_ + 1) {
					targetDiseaseList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return targetDiseaseList.get(Math.min(targetDiseaseList.size() - 1, _index_));
			case "doseStatus":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getDoseStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setDoseStatus(_field_);
				}
				return _field_;}
			case "doseStatusReason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getDoseStatusReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setDoseStatusReason(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImmunizationVaccinationProtocol");
			}
		}
	}
	private static class SetImplementationGuide {
		static void set(com.dtc.fhir.gwt.ImplementationGuide instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImplementationGuide instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "package":
				if (value instanceof com.dtc.fhir.gwt.ImplementationGuidePackage || value == null) {
					List<com.dtc.fhir.gwt.ImplementationGuidePackage> packageList = instance.getPackage();
					if (packageList.size() < index + 1) {
						packageList.add((com.dtc.fhir.gwt.ImplementationGuidePackage)value);
					} else {
						packageList.set(Math.min(packageList.size() - 1, index), (com.dtc.fhir.gwt.ImplementationGuidePackage)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.ImplementationGuideContact || value == null) {
					List<com.dtc.fhir.gwt.ImplementationGuideContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.ImplementationGuideContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.ImplementationGuideContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "copyright":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCopyright((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "experimental":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExperimental((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "useContext":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> useContextList = instance.getUseContext();
					if (useContextList.size() < index + 1) {
						useContextList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						useContextList.set(Math.min(useContextList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "fhirVersion":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setFhirVersion((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "dependency":
				if (value instanceof com.dtc.fhir.gwt.ImplementationGuideDependency || value == null) {
					List<com.dtc.fhir.gwt.ImplementationGuideDependency> dependencyList = instance.getDependency();
					if (dependencyList.size() < index + 1) {
						dependencyList.add((com.dtc.fhir.gwt.ImplementationGuideDependency)value);
					} else {
						dependencyList.set(Math.min(dependencyList.size() - 1, index), (com.dtc.fhir.gwt.ImplementationGuideDependency)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "global":
				if (value instanceof com.dtc.fhir.gwt.ImplementationGuideGlobal || value == null) {
					List<com.dtc.fhir.gwt.ImplementationGuideGlobal> globalList = instance.getGlobal();
					if (globalList.size() < index + 1) {
						globalList.add((com.dtc.fhir.gwt.ImplementationGuideGlobal)value);
					} else {
						globalList.set(Math.min(globalList.size() - 1, index), (com.dtc.fhir.gwt.ImplementationGuideGlobal)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "binary":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					List<com.dtc.fhir.gwt.Uri> binaryList = instance.getBinary();
					if (binaryList.size() < index + 1) {
						binaryList.add((com.dtc.fhir.gwt.Uri)value);
					} else {
						binaryList.set(Math.min(binaryList.size() - 1, index), (com.dtc.fhir.gwt.Uri)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "page":
				if (value instanceof com.dtc.fhir.gwt.ImplementationGuidePage || value == null) {
					instance.setPage((com.dtc.fhir.gwt.ImplementationGuidePage)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ImplementationGuidePage");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImplementationGuide");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImplementationGuide _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "package":
				List<com.dtc.fhir.gwt.ImplementationGuidePackage> packageList = _instance_.getPackage();
				if (packageList.size() < _index_ + 1) {
					packageList.add(new com.dtc.fhir.gwt.ImplementationGuidePackage());
				}
				return packageList.get(Math.min(packageList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.ImplementationGuideContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.ImplementationGuideContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "copyright":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCopyright();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCopyright(_field_);
				}
				return _field_;}
			case "experimental":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExperimental();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExperimental(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "useContext":
				List<com.dtc.fhir.gwt.CodeableConcept> useContextList = _instance_.getUseContext();
				if (useContextList.size() < _index_ + 1) {
					useContextList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return useContextList.get(Math.min(useContextList.size() - 1, _index_));
			case "fhirVersion":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getFhirVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setFhirVersion(_field_);
				}
				return _field_;}
			case "dependency":
				List<com.dtc.fhir.gwt.ImplementationGuideDependency> dependencyList = _instance_.getDependency();
				if (dependencyList.size() < _index_ + 1) {
					dependencyList.add(new com.dtc.fhir.gwt.ImplementationGuideDependency());
				}
				return dependencyList.get(Math.min(dependencyList.size() - 1, _index_));
			case "global":
				List<com.dtc.fhir.gwt.ImplementationGuideGlobal> globalList = _instance_.getGlobal();
				if (globalList.size() < _index_ + 1) {
					globalList.add(new com.dtc.fhir.gwt.ImplementationGuideGlobal());
				}
				return globalList.get(Math.min(globalList.size() - 1, _index_));
			case "binary":
				List<com.dtc.fhir.gwt.Uri> binaryList = _instance_.getBinary();
				if (binaryList.size() < _index_ + 1) {
					binaryList.add(new com.dtc.fhir.gwt.Uri());
				}
				return binaryList.get(Math.min(binaryList.size() - 1, _index_));
			case "page":
				{com.dtc.fhir.gwt.ImplementationGuidePage _field_ = _instance_.getPage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ImplementationGuidePage();
					_instance_.setPage(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImplementationGuide");
			}
		}
	}
	private static class SetImplementationGuideContact {
		static void set(com.dtc.fhir.gwt.ImplementationGuideContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImplementationGuideContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImplementationGuideContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImplementationGuideContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImplementationGuideContact");
			}
		}
	}
	private static class SetImplementationGuideDependency {
		static void set(com.dtc.fhir.gwt.ImplementationGuideDependency instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImplementationGuideDependency instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.GuideDependencyType || value == null) {
					instance.setType((com.dtc.fhir.gwt.GuideDependencyType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GuideDependencyType");
				}
				break;
			case "uri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImplementationGuideDependency");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImplementationGuideDependency _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.GuideDependencyType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.GuideDependencyType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "uri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUri(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImplementationGuideDependency");
			}
		}
	}
	private static class SetImplementationGuideGlobal {
		static void set(com.dtc.fhir.gwt.ImplementationGuideGlobal instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImplementationGuideGlobal instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "profile":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProfile((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImplementationGuideGlobal");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImplementationGuideGlobal _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "profile":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProfile();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProfile(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImplementationGuideGlobal");
			}
		}
	}
	private static class SetImplementationGuidePackage {
		static void set(com.dtc.fhir.gwt.ImplementationGuidePackage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImplementationGuidePackage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "resource":
				if (value instanceof com.dtc.fhir.gwt.ImplementationGuideResource || value == null) {
					List<com.dtc.fhir.gwt.ImplementationGuideResource> resourceList = instance.getResource();
					if (resourceList.size() < index + 1) {
						resourceList.add((com.dtc.fhir.gwt.ImplementationGuideResource)value);
					} else {
						resourceList.set(Math.min(resourceList.size() - 1, index), (com.dtc.fhir.gwt.ImplementationGuideResource)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImplementationGuidePackage");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImplementationGuidePackage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "resource":
				List<com.dtc.fhir.gwt.ImplementationGuideResource> resourceList = _instance_.getResource();
				if (resourceList.size() < _index_ + 1) {
					resourceList.add(new com.dtc.fhir.gwt.ImplementationGuideResource());
				}
				return resourceList.get(Math.min(resourceList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImplementationGuidePackage");
			}
		}
	}
	private static class SetImplementationGuidePage {
		static void set(com.dtc.fhir.gwt.ImplementationGuidePage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImplementationGuidePage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "package":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> packageList = instance.getPackage();
					if (packageList.size() < index + 1) {
						packageList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						packageList.set(Math.min(packageList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					List<com.dtc.fhir.gwt.Code> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.Code)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.Code)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSource((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "kind":
				if (value instanceof com.dtc.fhir.gwt.GuidePageKind || value == null) {
					instance.setKind((com.dtc.fhir.gwt.GuidePageKind)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GuidePageKind");
				}
				break;
			case "format":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setFormat((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "page":
				if (value instanceof com.dtc.fhir.gwt.ImplementationGuidePage || value == null) {
					List<com.dtc.fhir.gwt.ImplementationGuidePage> pageList = instance.getPage();
					if (pageList.size() < index + 1) {
						pageList.add((com.dtc.fhir.gwt.ImplementationGuidePage)value);
					} else {
						pageList.set(Math.min(pageList.size() - 1, index), (com.dtc.fhir.gwt.ImplementationGuidePage)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImplementationGuidePage");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImplementationGuidePage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "package":
				List<com.dtc.fhir.gwt.StringDt> packageList = _instance_.getPackage();
				if (packageList.size() < _index_ + 1) {
					packageList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return packageList.get(Math.min(packageList.size() - 1, _index_));
			case "type":
				List<com.dtc.fhir.gwt.Code> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.Code());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "source":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "kind":
				{com.dtc.fhir.gwt.GuidePageKind _field_ = _instance_.getKind();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.GuidePageKind();
					_instance_.setKind(_field_);
				}
				return _field_;}
			case "format":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getFormat();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setFormat(_field_);
				}
				return _field_;}
			case "page":
				List<com.dtc.fhir.gwt.ImplementationGuidePage> pageList = _instance_.getPage();
				if (pageList.size() < _index_ + 1) {
					pageList.add(new com.dtc.fhir.gwt.ImplementationGuidePage());
				}
				return pageList.get(Math.min(pageList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImplementationGuidePage");
			}
		}
	}
	private static class SetImplementationGuideResource {
		static void set(com.dtc.fhir.gwt.ImplementationGuideResource instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ImplementationGuideResource instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "sourceUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSourceUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "exampleFor":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setExampleFor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "sourceReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSourceReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "purpose":
				if (value instanceof com.dtc.fhir.gwt.GuideResourcePurpose || value == null) {
					instance.setPurpose((com.dtc.fhir.gwt.GuideResourcePurpose)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.GuideResourcePurpose");
				}
				break;
			case "acronym":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setAcronym((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ImplementationGuideResource");
			}
		}

		static Object get(com.dtc.fhir.gwt.ImplementationGuideResource _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "sourceUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSourceUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSourceUri(_field_);
				}
				return _field_;}
			case "exampleFor":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getExampleFor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setExampleFor(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "sourceReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSourceReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSourceReference(_field_);
				}
				return _field_;}
			case "purpose":
				{com.dtc.fhir.gwt.GuideResourcePurpose _field_ = _instance_.getPurpose();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.GuideResourcePurpose();
					_instance_.setPurpose(_field_);
				}
				return _field_;}
			case "acronym":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getAcronym();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setAcronym(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ImplementationGuideResource");
			}
		}
	}
	private static class SetInstanceAvailability {
		static void set(com.dtc.fhir.gwt.InstanceAvailability instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.InstanceAvailability instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.InstanceAvailabilityList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.InstanceAvailabilityList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.InstanceAvailabilityList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of InstanceAvailability");
			}
		}

		static Object get(com.dtc.fhir.gwt.InstanceAvailability _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.InstanceAvailabilityList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of InstanceAvailability");
			}
		}
	}
	private static class SetInstant {
		static void set(com.dtc.fhir.gwt.Instant instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Instant instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.util.Date || value == null) {
					instance.setValue((java.util.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a java.util.Date");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Instant");
			}
		}

		static Object get(com.dtc.fhir.gwt.Instant _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.util.Date _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.util.Date();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Instant");
			}
		}
	}
	private static class SetIntegerDt {
		static void set(com.dtc.fhir.gwt.IntegerDt instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.IntegerDt instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.Integer || value == null) {
					instance.setValue((java.lang.Integer)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.Integer");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of IntegerDt");
			}
		}

		static Object get(com.dtc.fhir.gwt.IntegerDt _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.Integer _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of IntegerDt");
			}
		}
	}
	private static class SetIssueSeverity {
		static void set(com.dtc.fhir.gwt.IssueSeverity instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.IssueSeverity instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.IssueSeverityList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.IssueSeverityList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IssueSeverityList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of IssueSeverity");
			}
		}

		static Object get(com.dtc.fhir.gwt.IssueSeverity _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.IssueSeverityList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of IssueSeverity");
			}
		}
	}
	private static class SetIssueType {
		static void set(com.dtc.fhir.gwt.IssueType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.IssueType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.IssueTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.IssueTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IssueTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of IssueType");
			}
		}

		static Object get(com.dtc.fhir.gwt.IssueType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.IssueTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of IssueType");
			}
		}
	}
	private static class SetLinkType {
		static void set(com.dtc.fhir.gwt.LinkType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.LinkType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.LinkTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.LinkTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.LinkTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of LinkType");
			}
		}

		static Object get(com.dtc.fhir.gwt.LinkType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.LinkTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of LinkType");
			}
		}
	}
	private static class SetListDt {
		static void set(com.dtc.fhir.gwt.ListDt instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ListDt instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "entry":
				if (value instanceof com.dtc.fhir.gwt.ListEntry || value == null) {
					List<com.dtc.fhir.gwt.ListEntry> entryList = instance.getEntry();
					if (entryList.size() < index + 1) {
						entryList.add((com.dtc.fhir.gwt.ListEntry)value);
					} else {
						entryList.set(Math.min(entryList.size() - 1, index), (com.dtc.fhir.gwt.ListEntry)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.ListStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.ListStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ListStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setNote((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSource((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "emptyReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setEmptyReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "title":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setTitle((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "orderedBy":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setOrderedBy((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "mode":
				if (value instanceof com.dtc.fhir.gwt.ListMode || value == null) {
					instance.setMode((com.dtc.fhir.gwt.ListMode)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ListMode");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ListDt");
			}
		}

		static Object get(com.dtc.fhir.gwt.ListDt _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "entry":
				List<com.dtc.fhir.gwt.ListEntry> entryList = _instance_.getEntry();
				if (entryList.size() < _index_ + 1) {
					entryList.add(new com.dtc.fhir.gwt.ListEntry());
				}
				return entryList.get(Math.min(entryList.size() - 1, _index_));
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.ListStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ListStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "note":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "source":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "emptyReason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getEmptyReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setEmptyReason(_field_);
				}
				return _field_;}
			case "title":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getTitle();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setTitle(_field_);
				}
				return _field_;}
			case "orderedBy":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getOrderedBy();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setOrderedBy(_field_);
				}
				return _field_;}
			case "mode":
				{com.dtc.fhir.gwt.ListMode _field_ = _instance_.getMode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ListMode();
					_instance_.setMode(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ListDt");
			}
		}
	}
	private static class SetListEntry {
		static void set(com.dtc.fhir.gwt.ListEntry instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ListEntry instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "item":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setItem((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "flag":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setFlag((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "deleted":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setDeleted((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ListEntry");
			}
		}

		static Object get(com.dtc.fhir.gwt.ListEntry _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "item":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getItem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setItem(_field_);
				}
				return _field_;}
			case "flag":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getFlag();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setFlag(_field_);
				}
				return _field_;}
			case "deleted":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getDeleted();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setDeleted(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ListEntry");
			}
		}
	}
	private static class SetListMode {
		static void set(com.dtc.fhir.gwt.ListMode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ListMode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ListModeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ListModeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ListModeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ListMode");
			}
		}

		static Object get(com.dtc.fhir.gwt.ListMode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ListModeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ListMode");
			}
		}
	}
	private static class SetListStatus {
		static void set(com.dtc.fhir.gwt.ListStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ListStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ListStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ListStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ListStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ListStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ListStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ListStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ListStatus");
			}
		}
	}
	private static class SetLocation {
		static void set(com.dtc.fhir.gwt.Location instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Location instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.LocationStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.LocationStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.LocationStatus");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "managingOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setManagingOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "physicalType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setPhysicalType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "mode":
				if (value instanceof com.dtc.fhir.gwt.LocationMode || value == null) {
					instance.setMode((com.dtc.fhir.gwt.LocationMode)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.LocationMode");
				}
				break;
			case "partOf":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPartOf((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "position":
				if (value instanceof com.dtc.fhir.gwt.LocationPosition || value == null) {
					instance.setPosition((com.dtc.fhir.gwt.LocationPosition)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.LocationPosition");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Location");
			}
		}

		static Object get(com.dtc.fhir.gwt.Location _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setAddress(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.LocationStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.LocationStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "managingOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getManagingOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setManagingOrganization(_field_);
				}
				return _field_;}
			case "physicalType":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getPhysicalType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setPhysicalType(_field_);
				}
				return _field_;}
			case "mode":
				{com.dtc.fhir.gwt.LocationMode _field_ = _instance_.getMode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.LocationMode();
					_instance_.setMode(_field_);
				}
				return _field_;}
			case "partOf":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPartOf();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPartOf(_field_);
				}
				return _field_;}
			case "position":
				{com.dtc.fhir.gwt.LocationPosition _field_ = _instance_.getPosition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.LocationPosition();
					_instance_.setPosition(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Location");
			}
		}
	}
	private static class SetLocationMode {
		static void set(com.dtc.fhir.gwt.LocationMode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.LocationMode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.LocationModeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.LocationModeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.LocationModeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of LocationMode");
			}
		}

		static Object get(com.dtc.fhir.gwt.LocationMode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.LocationModeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of LocationMode");
			}
		}
	}
	private static class SetLocationPosition {
		static void set(com.dtc.fhir.gwt.LocationPosition instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.LocationPosition instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "longitude":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setLongitude((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "latitude":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setLatitude((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "altitude":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setAltitude((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of LocationPosition");
			}
		}

		static Object get(com.dtc.fhir.gwt.LocationPosition _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "longitude":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getLongitude();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setLongitude(_field_);
				}
				return _field_;}
			case "latitude":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getLatitude();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setLatitude(_field_);
				}
				return _field_;}
			case "altitude":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getAltitude();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setAltitude(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of LocationPosition");
			}
		}
	}
	private static class SetLocationStatus {
		static void set(com.dtc.fhir.gwt.LocationStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.LocationStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.LocationStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.LocationStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.LocationStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of LocationStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.LocationStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.LocationStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of LocationStatus");
			}
		}
	}
	private static class SetMarkdown {
		static void set(com.dtc.fhir.gwt.Markdown instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Markdown instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Markdown");
			}
		}

		static Object get(com.dtc.fhir.gwt.Markdown _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Markdown");
			}
		}
	}
	private static class SetMeasmntPrinciple {
		static void set(com.dtc.fhir.gwt.MeasmntPrinciple instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MeasmntPrinciple instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.MeasmntPrincipleList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.MeasmntPrincipleList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MeasmntPrincipleList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MeasmntPrinciple");
			}
		}

		static Object get(com.dtc.fhir.gwt.MeasmntPrinciple _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.MeasmntPrincipleList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MeasmntPrinciple");
			}
		}
	}
	private static class SetMedia {
		static void set(com.dtc.fhir.gwt.Media instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Media instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.DigitalMediaType || value == null) {
					instance.setType((com.dtc.fhir.gwt.DigitalMediaType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DigitalMediaType");
				}
				break;
			case "content":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setContent((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "deviceName":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDeviceName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "subtype":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSubtype((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "operator":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOperator((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "view":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setView((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "height":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setHeight((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "width":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setWidth((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "frames":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setFrames((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "duration":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setDuration((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Media");
			}
		}

		static Object get(com.dtc.fhir.gwt.Media _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.DigitalMediaType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DigitalMediaType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "content":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getContent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setContent(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "deviceName":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDeviceName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDeviceName(_field_);
				}
				return _field_;}
			case "subtype":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSubtype();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSubtype(_field_);
				}
				return _field_;}
			case "operator":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOperator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOperator(_field_);
				}
				return _field_;}
			case "view":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getView();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setView(_field_);
				}
				return _field_;}
			case "height":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getHeight();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setHeight(_field_);
				}
				return _field_;}
			case "width":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getWidth();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setWidth(_field_);
				}
				return _field_;}
			case "frames":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getFrames();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setFrames(_field_);
				}
				return _field_;}
			case "duration":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getDuration();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setDuration(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Media");
			}
		}
	}
	private static class SetMedication {
		static void set(com.dtc.fhir.gwt.Medication instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Medication instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "package":
				if (value instanceof com.dtc.fhir.gwt.MedicationPackage || value == null) {
					instance.setPackage((com.dtc.fhir.gwt.MedicationPackage)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationPackage");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "manufacturer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setManufacturer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "isBrand":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setIsBrand((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "product":
				if (value instanceof com.dtc.fhir.gwt.MedicationProduct || value == null) {
					instance.setProduct((com.dtc.fhir.gwt.MedicationProduct)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationProduct");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Medication");
			}
		}

		static Object get(com.dtc.fhir.gwt.Medication _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "package":
				{com.dtc.fhir.gwt.MedicationPackage _field_ = _instance_.getPackage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationPackage();
					_instance_.setPackage(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "manufacturer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getManufacturer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setManufacturer(_field_);
				}
				return _field_;}
			case "isBrand":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getIsBrand();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setIsBrand(_field_);
				}
				return _field_;}
			case "product":
				{com.dtc.fhir.gwt.MedicationProduct _field_ = _instance_.getProduct();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationProduct();
					_instance_.setProduct(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Medication");
			}
		}
	}
	private static class SetMedicationAdministration {
		static void set(com.dtc.fhir.gwt.MedicationAdministration instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationAdministration instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "status":
				if (value instanceof com.dtc.fhir.gwt.MedicationAdministrationStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.MedicationAdministrationStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationAdministrationStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "device":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> deviceList = instance.getDevice();
					if (deviceList.size() < index + 1) {
						deviceList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						deviceList.set(Math.min(deviceList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setNote((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "dosage":
				if (value instanceof com.dtc.fhir.gwt.MedicationAdministrationDosage || value == null) {
					instance.setDosage((com.dtc.fhir.gwt.MedicationAdministrationDosage)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationAdministrationDosage");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "practitioner":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPractitioner((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "prescription":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPrescription((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "wasNotGiven":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setWasNotGiven((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "reasonNotGiven":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonNotGivenList = instance.getReasonNotGiven();
					if (reasonNotGivenList.size() < index + 1) {
						reasonNotGivenList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonNotGivenList.set(Math.min(reasonNotGivenList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reasonGiven":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonGivenList = instance.getReasonGiven();
					if (reasonGivenList.size() < index + 1) {
						reasonGivenList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonGivenList.set(Math.min(reasonGivenList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "effectiveTimeDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setEffectiveTimeDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "effectiveTimePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setEffectiveTimePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "medicationCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMedicationCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "medicationReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setMedicationReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationAdministration");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationAdministration _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "status":
				{com.dtc.fhir.gwt.MedicationAdministrationStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationAdministrationStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "device":
				List<com.dtc.fhir.gwt.Reference> deviceList = _instance_.getDevice();
				if (deviceList.size() < _index_ + 1) {
					deviceList.add(new com.dtc.fhir.gwt.Reference());
				}
				return deviceList.get(Math.min(deviceList.size() - 1, _index_));
			case "note":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "dosage":
				{com.dtc.fhir.gwt.MedicationAdministrationDosage _field_ = _instance_.getDosage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationAdministrationDosage();
					_instance_.setDosage(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "practitioner":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPractitioner();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPractitioner(_field_);
				}
				return _field_;}
			case "prescription":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPrescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPrescription(_field_);
				}
				return _field_;}
			case "wasNotGiven":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getWasNotGiven();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setWasNotGiven(_field_);
				}
				return _field_;}
			case "reasonNotGiven":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonNotGivenList = _instance_.getReasonNotGiven();
				if (reasonNotGivenList.size() < _index_ + 1) {
					reasonNotGivenList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonNotGivenList.get(Math.min(reasonNotGivenList.size() - 1, _index_));
			case "reasonGiven":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonGivenList = _instance_.getReasonGiven();
				if (reasonGivenList.size() < _index_ + 1) {
					reasonGivenList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonGivenList.get(Math.min(reasonGivenList.size() - 1, _index_));
			case "effectiveTimeDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getEffectiveTimeDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setEffectiveTimeDateTime(_field_);
				}
				return _field_;}
			case "effectiveTimePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getEffectiveTimePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setEffectiveTimePeriod(_field_);
				}
				return _field_;}
			case "medicationCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMedicationCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMedicationCodeableConcept(_field_);
				}
				return _field_;}
			case "medicationReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getMedicationReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setMedicationReference(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationAdministration");
			}
		}
	}
	private static class SetMedicationAdministrationDosage {
		static void set(com.dtc.fhir.gwt.MedicationAdministrationDosage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationAdministrationDosage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "method":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMethod((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "siteCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSiteCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "siteReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSiteReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "route":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRoute((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "rateRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setRateRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "rateRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setRateRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationAdministrationDosage");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationAdministrationDosage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "method":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMethod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMethod(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "siteCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSiteCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSiteCodeableConcept(_field_);
				}
				return _field_;}
			case "siteReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSiteReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSiteReference(_field_);
				}
				return _field_;}
			case "route":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRoute();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRoute(_field_);
				}
				return _field_;}
			case "rateRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getRateRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setRateRatio(_field_);
				}
				return _field_;}
			case "rateRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getRateRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setRateRange(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationAdministrationDosage");
			}
		}
	}
	private static class SetMedicationAdministrationStatus {
		static void set(com.dtc.fhir.gwt.MedicationAdministrationStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationAdministrationStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.MedicationAdministrationStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.MedicationAdministrationStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationAdministrationStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationAdministrationStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationAdministrationStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.MedicationAdministrationStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationAdministrationStatus");
			}
		}
	}
	private static class SetMedicationBatch {
		static void set(com.dtc.fhir.gwt.MedicationBatch instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationBatch instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "expirationDate":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setExpirationDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "lotNumber":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLotNumber((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationBatch");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationBatch _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "expirationDate":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getExpirationDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setExpirationDate(_field_);
				}
				return _field_;}
			case "lotNumber":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLotNumber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLotNumber(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationBatch");
			}
		}
	}
	private static class SetMedicationContent {
		static void set(com.dtc.fhir.gwt.MedicationContent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationContent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "item":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setItem((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "amount":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setAmount((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationContent");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationContent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "item":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getItem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setItem(_field_);
				}
				return _field_;}
			case "amount":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setAmount(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationContent");
			}
		}
	}
	private static class SetMedicationDispense {
		static void set(com.dtc.fhir.gwt.MedicationDispense instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationDispense instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.MedicationDispenseStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.MedicationDispenseStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationDispenseStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setNote((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "medicationCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMedicationCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "medicationReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setMedicationReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "destination":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDestination((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "whenPrepared":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setWhenPrepared((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "dosageInstruction":
				if (value instanceof com.dtc.fhir.gwt.MedicationDispenseDosageInstruction || value == null) {
					List<com.dtc.fhir.gwt.MedicationDispenseDosageInstruction> dosageInstructionList = instance.getDosageInstruction();
					if (dosageInstructionList.size() < index + 1) {
						dosageInstructionList.add((com.dtc.fhir.gwt.MedicationDispenseDosageInstruction)value);
					} else {
						dosageInstructionList.set(Math.min(dosageInstructionList.size() - 1, index), (com.dtc.fhir.gwt.MedicationDispenseDosageInstruction)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "substitution":
				if (value instanceof com.dtc.fhir.gwt.MedicationDispenseSubstitution || value == null) {
					instance.setSubstitution((com.dtc.fhir.gwt.MedicationDispenseSubstitution)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationDispenseSubstitution");
				}
				break;
			case "authorizingPrescription":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> authorizingPrescriptionList = instance.getAuthorizingPrescription();
					if (authorizingPrescriptionList.size() < index + 1) {
						authorizingPrescriptionList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						authorizingPrescriptionList.set(Math.min(authorizingPrescriptionList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "daysSupply":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setDaysSupply((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "whenHandedOver":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setWhenHandedOver((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "dispenser":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDispenser((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "receiver":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> receiverList = instance.getReceiver();
					if (receiverList.size() < index + 1) {
						receiverList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						receiverList.set(Math.min(receiverList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationDispense");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationDispense _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.MedicationDispenseStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationDispenseStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "note":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "medicationCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMedicationCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMedicationCodeableConcept(_field_);
				}
				return _field_;}
			case "medicationReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getMedicationReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setMedicationReference(_field_);
				}
				return _field_;}
			case "destination":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDestination();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDestination(_field_);
				}
				return _field_;}
			case "whenPrepared":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getWhenPrepared();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setWhenPrepared(_field_);
				}
				return _field_;}
			case "dosageInstruction":
				List<com.dtc.fhir.gwt.MedicationDispenseDosageInstruction> dosageInstructionList = _instance_.getDosageInstruction();
				if (dosageInstructionList.size() < _index_ + 1) {
					dosageInstructionList.add(new com.dtc.fhir.gwt.MedicationDispenseDosageInstruction());
				}
				return dosageInstructionList.get(Math.min(dosageInstructionList.size() - 1, _index_));
			case "substitution":
				{com.dtc.fhir.gwt.MedicationDispenseSubstitution _field_ = _instance_.getSubstitution();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationDispenseSubstitution();
					_instance_.setSubstitution(_field_);
				}
				return _field_;}
			case "authorizingPrescription":
				List<com.dtc.fhir.gwt.Reference> authorizingPrescriptionList = _instance_.getAuthorizingPrescription();
				if (authorizingPrescriptionList.size() < _index_ + 1) {
					authorizingPrescriptionList.add(new com.dtc.fhir.gwt.Reference());
				}
				return authorizingPrescriptionList.get(Math.min(authorizingPrescriptionList.size() - 1, _index_));
			case "daysSupply":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getDaysSupply();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setDaysSupply(_field_);
				}
				return _field_;}
			case "whenHandedOver":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getWhenHandedOver();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setWhenHandedOver(_field_);
				}
				return _field_;}
			case "dispenser":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDispenser();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDispenser(_field_);
				}
				return _field_;}
			case "receiver":
				List<com.dtc.fhir.gwt.Reference> receiverList = _instance_.getReceiver();
				if (receiverList.size() < _index_ + 1) {
					receiverList.add(new com.dtc.fhir.gwt.Reference());
				}
				return receiverList.get(Math.min(receiverList.size() - 1, _index_));
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationDispense");
			}
		}
	}
	private static class SetMedicationDispenseDosageInstruction {
		static void set(com.dtc.fhir.gwt.MedicationDispenseDosageInstruction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationDispenseDosageInstruction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "method":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMethod((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "siteCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSiteCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "siteReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSiteReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "asNeededBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAsNeededBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "asNeededCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAsNeededCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "doseQuantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setDoseQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "route":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRoute((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "rateRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setRateRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "rateRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setRateRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "timing":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "doseRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setDoseRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "additionalInstructions":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAdditionalInstructions((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "maxDosePerPeriod":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setMaxDosePerPeriod((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationDispenseDosageInstruction");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationDispenseDosageInstruction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "method":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMethod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMethod(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "siteCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSiteCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSiteCodeableConcept(_field_);
				}
				return _field_;}
			case "siteReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSiteReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSiteReference(_field_);
				}
				return _field_;}
			case "asNeededBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAsNeededBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAsNeededBoolean(_field_);
				}
				return _field_;}
			case "asNeededCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAsNeededCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAsNeededCodeableConcept(_field_);
				}
				return _field_;}
			case "doseQuantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getDoseQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setDoseQuantity(_field_);
				}
				return _field_;}
			case "route":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRoute();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRoute(_field_);
				}
				return _field_;}
			case "rateRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getRateRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setRateRatio(_field_);
				}
				return _field_;}
			case "rateRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getRateRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setRateRange(_field_);
				}
				return _field_;}
			case "timing":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setTiming(_field_);
				}
				return _field_;}
			case "doseRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getDoseRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setDoseRange(_field_);
				}
				return _field_;}
			case "additionalInstructions":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAdditionalInstructions();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAdditionalInstructions(_field_);
				}
				return _field_;}
			case "maxDosePerPeriod":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getMaxDosePerPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setMaxDosePerPeriod(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationDispenseDosageInstruction");
			}
		}
	}
	private static class SetMedicationDispenseStatus {
		static void set(com.dtc.fhir.gwt.MedicationDispenseStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationDispenseStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.MedicationDispenseStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.MedicationDispenseStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationDispenseStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationDispenseStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationDispenseStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.MedicationDispenseStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationDispenseStatus");
			}
		}
	}
	private static class SetMedicationDispenseSubstitution {
		static void set(com.dtc.fhir.gwt.MedicationDispenseSubstitution instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationDispenseSubstitution instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonList = instance.getReason();
					if (reasonList.size() < index + 1) {
						reasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonList.set(Math.min(reasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "responsibleParty":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> responsiblePartyList = instance.getResponsibleParty();
					if (responsiblePartyList.size() < index + 1) {
						responsiblePartyList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						responsiblePartyList.set(Math.min(responsiblePartyList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationDispenseSubstitution");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationDispenseSubstitution _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "reason":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonList = _instance_.getReason();
				if (reasonList.size() < _index_ + 1) {
					reasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonList.get(Math.min(reasonList.size() - 1, _index_));
			case "responsibleParty":
				List<com.dtc.fhir.gwt.Reference> responsiblePartyList = _instance_.getResponsibleParty();
				if (responsiblePartyList.size() < _index_ + 1) {
					responsiblePartyList.add(new com.dtc.fhir.gwt.Reference());
				}
				return responsiblePartyList.get(Math.min(responsiblePartyList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationDispenseSubstitution");
			}
		}
	}
	private static class SetMedicationIngredient {
		static void set(com.dtc.fhir.gwt.MedicationIngredient instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationIngredient instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "item":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setItem((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "amount":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setAmount((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationIngredient");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationIngredient _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "item":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getItem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setItem(_field_);
				}
				return _field_;}
			case "amount":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setAmount(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationIngredient");
			}
		}
	}
	private static class SetMedicationOrder {
		static void set(com.dtc.fhir.gwt.MedicationOrder instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationOrder instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "status":
				if (value instanceof com.dtc.fhir.gwt.MedicationOrderStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.MedicationOrderStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationOrderStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setNote((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "medicationCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMedicationCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "medicationReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setMedicationReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "reasonCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReasonCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reasonReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReasonReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "dateWritten":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDateWritten((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "reasonEnded":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReasonEnded((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "prescriber":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPrescriber((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "dosageInstruction":
				if (value instanceof com.dtc.fhir.gwt.MedicationOrderDosageInstruction || value == null) {
					List<com.dtc.fhir.gwt.MedicationOrderDosageInstruction> dosageInstructionList = instance.getDosageInstruction();
					if (dosageInstructionList.size() < index + 1) {
						dosageInstructionList.add((com.dtc.fhir.gwt.MedicationOrderDosageInstruction)value);
					} else {
						dosageInstructionList.set(Math.min(dosageInstructionList.size() - 1, index), (com.dtc.fhir.gwt.MedicationOrderDosageInstruction)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "dispenseRequest":
				if (value instanceof com.dtc.fhir.gwt.MedicationOrderDispenseRequest || value == null) {
					instance.setDispenseRequest((com.dtc.fhir.gwt.MedicationOrderDispenseRequest)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationOrderDispenseRequest");
				}
				break;
			case "substitution":
				if (value instanceof com.dtc.fhir.gwt.MedicationOrderSubstitution || value == null) {
					instance.setSubstitution((com.dtc.fhir.gwt.MedicationOrderSubstitution)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationOrderSubstitution");
				}
				break;
			case "priorPrescription":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPriorPrescription((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "dateEnded":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDateEnded((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationOrder");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationOrder _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "status":
				{com.dtc.fhir.gwt.MedicationOrderStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationOrderStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "note":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "medicationCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMedicationCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMedicationCodeableConcept(_field_);
				}
				return _field_;}
			case "medicationReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getMedicationReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setMedicationReference(_field_);
				}
				return _field_;}
			case "reasonCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReasonCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReasonCodeableConcept(_field_);
				}
				return _field_;}
			case "reasonReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReasonReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReasonReference(_field_);
				}
				return _field_;}
			case "dateWritten":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDateWritten();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDateWritten(_field_);
				}
				return _field_;}
			case "reasonEnded":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReasonEnded();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReasonEnded(_field_);
				}
				return _field_;}
			case "prescriber":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPrescriber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPrescriber(_field_);
				}
				return _field_;}
			case "dosageInstruction":
				List<com.dtc.fhir.gwt.MedicationOrderDosageInstruction> dosageInstructionList = _instance_.getDosageInstruction();
				if (dosageInstructionList.size() < _index_ + 1) {
					dosageInstructionList.add(new com.dtc.fhir.gwt.MedicationOrderDosageInstruction());
				}
				return dosageInstructionList.get(Math.min(dosageInstructionList.size() - 1, _index_));
			case "dispenseRequest":
				{com.dtc.fhir.gwt.MedicationOrderDispenseRequest _field_ = _instance_.getDispenseRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationOrderDispenseRequest();
					_instance_.setDispenseRequest(_field_);
				}
				return _field_;}
			case "substitution":
				{com.dtc.fhir.gwt.MedicationOrderSubstitution _field_ = _instance_.getSubstitution();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationOrderSubstitution();
					_instance_.setSubstitution(_field_);
				}
				return _field_;}
			case "priorPrescription":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPriorPrescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPriorPrescription(_field_);
				}
				return _field_;}
			case "dateEnded":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDateEnded();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDateEnded(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationOrder");
			}
		}
	}
	private static class SetMedicationOrderDispenseRequest {
		static void set(com.dtc.fhir.gwt.MedicationOrderDispenseRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationOrderDispenseRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "medicationCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMedicationCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "medicationReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setMedicationReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "validityPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setValidityPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "numberOfRepeatsAllowed":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setNumberOfRepeatsAllowed((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "expectedSupplyDuration":
				if (value instanceof com.dtc.fhir.gwt.Duration || value == null) {
					instance.setExpectedSupplyDuration((com.dtc.fhir.gwt.Duration)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Duration");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationOrderDispenseRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationOrderDispenseRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "medicationCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMedicationCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMedicationCodeableConcept(_field_);
				}
				return _field_;}
			case "medicationReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getMedicationReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setMedicationReference(_field_);
				}
				return _field_;}
			case "validityPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getValidityPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setValidityPeriod(_field_);
				}
				return _field_;}
			case "numberOfRepeatsAllowed":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getNumberOfRepeatsAllowed();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setNumberOfRepeatsAllowed(_field_);
				}
				return _field_;}
			case "expectedSupplyDuration":
				{com.dtc.fhir.gwt.Duration _field_ = _instance_.getExpectedSupplyDuration();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Duration();
					_instance_.setExpectedSupplyDuration(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationOrderDispenseRequest");
			}
		}
	}
	private static class SetMedicationOrderDosageInstruction {
		static void set(com.dtc.fhir.gwt.MedicationOrderDosageInstruction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationOrderDosageInstruction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "method":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMethod((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "siteCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSiteCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "siteReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSiteReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "asNeededBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAsNeededBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "asNeededCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAsNeededCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "doseQuantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setDoseQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "route":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRoute((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "rateRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setRateRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "rateRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setRateRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "timing":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "doseRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setDoseRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "additionalInstructions":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAdditionalInstructions((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "maxDosePerPeriod":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setMaxDosePerPeriod((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationOrderDosageInstruction");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationOrderDosageInstruction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "method":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMethod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMethod(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "siteCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSiteCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSiteCodeableConcept(_field_);
				}
				return _field_;}
			case "siteReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSiteReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSiteReference(_field_);
				}
				return _field_;}
			case "asNeededBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAsNeededBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAsNeededBoolean(_field_);
				}
				return _field_;}
			case "asNeededCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAsNeededCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAsNeededCodeableConcept(_field_);
				}
				return _field_;}
			case "doseQuantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getDoseQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setDoseQuantity(_field_);
				}
				return _field_;}
			case "route":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRoute();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRoute(_field_);
				}
				return _field_;}
			case "rateRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getRateRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setRateRatio(_field_);
				}
				return _field_;}
			case "rateRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getRateRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setRateRange(_field_);
				}
				return _field_;}
			case "timing":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setTiming(_field_);
				}
				return _field_;}
			case "doseRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getDoseRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setDoseRange(_field_);
				}
				return _field_;}
			case "additionalInstructions":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAdditionalInstructions();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAdditionalInstructions(_field_);
				}
				return _field_;}
			case "maxDosePerPeriod":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getMaxDosePerPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setMaxDosePerPeriod(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationOrderDosageInstruction");
			}
		}
	}
	private static class SetMedicationOrderStatus {
		static void set(com.dtc.fhir.gwt.MedicationOrderStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationOrderStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.MedicationOrderStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.MedicationOrderStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationOrderStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationOrderStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationOrderStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.MedicationOrderStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationOrderStatus");
			}
		}
	}
	private static class SetMedicationOrderSubstitution {
		static void set(com.dtc.fhir.gwt.MedicationOrderSubstitution instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationOrderSubstitution instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationOrderSubstitution");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationOrderSubstitution _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "reason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReason(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationOrderSubstitution");
			}
		}
	}
	private static class SetMedicationPackage {
		static void set(com.dtc.fhir.gwt.MedicationPackage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationPackage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "content":
				if (value instanceof com.dtc.fhir.gwt.MedicationContent || value == null) {
					List<com.dtc.fhir.gwt.MedicationContent> contentList = instance.getContent();
					if (contentList.size() < index + 1) {
						contentList.add((com.dtc.fhir.gwt.MedicationContent)value);
					} else {
						contentList.set(Math.min(contentList.size() - 1, index), (com.dtc.fhir.gwt.MedicationContent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "container":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setContainer((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationPackage");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationPackage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "content":
				List<com.dtc.fhir.gwt.MedicationContent> contentList = _instance_.getContent();
				if (contentList.size() < _index_ + 1) {
					contentList.add(new com.dtc.fhir.gwt.MedicationContent());
				}
				return contentList.get(Math.min(contentList.size() - 1, _index_));
			case "container":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getContainer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setContainer(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationPackage");
			}
		}
	}
	private static class SetMedicationProduct {
		static void set(com.dtc.fhir.gwt.MedicationProduct instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationProduct instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "ingredient":
				if (value instanceof com.dtc.fhir.gwt.MedicationIngredient || value == null) {
					List<com.dtc.fhir.gwt.MedicationIngredient> ingredientList = instance.getIngredient();
					if (ingredientList.size() < index + 1) {
						ingredientList.add((com.dtc.fhir.gwt.MedicationIngredient)value);
					} else {
						ingredientList.set(Math.min(ingredientList.size() - 1, index), (com.dtc.fhir.gwt.MedicationIngredient)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "batch":
				if (value instanceof com.dtc.fhir.gwt.MedicationBatch || value == null) {
					List<com.dtc.fhir.gwt.MedicationBatch> batchList = instance.getBatch();
					if (batchList.size() < index + 1) {
						batchList.add((com.dtc.fhir.gwt.MedicationBatch)value);
					} else {
						batchList.set(Math.min(batchList.size() - 1, index), (com.dtc.fhir.gwt.MedicationBatch)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "form":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setForm((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationProduct");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationProduct _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "ingredient":
				List<com.dtc.fhir.gwt.MedicationIngredient> ingredientList = _instance_.getIngredient();
				if (ingredientList.size() < _index_ + 1) {
					ingredientList.add(new com.dtc.fhir.gwt.MedicationIngredient());
				}
				return ingredientList.get(Math.min(ingredientList.size() - 1, _index_));
			case "batch":
				List<com.dtc.fhir.gwt.MedicationBatch> batchList = _instance_.getBatch();
				if (batchList.size() < _index_ + 1) {
					batchList.add(new com.dtc.fhir.gwt.MedicationBatch());
				}
				return batchList.get(Math.min(batchList.size() - 1, _index_));
			case "form":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getForm();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setForm(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationProduct");
			}
		}
	}
	private static class SetMedicationStatement {
		static void set(com.dtc.fhir.gwt.MedicationStatement instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationStatement instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "status":
				if (value instanceof com.dtc.fhir.gwt.MedicationStatementStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.MedicationStatementStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationStatementStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setNote((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "dosage":
				if (value instanceof com.dtc.fhir.gwt.MedicationStatementDosage || value == null) {
					List<com.dtc.fhir.gwt.MedicationStatementDosage> dosageList = instance.getDosage();
					if (dosageList.size() < index + 1) {
						dosageList.add((com.dtc.fhir.gwt.MedicationStatementDosage)value);
					} else {
						dosageList.set(Math.min(dosageList.size() - 1, index), (com.dtc.fhir.gwt.MedicationStatementDosage)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "medicationCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMedicationCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "medicationReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setMedicationReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "effectiveDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setEffectiveDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "effectivePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setEffectivePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "supportingInformation":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> supportingInformationList = instance.getSupportingInformation();
					if (supportingInformationList.size() < index + 1) {
						supportingInformationList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						supportingInformationList.set(Math.min(supportingInformationList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "informationSource":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setInformationSource((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "dateAsserted":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDateAsserted((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "wasNotTaken":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setWasNotTaken((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "reasonNotTaken":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonNotTakenList = instance.getReasonNotTaken();
					if (reasonNotTakenList.size() < index + 1) {
						reasonNotTakenList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonNotTakenList.set(Math.min(reasonNotTakenList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reasonForUseReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReasonForUseReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "reasonForUseCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReasonForUseCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationStatement");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationStatement _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "status":
				{com.dtc.fhir.gwt.MedicationStatementStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MedicationStatementStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "note":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getNote();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setNote(_field_);
				}
				return _field_;}
			case "dosage":
				List<com.dtc.fhir.gwt.MedicationStatementDosage> dosageList = _instance_.getDosage();
				if (dosageList.size() < _index_ + 1) {
					dosageList.add(new com.dtc.fhir.gwt.MedicationStatementDosage());
				}
				return dosageList.get(Math.min(dosageList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "medicationCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMedicationCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMedicationCodeableConcept(_field_);
				}
				return _field_;}
			case "medicationReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getMedicationReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setMedicationReference(_field_);
				}
				return _field_;}
			case "effectiveDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getEffectiveDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setEffectiveDateTime(_field_);
				}
				return _field_;}
			case "effectivePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getEffectivePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setEffectivePeriod(_field_);
				}
				return _field_;}
			case "supportingInformation":
				List<com.dtc.fhir.gwt.Reference> supportingInformationList = _instance_.getSupportingInformation();
				if (supportingInformationList.size() < _index_ + 1) {
					supportingInformationList.add(new com.dtc.fhir.gwt.Reference());
				}
				return supportingInformationList.get(Math.min(supportingInformationList.size() - 1, _index_));
			case "informationSource":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getInformationSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setInformationSource(_field_);
				}
				return _field_;}
			case "dateAsserted":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDateAsserted();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDateAsserted(_field_);
				}
				return _field_;}
			case "wasNotTaken":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getWasNotTaken();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setWasNotTaken(_field_);
				}
				return _field_;}
			case "reasonNotTaken":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonNotTakenList = _instance_.getReasonNotTaken();
				if (reasonNotTakenList.size() < _index_ + 1) {
					reasonNotTakenList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonNotTakenList.get(Math.min(reasonNotTakenList.size() - 1, _index_));
			case "reasonForUseReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReasonForUseReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReasonForUseReference(_field_);
				}
				return _field_;}
			case "reasonForUseCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReasonForUseCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReasonForUseCodeableConcept(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationStatement");
			}
		}
	}
	private static class SetMedicationStatementDosage {
		static void set(com.dtc.fhir.gwt.MedicationStatementDosage instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationStatementDosage instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "method":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMethod((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "siteCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSiteCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "siteReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSiteReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "asNeededBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAsNeededBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "asNeededCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAsNeededCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "route":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRoute((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "rateRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setRateRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "rateRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setRateRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "timing":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "maxDosePerPeriod":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setMaxDosePerPeriod((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "quantityQuantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantityQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "quantityRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setQuantityRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationStatementDosage");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationStatementDosage _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "method":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMethod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMethod(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "siteCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSiteCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSiteCodeableConcept(_field_);
				}
				return _field_;}
			case "siteReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSiteReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSiteReference(_field_);
				}
				return _field_;}
			case "asNeededBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAsNeededBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAsNeededBoolean(_field_);
				}
				return _field_;}
			case "asNeededCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAsNeededCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAsNeededCodeableConcept(_field_);
				}
				return _field_;}
			case "route":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRoute();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRoute(_field_);
				}
				return _field_;}
			case "rateRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getRateRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setRateRatio(_field_);
				}
				return _field_;}
			case "rateRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getRateRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setRateRange(_field_);
				}
				return _field_;}
			case "timing":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setTiming(_field_);
				}
				return _field_;}
			case "maxDosePerPeriod":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getMaxDosePerPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setMaxDosePerPeriod(_field_);
				}
				return _field_;}
			case "quantityQuantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantityQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantityQuantity(_field_);
				}
				return _field_;}
			case "quantityRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getQuantityRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setQuantityRange(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationStatementDosage");
			}
		}
	}
	private static class SetMedicationStatementStatus {
		static void set(com.dtc.fhir.gwt.MedicationStatementStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MedicationStatementStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.MedicationStatementStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.MedicationStatementStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MedicationStatementStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MedicationStatementStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.MedicationStatementStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.MedicationStatementStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MedicationStatementStatus");
			}
		}
	}
	private static class SetMessageHeader {
		static void set(com.dtc.fhir.gwt.MessageHeader instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MessageHeader instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "timestamp":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setTimestamp((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "data":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> dataList = instance.getData();
					if (dataList.size() < index + 1) {
						dataList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						dataList.set(Math.min(dataList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.MessageHeaderSource || value == null) {
					instance.setSource((com.dtc.fhir.gwt.MessageHeaderSource)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MessageHeaderSource");
				}
				break;
			case "destination":
				if (value instanceof com.dtc.fhir.gwt.MessageHeaderDestination || value == null) {
					List<com.dtc.fhir.gwt.MessageHeaderDestination> destinationList = instance.getDestination();
					if (destinationList.size() < index + 1) {
						destinationList.add((com.dtc.fhir.gwt.MessageHeaderDestination)value);
					} else {
						destinationList.set(Math.min(destinationList.size() - 1, index), (com.dtc.fhir.gwt.MessageHeaderDestination)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "responsible":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setResponsible((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "event":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setEvent((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "response":
				if (value instanceof com.dtc.fhir.gwt.MessageHeaderResponse || value == null) {
					instance.setResponse((com.dtc.fhir.gwt.MessageHeaderResponse)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MessageHeaderResponse");
				}
				break;
			case "enterer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEnterer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "receiver":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReceiver((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MessageHeader");
			}
		}

		static Object get(com.dtc.fhir.gwt.MessageHeader _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "timestamp":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getTimestamp();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setTimestamp(_field_);
				}
				return _field_;}
			case "data":
				List<com.dtc.fhir.gwt.Reference> dataList = _instance_.getData();
				if (dataList.size() < _index_ + 1) {
					dataList.add(new com.dtc.fhir.gwt.Reference());
				}
				return dataList.get(Math.min(dataList.size() - 1, _index_));
			case "reason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReason(_field_);
				}
				return _field_;}
			case "source":
				{com.dtc.fhir.gwt.MessageHeaderSource _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MessageHeaderSource();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "destination":
				List<com.dtc.fhir.gwt.MessageHeaderDestination> destinationList = _instance_.getDestination();
				if (destinationList.size() < _index_ + 1) {
					destinationList.add(new com.dtc.fhir.gwt.MessageHeaderDestination());
				}
				return destinationList.get(Math.min(destinationList.size() - 1, _index_));
			case "responsible":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getResponsible();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setResponsible(_field_);
				}
				return _field_;}
			case "event":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getEvent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setEvent(_field_);
				}
				return _field_;}
			case "response":
				{com.dtc.fhir.gwt.MessageHeaderResponse _field_ = _instance_.getResponse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.MessageHeaderResponse();
					_instance_.setResponse(_field_);
				}
				return _field_;}
			case "enterer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEnterer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEnterer(_field_);
				}
				return _field_;}
			case "author":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthor(_field_);
				}
				return _field_;}
			case "receiver":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReceiver();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReceiver(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MessageHeader");
			}
		}
	}
	private static class SetMessageHeaderDestination {
		static void set(com.dtc.fhir.gwt.MessageHeaderDestination instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MessageHeaderDestination instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "endpoint":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setEndpoint((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MessageHeaderDestination");
			}
		}

		static Object get(com.dtc.fhir.gwt.MessageHeaderDestination _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "endpoint":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getEndpoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setEndpoint(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MessageHeaderDestination");
			}
		}
	}
	private static class SetMessageHeaderResponse {
		static void set(com.dtc.fhir.gwt.MessageHeaderResponse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MessageHeaderResponse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.ResponseType || value == null) {
					instance.setCode((com.dtc.fhir.gwt.ResponseType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ResponseType");
				}
				break;
			case "details":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDetails((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MessageHeaderResponse");
			}
		}

		static Object get(com.dtc.fhir.gwt.MessageHeaderResponse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "identifier":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.ResponseType _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ResponseType();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "details":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDetails();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDetails(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MessageHeaderResponse");
			}
		}
	}
	private static class SetMessageHeaderSource {
		static void set(com.dtc.fhir.gwt.MessageHeaderSource instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MessageHeaderSource instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					instance.setContact((com.dtc.fhir.gwt.ContactPoint)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPoint");
				}
				break;
			case "endpoint":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setEndpoint((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "software":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setSoftware((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MessageHeaderSource");
			}
		}

		static Object get(com.dtc.fhir.gwt.MessageHeaderSource _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "contact":
				{com.dtc.fhir.gwt.ContactPoint _field_ = _instance_.getContact();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPoint();
					_instance_.setContact(_field_);
				}
				return _field_;}
			case "endpoint":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getEndpoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setEndpoint(_field_);
				}
				return _field_;}
			case "software":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getSoftware();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setSoftware(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MessageHeaderSource");
			}
		}
	}
	private static class SetMessageSignificanceCategory {
		static void set(com.dtc.fhir.gwt.MessageSignificanceCategory instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.MessageSignificanceCategory instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.MessageSignificanceCategoryList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.MessageSignificanceCategoryList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.MessageSignificanceCategoryList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of MessageSignificanceCategory");
			}
		}

		static Object get(com.dtc.fhir.gwt.MessageSignificanceCategory _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.MessageSignificanceCategoryList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of MessageSignificanceCategory");
			}
		}
	}
	private static class SetMeta {
		static void set(com.dtc.fhir.gwt.Meta instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Meta instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "tag":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> tagList = instance.getTag();
					if (tagList.size() < index + 1) {
						tagList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						tagList.set(Math.min(tagList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "profile":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					List<com.dtc.fhir.gwt.Uri> profileList = instance.getProfile();
					if (profileList.size() < index + 1) {
						profileList.add((com.dtc.fhir.gwt.Uri)value);
					} else {
						profileList.set(Math.min(profileList.size() - 1, index), (com.dtc.fhir.gwt.Uri)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "security":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> securityList = instance.getSecurity();
					if (securityList.size() < index + 1) {
						securityList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						securityList.set(Math.min(securityList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "versionId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setVersionId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "lastUpdated":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setLastUpdated((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Meta");
			}
		}

		static Object get(com.dtc.fhir.gwt.Meta _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "tag":
				List<com.dtc.fhir.gwt.Coding> tagList = _instance_.getTag();
				if (tagList.size() < _index_ + 1) {
					tagList.add(new com.dtc.fhir.gwt.Coding());
				}
				return tagList.get(Math.min(tagList.size() - 1, _index_));
			case "profile":
				List<com.dtc.fhir.gwt.Uri> profileList = _instance_.getProfile();
				if (profileList.size() < _index_ + 1) {
					profileList.add(new com.dtc.fhir.gwt.Uri());
				}
				return profileList.get(Math.min(profileList.size() - 1, _index_));
			case "security":
				List<com.dtc.fhir.gwt.Coding> securityList = _instance_.getSecurity();
				if (securityList.size() < _index_ + 1) {
					securityList.add(new com.dtc.fhir.gwt.Coding());
				}
				return securityList.get(Math.min(securityList.size() - 1, _index_));
			case "versionId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getVersionId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setVersionId(_field_);
				}
				return _field_;}
			case "lastUpdated":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getLastUpdated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setLastUpdated(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Meta");
			}
		}
	}
	private static class SetMoney {
		static void set(com.dtc.fhir.gwt.Money instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Money instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "comparator":
				if (value instanceof com.dtc.fhir.gwt.QuantityComparator || value == null) {
					instance.setComparator((com.dtc.fhir.gwt.QuantityComparator)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuantityComparator");
				}
				break;
			case "unit":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUnit((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Money");
			}
		}

		static Object get(com.dtc.fhir.gwt.Money _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "comparator":
				{com.dtc.fhir.gwt.QuantityComparator _field_ = _instance_.getComparator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuantityComparator();
					_instance_.setComparator(_field_);
				}
				return _field_;}
			case "unit":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUnit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUnit(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Money");
			}
		}
	}
	private static class SetNameUse {
		static void set(com.dtc.fhir.gwt.NameUse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NameUse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.NameUseList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.NameUseList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NameUseList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NameUse");
			}
		}

		static Object get(com.dtc.fhir.gwt.NameUse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.NameUseList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NameUse");
			}
		}
	}
	private static class SetNamingSystem {
		static void set(com.dtc.fhir.gwt.NamingSystem instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NamingSystem instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.NamingSystemContact || value == null) {
					List<com.dtc.fhir.gwt.NamingSystemContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.NamingSystemContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.NamingSystemContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "useContext":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> useContextList = instance.getUseContext();
					if (useContextList.size() < index + 1) {
						useContextList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						useContextList.set(Math.min(useContextList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "responsible":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setResponsible((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "replacedBy":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReplacedBy((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "kind":
				if (value instanceof com.dtc.fhir.gwt.NamingSystemType || value == null) {
					instance.setKind((com.dtc.fhir.gwt.NamingSystemType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NamingSystemType");
				}
				break;
			case "usage":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUsage((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "uniqueId":
				if (value instanceof com.dtc.fhir.gwt.NamingSystemUniqueId || value == null) {
					List<com.dtc.fhir.gwt.NamingSystemUniqueId> uniqueIdList = instance.getUniqueId();
					if (uniqueIdList.size() < index + 1) {
						uniqueIdList.add((com.dtc.fhir.gwt.NamingSystemUniqueId)value);
					} else {
						uniqueIdList.set(Math.min(uniqueIdList.size() - 1, index), (com.dtc.fhir.gwt.NamingSystemUniqueId)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NamingSystem");
			}
		}

		static Object get(com.dtc.fhir.gwt.NamingSystem _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.NamingSystemContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.NamingSystemContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "useContext":
				List<com.dtc.fhir.gwt.CodeableConcept> useContextList = _instance_.getUseContext();
				if (useContextList.size() < _index_ + 1) {
					useContextList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return useContextList.get(Math.min(useContextList.size() - 1, _index_));
			case "responsible":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getResponsible();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setResponsible(_field_);
				}
				return _field_;}
			case "replacedBy":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReplacedBy();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReplacedBy(_field_);
				}
				return _field_;}
			case "kind":
				{com.dtc.fhir.gwt.NamingSystemType _field_ = _instance_.getKind();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.NamingSystemType();
					_instance_.setKind(_field_);
				}
				return _field_;}
			case "usage":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUsage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUsage(_field_);
				}
				return _field_;}
			case "uniqueId":
				List<com.dtc.fhir.gwt.NamingSystemUniqueId> uniqueIdList = _instance_.getUniqueId();
				if (uniqueIdList.size() < _index_ + 1) {
					uniqueIdList.add(new com.dtc.fhir.gwt.NamingSystemUniqueId());
				}
				return uniqueIdList.get(Math.min(uniqueIdList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NamingSystem");
			}
		}
	}
	private static class SetNamingSystemContact {
		static void set(com.dtc.fhir.gwt.NamingSystemContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NamingSystemContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NamingSystemContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.NamingSystemContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NamingSystemContact");
			}
		}
	}
	private static class SetNamingSystemIdentifierType {
		static void set(com.dtc.fhir.gwt.NamingSystemIdentifierType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NamingSystemIdentifierType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.NamingSystemIdentifierTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.NamingSystemIdentifierTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NamingSystemIdentifierTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NamingSystemIdentifierType");
			}
		}

		static Object get(com.dtc.fhir.gwt.NamingSystemIdentifierType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.NamingSystemIdentifierTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NamingSystemIdentifierType");
			}
		}
	}
	private static class SetNamingSystemType {
		static void set(com.dtc.fhir.gwt.NamingSystemType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NamingSystemType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.NamingSystemTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.NamingSystemTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NamingSystemTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NamingSystemType");
			}
		}

		static Object get(com.dtc.fhir.gwt.NamingSystemType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.NamingSystemTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NamingSystemType");
			}
		}
	}
	private static class SetNamingSystemUniqueId {
		static void set(com.dtc.fhir.gwt.NamingSystemUniqueId instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NamingSystemUniqueId instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.NamingSystemIdentifierType || value == null) {
					instance.setType((com.dtc.fhir.gwt.NamingSystemIdentifierType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NamingSystemIdentifierType");
				}
				break;
			case "value":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValue((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "preferred":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setPreferred((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NamingSystemUniqueId");
			}
		}

		static Object get(com.dtc.fhir.gwt.NamingSystemUniqueId _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.NamingSystemIdentifierType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.NamingSystemIdentifierType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "value":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "preferred":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getPreferred();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setPreferred(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NamingSystemUniqueId");
			}
		}
	}
	private static class SetNarrative {
		static void set(com.dtc.fhir.gwt.Narrative instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Narrative instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "status":
				if (value instanceof com.dtc.fhir.gwt.NarrativeStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.NarrativeStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NarrativeStatus");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Narrative");
			}
		}

		static Object get(com.dtc.fhir.gwt.Narrative _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "status":
				{com.dtc.fhir.gwt.NarrativeStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.NarrativeStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Narrative");
			}
		}
	}
	private static class SetNarrativeStatus {
		static void set(com.dtc.fhir.gwt.NarrativeStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NarrativeStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.NarrativeStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.NarrativeStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NarrativeStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NarrativeStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.NarrativeStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.NarrativeStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NarrativeStatus");
			}
		}
	}
	private static class SetNoteType {
		static void set(com.dtc.fhir.gwt.NoteType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NoteType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.NoteTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.NoteTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NoteTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NoteType");
			}
		}

		static Object get(com.dtc.fhir.gwt.NoteType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.NoteTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NoteType");
			}
		}
	}
	private static class SetNutritionOrder {
		static void set(com.dtc.fhir.gwt.NutritionOrder instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NutritionOrder instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "status":
				if (value instanceof com.dtc.fhir.gwt.NutritionOrderStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.NutritionOrderStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NutritionOrderStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "allergyIntolerance":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> allergyIntoleranceList = instance.getAllergyIntolerance();
					if (allergyIntoleranceList.size() < index + 1) {
						allergyIntoleranceList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						allergyIntoleranceList.set(Math.min(allergyIntoleranceList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "foodPreferenceModifier":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> foodPreferenceModifierList = instance.getFoodPreferenceModifier();
					if (foodPreferenceModifierList.size() < index + 1) {
						foodPreferenceModifierList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						foodPreferenceModifierList.set(Math.min(foodPreferenceModifierList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "excludeFoodModifier":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> excludeFoodModifierList = instance.getExcludeFoodModifier();
					if (excludeFoodModifierList.size() < index + 1) {
						excludeFoodModifierList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						excludeFoodModifierList.set(Math.min(excludeFoodModifierList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "supplement":
				if (value instanceof com.dtc.fhir.gwt.NutritionOrderSupplement || value == null) {
					List<com.dtc.fhir.gwt.NutritionOrderSupplement> supplementList = instance.getSupplement();
					if (supplementList.size() < index + 1) {
						supplementList.add((com.dtc.fhir.gwt.NutritionOrderSupplement)value);
					} else {
						supplementList.set(Math.min(supplementList.size() - 1, index), (com.dtc.fhir.gwt.NutritionOrderSupplement)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "enteralFormula":
				if (value instanceof com.dtc.fhir.gwt.NutritionOrderEnteralFormula || value == null) {
					instance.setEnteralFormula((com.dtc.fhir.gwt.NutritionOrderEnteralFormula)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NutritionOrderEnteralFormula");
				}
				break;
			case "orderer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrderer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "dateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "oralDiet":
				if (value instanceof com.dtc.fhir.gwt.NutritionOrderOralDiet || value == null) {
					instance.setOralDiet((com.dtc.fhir.gwt.NutritionOrderOralDiet)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NutritionOrderOralDiet");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NutritionOrder");
			}
		}

		static Object get(com.dtc.fhir.gwt.NutritionOrder _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "status":
				{com.dtc.fhir.gwt.NutritionOrderStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.NutritionOrderStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "allergyIntolerance":
				List<com.dtc.fhir.gwt.Reference> allergyIntoleranceList = _instance_.getAllergyIntolerance();
				if (allergyIntoleranceList.size() < _index_ + 1) {
					allergyIntoleranceList.add(new com.dtc.fhir.gwt.Reference());
				}
				return allergyIntoleranceList.get(Math.min(allergyIntoleranceList.size() - 1, _index_));
			case "foodPreferenceModifier":
				List<com.dtc.fhir.gwt.CodeableConcept> foodPreferenceModifierList = _instance_.getFoodPreferenceModifier();
				if (foodPreferenceModifierList.size() < _index_ + 1) {
					foodPreferenceModifierList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return foodPreferenceModifierList.get(Math.min(foodPreferenceModifierList.size() - 1, _index_));
			case "excludeFoodModifier":
				List<com.dtc.fhir.gwt.CodeableConcept> excludeFoodModifierList = _instance_.getExcludeFoodModifier();
				if (excludeFoodModifierList.size() < _index_ + 1) {
					excludeFoodModifierList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return excludeFoodModifierList.get(Math.min(excludeFoodModifierList.size() - 1, _index_));
			case "supplement":
				List<com.dtc.fhir.gwt.NutritionOrderSupplement> supplementList = _instance_.getSupplement();
				if (supplementList.size() < _index_ + 1) {
					supplementList.add(new com.dtc.fhir.gwt.NutritionOrderSupplement());
				}
				return supplementList.get(Math.min(supplementList.size() - 1, _index_));
			case "enteralFormula":
				{com.dtc.fhir.gwt.NutritionOrderEnteralFormula _field_ = _instance_.getEnteralFormula();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.NutritionOrderEnteralFormula();
					_instance_.setEnteralFormula(_field_);
				}
				return _field_;}
			case "orderer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrderer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrderer(_field_);
				}
				return _field_;}
			case "dateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDateTime(_field_);
				}
				return _field_;}
			case "oralDiet":
				{com.dtc.fhir.gwt.NutritionOrderOralDiet _field_ = _instance_.getOralDiet();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.NutritionOrderOralDiet();
					_instance_.setOralDiet(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NutritionOrder");
			}
		}
	}
	private static class SetNutritionOrderAdministration {
		static void set(com.dtc.fhir.gwt.NutritionOrderAdministration instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NutritionOrderAdministration instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "rateRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setRateRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "schedule":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setSchedule((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "rateQuantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setRateQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NutritionOrderAdministration");
			}
		}

		static Object get(com.dtc.fhir.gwt.NutritionOrderAdministration _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "rateRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getRateRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setRateRatio(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "schedule":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getSchedule();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setSchedule(_field_);
				}
				return _field_;}
			case "rateQuantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getRateQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setRateQuantity(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NutritionOrderAdministration");
			}
		}
	}
	private static class SetNutritionOrderEnteralFormula {
		static void set(com.dtc.fhir.gwt.NutritionOrderEnteralFormula instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NutritionOrderEnteralFormula instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "baseFormulaType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setBaseFormulaType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "baseFormulaProductName":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setBaseFormulaProductName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "additiveType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAdditiveType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "additiveProductName":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setAdditiveProductName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "caloricDensity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setCaloricDensity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "routeofAdministration":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRouteofAdministration((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "administration":
				if (value instanceof com.dtc.fhir.gwt.NutritionOrderAdministration || value == null) {
					List<com.dtc.fhir.gwt.NutritionOrderAdministration> administrationList = instance.getAdministration();
					if (administrationList.size() < index + 1) {
						administrationList.add((com.dtc.fhir.gwt.NutritionOrderAdministration)value);
					} else {
						administrationList.set(Math.min(administrationList.size() - 1, index), (com.dtc.fhir.gwt.NutritionOrderAdministration)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "maxVolumeToDeliver":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setMaxVolumeToDeliver((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "administrationInstruction":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setAdministrationInstruction((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NutritionOrderEnteralFormula");
			}
		}

		static Object get(com.dtc.fhir.gwt.NutritionOrderEnteralFormula _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "baseFormulaType":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getBaseFormulaType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setBaseFormulaType(_field_);
				}
				return _field_;}
			case "baseFormulaProductName":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getBaseFormulaProductName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setBaseFormulaProductName(_field_);
				}
				return _field_;}
			case "additiveType":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAdditiveType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAdditiveType(_field_);
				}
				return _field_;}
			case "additiveProductName":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getAdditiveProductName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setAdditiveProductName(_field_);
				}
				return _field_;}
			case "caloricDensity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getCaloricDensity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setCaloricDensity(_field_);
				}
				return _field_;}
			case "routeofAdministration":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRouteofAdministration();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRouteofAdministration(_field_);
				}
				return _field_;}
			case "administration":
				List<com.dtc.fhir.gwt.NutritionOrderAdministration> administrationList = _instance_.getAdministration();
				if (administrationList.size() < _index_ + 1) {
					administrationList.add(new com.dtc.fhir.gwt.NutritionOrderAdministration());
				}
				return administrationList.get(Math.min(administrationList.size() - 1, _index_));
			case "maxVolumeToDeliver":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getMaxVolumeToDeliver();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setMaxVolumeToDeliver(_field_);
				}
				return _field_;}
			case "administrationInstruction":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getAdministrationInstruction();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setAdministrationInstruction(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NutritionOrderEnteralFormula");
			}
		}
	}
	private static class SetNutritionOrderNutrient {
		static void set(com.dtc.fhir.gwt.NutritionOrderNutrient instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NutritionOrderNutrient instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "amount":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setAmount((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "modifier":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setModifier((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NutritionOrderNutrient");
			}
		}

		static Object get(com.dtc.fhir.gwt.NutritionOrderNutrient _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "amount":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setAmount(_field_);
				}
				return _field_;}
			case "modifier":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getModifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setModifier(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NutritionOrderNutrient");
			}
		}
	}
	private static class SetNutritionOrderOralDiet {
		static void set(com.dtc.fhir.gwt.NutritionOrderOralDiet instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NutritionOrderOralDiet instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "instruction":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setInstruction((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "fluidConsistencyType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> fluidConsistencyTypeList = instance.getFluidConsistencyType();
					if (fluidConsistencyTypeList.size() < index + 1) {
						fluidConsistencyTypeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						fluidConsistencyTypeList.set(Math.min(fluidConsistencyTypeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "schedule":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					List<com.dtc.fhir.gwt.Timing> scheduleList = instance.getSchedule();
					if (scheduleList.size() < index + 1) {
						scheduleList.add((com.dtc.fhir.gwt.Timing)value);
					} else {
						scheduleList.set(Math.min(scheduleList.size() - 1, index), (com.dtc.fhir.gwt.Timing)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "nutrient":
				if (value instanceof com.dtc.fhir.gwt.NutritionOrderNutrient || value == null) {
					List<com.dtc.fhir.gwt.NutritionOrderNutrient> nutrientList = instance.getNutrient();
					if (nutrientList.size() < index + 1) {
						nutrientList.add((com.dtc.fhir.gwt.NutritionOrderNutrient)value);
					} else {
						nutrientList.set(Math.min(nutrientList.size() - 1, index), (com.dtc.fhir.gwt.NutritionOrderNutrient)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "texture":
				if (value instanceof com.dtc.fhir.gwt.NutritionOrderTexture || value == null) {
					List<com.dtc.fhir.gwt.NutritionOrderTexture> textureList = instance.getTexture();
					if (textureList.size() < index + 1) {
						textureList.add((com.dtc.fhir.gwt.NutritionOrderTexture)value);
					} else {
						textureList.set(Math.min(textureList.size() - 1, index), (com.dtc.fhir.gwt.NutritionOrderTexture)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NutritionOrderOralDiet");
			}
		}

		static Object get(com.dtc.fhir.gwt.NutritionOrderOralDiet _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				List<com.dtc.fhir.gwt.CodeableConcept> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "instruction":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getInstruction();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setInstruction(_field_);
				}
				return _field_;}
			case "fluidConsistencyType":
				List<com.dtc.fhir.gwt.CodeableConcept> fluidConsistencyTypeList = _instance_.getFluidConsistencyType();
				if (fluidConsistencyTypeList.size() < _index_ + 1) {
					fluidConsistencyTypeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return fluidConsistencyTypeList.get(Math.min(fluidConsistencyTypeList.size() - 1, _index_));
			case "schedule":
				List<com.dtc.fhir.gwt.Timing> scheduleList = _instance_.getSchedule();
				if (scheduleList.size() < _index_ + 1) {
					scheduleList.add(new com.dtc.fhir.gwt.Timing());
				}
				return scheduleList.get(Math.min(scheduleList.size() - 1, _index_));
			case "nutrient":
				List<com.dtc.fhir.gwt.NutritionOrderNutrient> nutrientList = _instance_.getNutrient();
				if (nutrientList.size() < _index_ + 1) {
					nutrientList.add(new com.dtc.fhir.gwt.NutritionOrderNutrient());
				}
				return nutrientList.get(Math.min(nutrientList.size() - 1, _index_));
			case "texture":
				List<com.dtc.fhir.gwt.NutritionOrderTexture> textureList = _instance_.getTexture();
				if (textureList.size() < _index_ + 1) {
					textureList.add(new com.dtc.fhir.gwt.NutritionOrderTexture());
				}
				return textureList.get(Math.min(textureList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NutritionOrderOralDiet");
			}
		}
	}
	private static class SetNutritionOrderStatus {
		static void set(com.dtc.fhir.gwt.NutritionOrderStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NutritionOrderStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.NutritionOrderStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.NutritionOrderStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.NutritionOrderStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NutritionOrderStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.NutritionOrderStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.NutritionOrderStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NutritionOrderStatus");
			}
		}
	}
	private static class SetNutritionOrderSupplement {
		static void set(com.dtc.fhir.gwt.NutritionOrderSupplement instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NutritionOrderSupplement instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "productName":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setProductName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "instruction":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setInstruction((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "schedule":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					List<com.dtc.fhir.gwt.Timing> scheduleList = instance.getSchedule();
					if (scheduleList.size() < index + 1) {
						scheduleList.add((com.dtc.fhir.gwt.Timing)value);
					} else {
						scheduleList.set(Math.min(scheduleList.size() - 1, index), (com.dtc.fhir.gwt.Timing)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NutritionOrderSupplement");
			}
		}

		static Object get(com.dtc.fhir.gwt.NutritionOrderSupplement _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "productName":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getProductName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setProductName(_field_);
				}
				return _field_;}
			case "instruction":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getInstruction();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setInstruction(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "schedule":
				List<com.dtc.fhir.gwt.Timing> scheduleList = _instance_.getSchedule();
				if (scheduleList.size() < _index_ + 1) {
					scheduleList.add(new com.dtc.fhir.gwt.Timing());
				}
				return scheduleList.get(Math.min(scheduleList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NutritionOrderSupplement");
			}
		}
	}
	private static class SetNutritionOrderTexture {
		static void set(com.dtc.fhir.gwt.NutritionOrderTexture instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.NutritionOrderTexture instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "modifier":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setModifier((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "foodType":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setFoodType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of NutritionOrderTexture");
			}
		}

		static Object get(com.dtc.fhir.gwt.NutritionOrderTexture _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "modifier":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getModifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setModifier(_field_);
				}
				return _field_;}
			case "foodType":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getFoodType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setFoodType(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of NutritionOrderTexture");
			}
		}
	}
	private static class SetObservation {
		static void set(com.dtc.fhir.gwt.Observation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Observation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "method":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMethod((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "issued":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setIssued((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.ObservationStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.ObservationStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ObservationStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "device":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDevice((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "bodySite":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setBodySite((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "effectiveDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setEffectiveDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "effectivePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setEffectivePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "valueQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setValueQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "valueCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setValueCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "valueString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValueString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "valueRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setValueRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "valueRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setValueRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "valueSampledData":
				if (value instanceof com.dtc.fhir.gwt.SampledData || value == null) {
					instance.setValueSampledData((com.dtc.fhir.gwt.SampledData)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledData");
				}
				break;
			case "valueAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setValueAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "valueDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setValueDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "valuePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setValuePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "dataAbsentReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setDataAbsentReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "interpretation":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setInterpretation((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "referenceRange":
				if (value instanceof com.dtc.fhir.gwt.ObservationReferenceRange || value == null) {
					List<com.dtc.fhir.gwt.ObservationReferenceRange> referenceRangeList = instance.getReferenceRange();
					if (referenceRangeList.size() < index + 1) {
						referenceRangeList.add((com.dtc.fhir.gwt.ObservationReferenceRange)value);
					} else {
						referenceRangeList.set(Math.min(referenceRangeList.size() - 1, index), (com.dtc.fhir.gwt.ObservationReferenceRange)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "performer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> performerList = instance.getPerformer();
					if (performerList.size() < index + 1) {
						performerList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						performerList.set(Math.min(performerList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "specimen":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSpecimen((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "valueTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setValueTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "comments":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComments((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "related":
				if (value instanceof com.dtc.fhir.gwt.ObservationRelated || value == null) {
					List<com.dtc.fhir.gwt.ObservationRelated> relatedList = instance.getRelated();
					if (relatedList.size() < index + 1) {
						relatedList.add((com.dtc.fhir.gwt.ObservationRelated)value);
					} else {
						relatedList.set(Math.min(relatedList.size() - 1, index), (com.dtc.fhir.gwt.ObservationRelated)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "component":
				if (value instanceof com.dtc.fhir.gwt.ObservationComponent || value == null) {
					List<com.dtc.fhir.gwt.ObservationComponent> componentList = instance.getComponent();
					if (componentList.size() < index + 1) {
						componentList.add((com.dtc.fhir.gwt.ObservationComponent)value);
					} else {
						componentList.set(Math.min(componentList.size() - 1, index), (com.dtc.fhir.gwt.ObservationComponent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Observation");
			}
		}

		static Object get(com.dtc.fhir.gwt.Observation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "method":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMethod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMethod(_field_);
				}
				return _field_;}
			case "issued":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getIssued();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setIssued(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.ObservationStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ObservationStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "device":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDevice();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDevice(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "bodySite":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getBodySite();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setBodySite(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "effectiveDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getEffectiveDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setEffectiveDateTime(_field_);
				}
				return _field_;}
			case "effectivePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getEffectivePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setEffectivePeriod(_field_);
				}
				return _field_;}
			case "valueQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getValueQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setValueQuantity(_field_);
				}
				return _field_;}
			case "valueCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getValueCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setValueCodeableConcept(_field_);
				}
				return _field_;}
			case "valueString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValueString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValueString(_field_);
				}
				return _field_;}
			case "valueRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getValueRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setValueRange(_field_);
				}
				return _field_;}
			case "valueRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getValueRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setValueRatio(_field_);
				}
				return _field_;}
			case "valueSampledData":
				{com.dtc.fhir.gwt.SampledData _field_ = _instance_.getValueSampledData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledData();
					_instance_.setValueSampledData(_field_);
				}
				return _field_;}
			case "valueAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getValueAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setValueAttachment(_field_);
				}
				return _field_;}
			case "valueDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getValueDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setValueDateTime(_field_);
				}
				return _field_;}
			case "valuePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getValuePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setValuePeriod(_field_);
				}
				return _field_;}
			case "dataAbsentReason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getDataAbsentReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setDataAbsentReason(_field_);
				}
				return _field_;}
			case "interpretation":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getInterpretation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setInterpretation(_field_);
				}
				return _field_;}
			case "referenceRange":
				List<com.dtc.fhir.gwt.ObservationReferenceRange> referenceRangeList = _instance_.getReferenceRange();
				if (referenceRangeList.size() < _index_ + 1) {
					referenceRangeList.add(new com.dtc.fhir.gwt.ObservationReferenceRange());
				}
				return referenceRangeList.get(Math.min(referenceRangeList.size() - 1, _index_));
			case "performer":
				List<com.dtc.fhir.gwt.Reference> performerList = _instance_.getPerformer();
				if (performerList.size() < _index_ + 1) {
					performerList.add(new com.dtc.fhir.gwt.Reference());
				}
				return performerList.get(Math.min(performerList.size() - 1, _index_));
			case "specimen":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSpecimen();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSpecimen(_field_);
				}
				return _field_;}
			case "valueTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getValueTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setValueTime(_field_);
				}
				return _field_;}
			case "comments":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComments();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComments(_field_);
				}
				return _field_;}
			case "related":
				List<com.dtc.fhir.gwt.ObservationRelated> relatedList = _instance_.getRelated();
				if (relatedList.size() < _index_ + 1) {
					relatedList.add(new com.dtc.fhir.gwt.ObservationRelated());
				}
				return relatedList.get(Math.min(relatedList.size() - 1, _index_));
			case "component":
				List<com.dtc.fhir.gwt.ObservationComponent> componentList = _instance_.getComponent();
				if (componentList.size() < _index_ + 1) {
					componentList.add(new com.dtc.fhir.gwt.ObservationComponent());
				}
				return componentList.get(Math.min(componentList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Observation");
			}
		}
	}
	private static class SetObservationComponent {
		static void set(com.dtc.fhir.gwt.ObservationComponent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ObservationComponent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "valueQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setValueQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "valueCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setValueCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "valueString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValueString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "valueRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setValueRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "valueRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setValueRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "valueSampledData":
				if (value instanceof com.dtc.fhir.gwt.SampledData || value == null) {
					instance.setValueSampledData((com.dtc.fhir.gwt.SampledData)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledData");
				}
				break;
			case "valueAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setValueAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "valueDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setValueDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "valuePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setValuePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "dataAbsentReason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setDataAbsentReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "referenceRange":
				if (value instanceof com.dtc.fhir.gwt.ObservationReferenceRange || value == null) {
					List<com.dtc.fhir.gwt.ObservationReferenceRange> referenceRangeList = instance.getReferenceRange();
					if (referenceRangeList.size() < index + 1) {
						referenceRangeList.add((com.dtc.fhir.gwt.ObservationReferenceRange)value);
					} else {
						referenceRangeList.set(Math.min(referenceRangeList.size() - 1, index), (com.dtc.fhir.gwt.ObservationReferenceRange)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "valueTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setValueTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ObservationComponent");
			}
		}

		static Object get(com.dtc.fhir.gwt.ObservationComponent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "valueQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getValueQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setValueQuantity(_field_);
				}
				return _field_;}
			case "valueCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getValueCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setValueCodeableConcept(_field_);
				}
				return _field_;}
			case "valueString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValueString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValueString(_field_);
				}
				return _field_;}
			case "valueRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getValueRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setValueRange(_field_);
				}
				return _field_;}
			case "valueRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getValueRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setValueRatio(_field_);
				}
				return _field_;}
			case "valueSampledData":
				{com.dtc.fhir.gwt.SampledData _field_ = _instance_.getValueSampledData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledData();
					_instance_.setValueSampledData(_field_);
				}
				return _field_;}
			case "valueAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getValueAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setValueAttachment(_field_);
				}
				return _field_;}
			case "valueDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getValueDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setValueDateTime(_field_);
				}
				return _field_;}
			case "valuePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getValuePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setValuePeriod(_field_);
				}
				return _field_;}
			case "dataAbsentReason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getDataAbsentReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setDataAbsentReason(_field_);
				}
				return _field_;}
			case "referenceRange":
				List<com.dtc.fhir.gwt.ObservationReferenceRange> referenceRangeList = _instance_.getReferenceRange();
				if (referenceRangeList.size() < _index_ + 1) {
					referenceRangeList.add(new com.dtc.fhir.gwt.ObservationReferenceRange());
				}
				return referenceRangeList.get(Math.min(referenceRangeList.size() - 1, _index_));
			case "valueTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getValueTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setValueTime(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ObservationComponent");
			}
		}
	}
	private static class SetObservationReferenceRange {
		static void set(com.dtc.fhir.gwt.ObservationReferenceRange instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ObservationReferenceRange instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "low":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setLow((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "high":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setHigh((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "meaning":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMeaning((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "age":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setAge((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ObservationReferenceRange");
			}
		}

		static Object get(com.dtc.fhir.gwt.ObservationReferenceRange _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "low":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getLow();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setLow(_field_);
				}
				return _field_;}
			case "high":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getHigh();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setHigh(_field_);
				}
				return _field_;}
			case "meaning":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMeaning();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMeaning(_field_);
				}
				return _field_;}
			case "age":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getAge();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setAge(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ObservationReferenceRange");
			}
		}
	}
	private static class SetObservationRelated {
		static void set(com.dtc.fhir.gwt.ObservationRelated instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ObservationRelated instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.ObservationRelationshipType || value == null) {
					instance.setType((com.dtc.fhir.gwt.ObservationRelationshipType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ObservationRelationshipType");
				}
				break;
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ObservationRelated");
			}
		}

		static Object get(com.dtc.fhir.gwt.ObservationRelated _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.ObservationRelationshipType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ObservationRelationshipType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ObservationRelated");
			}
		}
	}
	private static class SetObservationRelationshipType {
		static void set(com.dtc.fhir.gwt.ObservationRelationshipType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ObservationRelationshipType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ObservationRelationshipTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ObservationRelationshipTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ObservationRelationshipTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ObservationRelationshipType");
			}
		}

		static Object get(com.dtc.fhir.gwt.ObservationRelationshipType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ObservationRelationshipTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ObservationRelationshipType");
			}
		}
	}
	private static class SetObservationStatus {
		static void set(com.dtc.fhir.gwt.ObservationStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ObservationStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ObservationStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ObservationStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ObservationStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ObservationStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ObservationStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ObservationStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ObservationStatus");
			}
		}
	}
	private static class SetOid {
		static void set(com.dtc.fhir.gwt.Oid instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Oid instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Oid");
			}
		}

		static Object get(com.dtc.fhir.gwt.Oid _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Oid");
			}
		}
	}
	private static class SetOperationDefinition {
		static void set(com.dtc.fhir.gwt.OperationDefinition instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OperationDefinition instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "instance":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setInstance((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					List<com.dtc.fhir.gwt.Code> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.Code)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.Code)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "notes":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setNotes((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.OperationDefinitionContact || value == null) {
					List<com.dtc.fhir.gwt.OperationDefinitionContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.OperationDefinitionContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.OperationDefinitionContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "experimental":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExperimental((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "requirements":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRequirements((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "idempotent":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setIdempotent((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "kind":
				if (value instanceof com.dtc.fhir.gwt.OperationKind || value == null) {
					instance.setKind((com.dtc.fhir.gwt.OperationKind)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.OperationKind");
				}
				break;
			case "base":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setBase((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "parameter":
				if (value instanceof com.dtc.fhir.gwt.OperationDefinitionParameter || value == null) {
					List<com.dtc.fhir.gwt.OperationDefinitionParameter> parameterList = instance.getParameter();
					if (parameterList.size() < index + 1) {
						parameterList.add((com.dtc.fhir.gwt.OperationDefinitionParameter)value);
					} else {
						parameterList.set(Math.min(parameterList.size() - 1, index), (com.dtc.fhir.gwt.OperationDefinitionParameter)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OperationDefinition");
			}
		}

		static Object get(com.dtc.fhir.gwt.OperationDefinition _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "instance":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getInstance();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setInstance(_field_);
				}
				return _field_;}
			case "type":
				List<com.dtc.fhir.gwt.Code> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.Code());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "notes":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getNotes();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setNotes(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.OperationDefinitionContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.OperationDefinitionContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "experimental":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExperimental();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExperimental(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "requirements":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRequirements();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRequirements(_field_);
				}
				return _field_;}
			case "idempotent":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getIdempotent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setIdempotent(_field_);
				}
				return _field_;}
			case "kind":
				{com.dtc.fhir.gwt.OperationKind _field_ = _instance_.getKind();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.OperationKind();
					_instance_.setKind(_field_);
				}
				return _field_;}
			case "base":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getBase();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setBase(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "parameter":
				List<com.dtc.fhir.gwt.OperationDefinitionParameter> parameterList = _instance_.getParameter();
				if (parameterList.size() < _index_ + 1) {
					parameterList.add(new com.dtc.fhir.gwt.OperationDefinitionParameter());
				}
				return parameterList.get(Math.min(parameterList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OperationDefinition");
			}
		}
	}
	private static class SetOperationDefinitionBinding {
		static void set(com.dtc.fhir.gwt.OperationDefinitionBinding instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OperationDefinitionBinding instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "valueSetUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setValueSetUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "valueSetReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setValueSetReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "strength":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStrength((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OperationDefinitionBinding");
			}
		}

		static Object get(com.dtc.fhir.gwt.OperationDefinitionBinding _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "valueSetUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getValueSetUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setValueSetUri(_field_);
				}
				return _field_;}
			case "valueSetReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getValueSetReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setValueSetReference(_field_);
				}
				return _field_;}
			case "strength":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStrength();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStrength(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OperationDefinitionBinding");
			}
		}
	}
	private static class SetOperationDefinitionContact {
		static void set(com.dtc.fhir.gwt.OperationDefinitionContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OperationDefinitionContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OperationDefinitionContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.OperationDefinitionContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OperationDefinitionContact");
			}
		}
	}
	private static class SetOperationDefinitionParameter {
		static void set(com.dtc.fhir.gwt.OperationDefinitionParameter instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OperationDefinitionParameter instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setName((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "documentation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDocumentation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "min":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setMin((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "max":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setMax((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "binding":
				if (value instanceof com.dtc.fhir.gwt.OperationDefinitionBinding || value == null) {
					instance.setBinding((com.dtc.fhir.gwt.OperationDefinitionBinding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.OperationDefinitionBinding");
				}
				break;
			case "part":
				if (value instanceof com.dtc.fhir.gwt.OperationDefinitionParameter || value == null) {
					List<com.dtc.fhir.gwt.OperationDefinitionParameter> partList = instance.getPart();
					if (partList.size() < index + 1) {
						partList.add((com.dtc.fhir.gwt.OperationDefinitionParameter)value);
					} else {
						partList.set(Math.min(partList.size() - 1, index), (com.dtc.fhir.gwt.OperationDefinitionParameter)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "use":
				if (value instanceof com.dtc.fhir.gwt.OperationParameterUse || value == null) {
					instance.setUse((com.dtc.fhir.gwt.OperationParameterUse)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.OperationParameterUse");
				}
				break;
			case "profile":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProfile((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OperationDefinitionParameter");
			}
		}

		static Object get(com.dtc.fhir.gwt.OperationDefinitionParameter _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "documentation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDocumentation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDocumentation(_field_);
				}
				return _field_;}
			case "min":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getMin();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setMin(_field_);
				}
				return _field_;}
			case "max":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getMax();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setMax(_field_);
				}
				return _field_;}
			case "binding":
				{com.dtc.fhir.gwt.OperationDefinitionBinding _field_ = _instance_.getBinding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.OperationDefinitionBinding();
					_instance_.setBinding(_field_);
				}
				return _field_;}
			case "part":
				List<com.dtc.fhir.gwt.OperationDefinitionParameter> partList = _instance_.getPart();
				if (partList.size() < _index_ + 1) {
					partList.add(new com.dtc.fhir.gwt.OperationDefinitionParameter());
				}
				return partList.get(Math.min(partList.size() - 1, _index_));
			case "use":
				{com.dtc.fhir.gwt.OperationParameterUse _field_ = _instance_.getUse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.OperationParameterUse();
					_instance_.setUse(_field_);
				}
				return _field_;}
			case "profile":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProfile();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProfile(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OperationDefinitionParameter");
			}
		}
	}
	private static class SetOperationKind {
		static void set(com.dtc.fhir.gwt.OperationKind instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OperationKind instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.OperationKindList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.OperationKindList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.OperationKindList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OperationKind");
			}
		}

		static Object get(com.dtc.fhir.gwt.OperationKind _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.OperationKindList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OperationKind");
			}
		}
	}
	private static class SetOperationOutcome {
		static void set(com.dtc.fhir.gwt.OperationOutcome instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OperationOutcome instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "issue":
				if (value instanceof com.dtc.fhir.gwt.OperationOutcomeIssue || value == null) {
					List<com.dtc.fhir.gwt.OperationOutcomeIssue> issueList = instance.getIssue();
					if (issueList.size() < index + 1) {
						issueList.add((com.dtc.fhir.gwt.OperationOutcomeIssue)value);
					} else {
						issueList.set(Math.min(issueList.size() - 1, index), (com.dtc.fhir.gwt.OperationOutcomeIssue)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OperationOutcome");
			}
		}

		static Object get(com.dtc.fhir.gwt.OperationOutcome _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "issue":
				List<com.dtc.fhir.gwt.OperationOutcomeIssue> issueList = _instance_.getIssue();
				if (issueList.size() < _index_ + 1) {
					issueList.add(new com.dtc.fhir.gwt.OperationOutcomeIssue());
				}
				return issueList.get(Math.min(issueList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OperationOutcome");
			}
		}
	}
	private static class SetOperationOutcomeIssue {
		static void set(com.dtc.fhir.gwt.OperationOutcomeIssue instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OperationOutcomeIssue instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> locationList = instance.getLocation();
					if (locationList.size() < index + 1) {
						locationList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						locationList.set(Math.min(locationList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "severity":
				if (value instanceof com.dtc.fhir.gwt.IssueSeverity || value == null) {
					instance.setSeverity((com.dtc.fhir.gwt.IssueSeverity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IssueSeverity");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.IssueType || value == null) {
					instance.setCode((com.dtc.fhir.gwt.IssueType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IssueType");
				}
				break;
			case "details":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setDetails((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "diagnostics":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDiagnostics((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OperationOutcomeIssue");
			}
		}

		static Object get(com.dtc.fhir.gwt.OperationOutcomeIssue _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				List<com.dtc.fhir.gwt.StringDt> locationList = _instance_.getLocation();
				if (locationList.size() < _index_ + 1) {
					locationList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return locationList.get(Math.min(locationList.size() - 1, _index_));
			case "severity":
				{com.dtc.fhir.gwt.IssueSeverity _field_ = _instance_.getSeverity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IssueSeverity();
					_instance_.setSeverity(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.IssueType _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IssueType();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "details":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getDetails();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setDetails(_field_);
				}
				return _field_;}
			case "diagnostics":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDiagnostics();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDiagnostics(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OperationOutcomeIssue");
			}
		}
	}
	private static class SetOperationParameterUse {
		static void set(com.dtc.fhir.gwt.OperationParameterUse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OperationParameterUse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.OperationParameterUseList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.OperationParameterUseList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.OperationParameterUseList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OperationParameterUse");
			}
		}

		static Object get(com.dtc.fhir.gwt.OperationParameterUse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.OperationParameterUseList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OperationParameterUse");
			}
		}
	}
	private static class SetOrder {
		static void set(com.dtc.fhir.gwt.Order instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Order instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSource((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reasonCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReasonCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reasonReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReasonReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "when":
				if (value instanceof com.dtc.fhir.gwt.OrderWhen || value == null) {
					instance.setWhen((com.dtc.fhir.gwt.OrderWhen)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.OrderWhen");
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> detailList = instance.getDetail();
					if (detailList.size() < index + 1) {
						detailList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						detailList.set(Math.min(detailList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Order");
			}
		}

		static Object get(com.dtc.fhir.gwt.Order _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "source":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "reasonCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReasonCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReasonCodeableConcept(_field_);
				}
				return _field_;}
			case "reasonReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReasonReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReasonReference(_field_);
				}
				return _field_;}
			case "when":
				{com.dtc.fhir.gwt.OrderWhen _field_ = _instance_.getWhen();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.OrderWhen();
					_instance_.setWhen(_field_);
				}
				return _field_;}
			case "detail":
				List<com.dtc.fhir.gwt.Reference> detailList = _instance_.getDetail();
				if (detailList.size() < _index_ + 1) {
					detailList.add(new com.dtc.fhir.gwt.Reference());
				}
				return detailList.get(Math.min(detailList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Order");
			}
		}
	}
	private static class SetOrderResponse {
		static void set(com.dtc.fhir.gwt.OrderResponse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OrderResponse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "orderStatus":
				if (value instanceof com.dtc.fhir.gwt.OrderStatus || value == null) {
					instance.setOrderStatus((com.dtc.fhir.gwt.OrderStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.OrderStatus");
				}
				break;
			case "fulfillment":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> fulfillmentList = instance.getFulfillment();
					if (fulfillmentList.size() < index + 1) {
						fulfillmentList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						fulfillmentList.set(Math.min(fulfillmentList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "who":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setWho((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OrderResponse");
			}
		}

		static Object get(com.dtc.fhir.gwt.OrderResponse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "orderStatus":
				{com.dtc.fhir.gwt.OrderStatus _field_ = _instance_.getOrderStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.OrderStatus();
					_instance_.setOrderStatus(_field_);
				}
				return _field_;}
			case "fulfillment":
				List<com.dtc.fhir.gwt.Reference> fulfillmentList = _instance_.getFulfillment();
				if (fulfillmentList.size() < _index_ + 1) {
					fulfillmentList.add(new com.dtc.fhir.gwt.Reference());
				}
				return fulfillmentList.get(Math.min(fulfillmentList.size() - 1, _index_));
			case "who":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getWho();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setWho(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OrderResponse");
			}
		}
	}
	private static class SetOrderStatus {
		static void set(com.dtc.fhir.gwt.OrderStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OrderStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.OrderStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.OrderStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.OrderStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OrderStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.OrderStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.OrderStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OrderStatus");
			}
		}
	}
	private static class SetOrderWhen {
		static void set(com.dtc.fhir.gwt.OrderWhen instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OrderWhen instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "schedule":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setSchedule((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OrderWhen");
			}
		}

		static Object get(com.dtc.fhir.gwt.OrderWhen _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "schedule":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getSchedule();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setSchedule(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OrderWhen");
			}
		}
	}
	private static class SetOrganization {
		static void set(com.dtc.fhir.gwt.Organization instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Organization instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					List<com.dtc.fhir.gwt.Address> addressList = instance.getAddress();
					if (addressList.size() < index + 1) {
						addressList.add((com.dtc.fhir.gwt.Address)value);
					} else {
						addressList.set(Math.min(addressList.size() - 1, index), (com.dtc.fhir.gwt.Address)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.OrganizationContact || value == null) {
					List<com.dtc.fhir.gwt.OrganizationContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.OrganizationContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.OrganizationContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "active":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setActive((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "partOf":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPartOf((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Organization");
			}
		}

		static Object get(com.dtc.fhir.gwt.Organization _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				List<com.dtc.fhir.gwt.Address> addressList = _instance_.getAddress();
				if (addressList.size() < _index_ + 1) {
					addressList.add(new com.dtc.fhir.gwt.Address());
				}
				return addressList.get(Math.min(addressList.size() - 1, _index_));
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.OrganizationContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.OrganizationContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "active":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getActive();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setActive(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "partOf":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPartOf();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPartOf(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Organization");
			}
		}
	}
	private static class SetOrganizationContact {
		static void set(com.dtc.fhir.gwt.OrganizationContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.OrganizationContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "purpose":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setPurpose((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of OrganizationContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.OrganizationContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setAddress(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "purpose":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getPurpose();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setPurpose(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of OrganizationContact");
			}
		}
	}
	private static class SetParameters {
		static void set(com.dtc.fhir.gwt.Parameters instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Parameters instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "parameter":
				if (value instanceof com.dtc.fhir.gwt.ParametersParameter || value == null) {
					List<com.dtc.fhir.gwt.ParametersParameter> parameterList = instance.getParameter();
					if (parameterList.size() < index + 1) {
						parameterList.add((com.dtc.fhir.gwt.ParametersParameter)value);
					} else {
						parameterList.set(Math.min(parameterList.size() - 1, index), (com.dtc.fhir.gwt.ParametersParameter)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Parameters");
			}
		}

		static Object get(com.dtc.fhir.gwt.Parameters _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "parameter":
				List<com.dtc.fhir.gwt.ParametersParameter> parameterList = _instance_.getParameter();
				if (parameterList.size() < _index_ + 1) {
					parameterList.add(new com.dtc.fhir.gwt.ParametersParameter());
				}
				return parameterList.get(Math.min(parameterList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Parameters");
			}
		}
	}
	private static class SetParametersParameter {
		static void set(com.dtc.fhir.gwt.ParametersParameter instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ParametersParameter instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "resource":
				if (value instanceof com.dtc.fhir.gwt.ResourceContainer || value == null) {
					instance.setResource((com.dtc.fhir.gwt.ResourceContainer)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ResourceContainer");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "valueQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setValueQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "valueCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setValueCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "valueString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValueString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "valueRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setValueRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "valueRatio":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setValueRatio((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "valueSampledData":
				if (value instanceof com.dtc.fhir.gwt.SampledData || value == null) {
					instance.setValueSampledData((com.dtc.fhir.gwt.SampledData)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledData");
				}
				break;
			case "valueAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setValueAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "valueDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setValueDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "valuePeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setValuePeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "valueUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setValueUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "valueDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setValueDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "valueCode":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setValueCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "valueOid":
				if (value instanceof com.dtc.fhir.gwt.Oid || value == null) {
					instance.setValueOid((com.dtc.fhir.gwt.Oid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Oid");
				}
				break;
			case "valueUuid":
				if (value instanceof com.dtc.fhir.gwt.Uuid || value == null) {
					instance.setValueUuid((com.dtc.fhir.gwt.Uuid)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uuid");
				}
				break;
			case "valueId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setValueId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "valueMeta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setValueMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "part":
				if (value instanceof com.dtc.fhir.gwt.ParametersParameter || value == null) {
					List<com.dtc.fhir.gwt.ParametersParameter> partList = instance.getPart();
					if (partList.size() < index + 1) {
						partList.add((com.dtc.fhir.gwt.ParametersParameter)value);
					} else {
						partList.set(Math.min(partList.size() - 1, index), (com.dtc.fhir.gwt.ParametersParameter)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "valueBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setValueBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "valueInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setValueInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "valueDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValueDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "valueBase64Binary":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setValueBase64Binary((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "valueInstant":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setValueInstant((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "valueUnsignedInt":
				if (value instanceof com.dtc.fhir.gwt.UnsignedInt || value == null) {
					instance.setValueUnsignedInt((com.dtc.fhir.gwt.UnsignedInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnsignedInt");
				}
				break;
			case "valuePositiveInt":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setValuePositiveInt((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "valueMarkdown":
				if (value instanceof com.dtc.fhir.gwt.Markdown || value == null) {
					instance.setValueMarkdown((com.dtc.fhir.gwt.Markdown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Markdown");
				}
				break;
			case "valueAnnotation":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					instance.setValueAnnotation((com.dtc.fhir.gwt.Annotation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Annotation");
				}
				break;
			case "valueIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setValueIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "valueCoding":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setValueCoding((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "valueReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setValueReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "valueSignature":
				if (value instanceof com.dtc.fhir.gwt.Signature || value == null) {
					instance.setValueSignature((com.dtc.fhir.gwt.Signature)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Signature");
				}
				break;
			case "valueHumanName":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setValueHumanName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "valueAddress":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setValueAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "valueContactPoint":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					instance.setValueContactPoint((com.dtc.fhir.gwt.ContactPoint)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContactPoint");
				}
				break;
			case "valueTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setValueTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "valueElementDefinition":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinition || value == null) {
					instance.setValueElementDefinition((com.dtc.fhir.gwt.ElementDefinition)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ElementDefinition");
				}
				break;
			case "valueTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setValueTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ParametersParameter");
			}
		}

		static Object get(com.dtc.fhir.gwt.ParametersParameter _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "resource":
				{com.dtc.fhir.gwt.ResourceContainer _field_ = _instance_.getResource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ResourceContainer();
					_instance_.setResource(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "valueQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getValueQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setValueQuantity(_field_);
				}
				return _field_;}
			case "valueCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getValueCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setValueCodeableConcept(_field_);
				}
				return _field_;}
			case "valueString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValueString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValueString(_field_);
				}
				return _field_;}
			case "valueRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getValueRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setValueRange(_field_);
				}
				return _field_;}
			case "valueRatio":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getValueRatio();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setValueRatio(_field_);
				}
				return _field_;}
			case "valueSampledData":
				{com.dtc.fhir.gwt.SampledData _field_ = _instance_.getValueSampledData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledData();
					_instance_.setValueSampledData(_field_);
				}
				return _field_;}
			case "valueAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getValueAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setValueAttachment(_field_);
				}
				return _field_;}
			case "valueDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getValueDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setValueDateTime(_field_);
				}
				return _field_;}
			case "valuePeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getValuePeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setValuePeriod(_field_);
				}
				return _field_;}
			case "valueUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getValueUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setValueUri(_field_);
				}
				return _field_;}
			case "valueDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getValueDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setValueDate(_field_);
				}
				return _field_;}
			case "valueCode":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getValueCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setValueCode(_field_);
				}
				return _field_;}
			case "valueOid":
				{com.dtc.fhir.gwt.Oid _field_ = _instance_.getValueOid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Oid();
					_instance_.setValueOid(_field_);
				}
				return _field_;}
			case "valueUuid":
				{com.dtc.fhir.gwt.Uuid _field_ = _instance_.getValueUuid();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uuid();
					_instance_.setValueUuid(_field_);
				}
				return _field_;}
			case "valueId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getValueId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setValueId(_field_);
				}
				return _field_;}
			case "valueMeta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getValueMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setValueMeta(_field_);
				}
				return _field_;}
			case "part":
				List<com.dtc.fhir.gwt.ParametersParameter> partList = _instance_.getPart();
				if (partList.size() < _index_ + 1) {
					partList.add(new com.dtc.fhir.gwt.ParametersParameter());
				}
				return partList.get(Math.min(partList.size() - 1, _index_));
			case "valueBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getValueBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setValueBoolean(_field_);
				}
				return _field_;}
			case "valueInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getValueInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setValueInteger(_field_);
				}
				return _field_;}
			case "valueDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValueDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValueDecimal(_field_);
				}
				return _field_;}
			case "valueBase64Binary":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getValueBase64Binary();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setValueBase64Binary(_field_);
				}
				return _field_;}
			case "valueInstant":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getValueInstant();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setValueInstant(_field_);
				}
				return _field_;}
			case "valueUnsignedInt":
				{com.dtc.fhir.gwt.UnsignedInt _field_ = _instance_.getValueUnsignedInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnsignedInt();
					_instance_.setValueUnsignedInt(_field_);
				}
				return _field_;}
			case "valuePositiveInt":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getValuePositiveInt();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setValuePositiveInt(_field_);
				}
				return _field_;}
			case "valueMarkdown":
				{com.dtc.fhir.gwt.Markdown _field_ = _instance_.getValueMarkdown();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Markdown();
					_instance_.setValueMarkdown(_field_);
				}
				return _field_;}
			case "valueAnnotation":
				{com.dtc.fhir.gwt.Annotation _field_ = _instance_.getValueAnnotation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Annotation();
					_instance_.setValueAnnotation(_field_);
				}
				return _field_;}
			case "valueIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getValueIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setValueIdentifier(_field_);
				}
				return _field_;}
			case "valueCoding":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getValueCoding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setValueCoding(_field_);
				}
				return _field_;}
			case "valueReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getValueReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setValueReference(_field_);
				}
				return _field_;}
			case "valueSignature":
				{com.dtc.fhir.gwt.Signature _field_ = _instance_.getValueSignature();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Signature();
					_instance_.setValueSignature(_field_);
				}
				return _field_;}
			case "valueHumanName":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getValueHumanName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setValueHumanName(_field_);
				}
				return _field_;}
			case "valueAddress":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getValueAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setValueAddress(_field_);
				}
				return _field_;}
			case "valueContactPoint":
				{com.dtc.fhir.gwt.ContactPoint _field_ = _instance_.getValueContactPoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContactPoint();
					_instance_.setValueContactPoint(_field_);
				}
				return _field_;}
			case "valueTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getValueTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setValueTiming(_field_);
				}
				return _field_;}
			case "valueElementDefinition":
				{com.dtc.fhir.gwt.ElementDefinition _field_ = _instance_.getValueElementDefinition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ElementDefinition();
					_instance_.setValueElementDefinition(_field_);
				}
				return _field_;}
			case "valueTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getValueTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setValueTime(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ParametersParameter");
			}
		}
	}
	private static class SetParticipantRequired {
		static void set(com.dtc.fhir.gwt.ParticipantRequired instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ParticipantRequired instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ParticipantRequiredList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ParticipantRequiredList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ParticipantRequiredList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ParticipantRequired");
			}
		}

		static Object get(com.dtc.fhir.gwt.ParticipantRequired _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ParticipantRequiredList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ParticipantRequired");
			}
		}
	}
	private static class SetParticipantStatus {
		static void set(com.dtc.fhir.gwt.ParticipantStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ParticipantStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ParticipantStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ParticipantStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ParticipantStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ParticipantStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ParticipantStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ParticipantStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ParticipantStatus");
			}
		}
	}
	private static class SetParticipationStatus {
		static void set(com.dtc.fhir.gwt.ParticipationStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ParticipationStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ParticipationStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ParticipationStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ParticipationStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ParticipationStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ParticipationStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ParticipationStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ParticipationStatus");
			}
		}
	}
	private static class SetPatient {
		static void set(com.dtc.fhir.gwt.Patient instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Patient instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					List<com.dtc.fhir.gwt.Address> addressList = instance.getAddress();
					if (addressList.size() < index + 1) {
						addressList.add((com.dtc.fhir.gwt.Address)value);
					} else {
						addressList.set(Math.min(addressList.size() - 1, index), (com.dtc.fhir.gwt.Address)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					List<com.dtc.fhir.gwt.HumanName> nameList = instance.getName();
					if (nameList.size() < index + 1) {
						nameList.add((com.dtc.fhir.gwt.HumanName)value);
					} else {
						nameList.set(Math.min(nameList.size() - 1, index), (com.dtc.fhir.gwt.HumanName)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.PatientContact || value == null) {
					List<com.dtc.fhir.gwt.PatientContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.PatientContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.PatientContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "active":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setActive((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "gender":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setGender((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "birthDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setBirthDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "photo":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					List<com.dtc.fhir.gwt.Attachment> photoList = instance.getPhoto();
					if (photoList.size() < index + 1) {
						photoList.add((com.dtc.fhir.gwt.Attachment)value);
					} else {
						photoList.set(Math.min(photoList.size() - 1, index), (com.dtc.fhir.gwt.Attachment)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "communication":
				if (value instanceof com.dtc.fhir.gwt.PatientCommunication || value == null) {
					List<com.dtc.fhir.gwt.PatientCommunication> communicationList = instance.getCommunication();
					if (communicationList.size() < index + 1) {
						communicationList.add((com.dtc.fhir.gwt.PatientCommunication)value);
					} else {
						communicationList.set(Math.min(communicationList.size() - 1, index), (com.dtc.fhir.gwt.PatientCommunication)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "managingOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setManagingOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "deceasedBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setDeceasedBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "deceasedDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDeceasedDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "maritalStatus":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMaritalStatus((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "multipleBirthBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setMultipleBirthBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "multipleBirthInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setMultipleBirthInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "careProvider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> careProviderList = instance.getCareProvider();
					if (careProviderList.size() < index + 1) {
						careProviderList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						careProviderList.set(Math.min(careProviderList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "link":
				if (value instanceof com.dtc.fhir.gwt.PatientLink || value == null) {
					List<com.dtc.fhir.gwt.PatientLink> linkList = instance.getLink();
					if (linkList.size() < index + 1) {
						linkList.add((com.dtc.fhir.gwt.PatientLink)value);
					} else {
						linkList.set(Math.min(linkList.size() - 1, index), (com.dtc.fhir.gwt.PatientLink)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "animal":
				if (value instanceof com.dtc.fhir.gwt.PatientAnimal || value == null) {
					instance.setAnimal((com.dtc.fhir.gwt.PatientAnimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PatientAnimal");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Patient");
			}
		}

		static Object get(com.dtc.fhir.gwt.Patient _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				List<com.dtc.fhir.gwt.Address> addressList = _instance_.getAddress();
				if (addressList.size() < _index_ + 1) {
					addressList.add(new com.dtc.fhir.gwt.Address());
				}
				return addressList.get(Math.min(addressList.size() - 1, _index_));
			case "name":
				List<com.dtc.fhir.gwt.HumanName> nameList = _instance_.getName();
				if (nameList.size() < _index_ + 1) {
					nameList.add(new com.dtc.fhir.gwt.HumanName());
				}
				return nameList.get(Math.min(nameList.size() - 1, _index_));
			case "contact":
				List<com.dtc.fhir.gwt.PatientContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.PatientContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "active":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getActive();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setActive(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "gender":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getGender();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setGender(_field_);
				}
				return _field_;}
			case "birthDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getBirthDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setBirthDate(_field_);
				}
				return _field_;}
			case "photo":
				List<com.dtc.fhir.gwt.Attachment> photoList = _instance_.getPhoto();
				if (photoList.size() < _index_ + 1) {
					photoList.add(new com.dtc.fhir.gwt.Attachment());
				}
				return photoList.get(Math.min(photoList.size() - 1, _index_));
			case "communication":
				List<com.dtc.fhir.gwt.PatientCommunication> communicationList = _instance_.getCommunication();
				if (communicationList.size() < _index_ + 1) {
					communicationList.add(new com.dtc.fhir.gwt.PatientCommunication());
				}
				return communicationList.get(Math.min(communicationList.size() - 1, _index_));
			case "managingOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getManagingOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setManagingOrganization(_field_);
				}
				return _field_;}
			case "deceasedBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getDeceasedBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setDeceasedBoolean(_field_);
				}
				return _field_;}
			case "deceasedDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDeceasedDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDeceasedDateTime(_field_);
				}
				return _field_;}
			case "maritalStatus":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMaritalStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMaritalStatus(_field_);
				}
				return _field_;}
			case "multipleBirthBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getMultipleBirthBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setMultipleBirthBoolean(_field_);
				}
				return _field_;}
			case "multipleBirthInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getMultipleBirthInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setMultipleBirthInteger(_field_);
				}
				return _field_;}
			case "careProvider":
				List<com.dtc.fhir.gwt.Reference> careProviderList = _instance_.getCareProvider();
				if (careProviderList.size() < _index_ + 1) {
					careProviderList.add(new com.dtc.fhir.gwt.Reference());
				}
				return careProviderList.get(Math.min(careProviderList.size() - 1, _index_));
			case "link":
				List<com.dtc.fhir.gwt.PatientLink> linkList = _instance_.getLink();
				if (linkList.size() < _index_ + 1) {
					linkList.add(new com.dtc.fhir.gwt.PatientLink());
				}
				return linkList.get(Math.min(linkList.size() - 1, _index_));
			case "animal":
				{com.dtc.fhir.gwt.PatientAnimal _field_ = _instance_.getAnimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PatientAnimal();
					_instance_.setAnimal(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Patient");
			}
		}
	}
	private static class SetPatientAnimal {
		static void set(com.dtc.fhir.gwt.PatientAnimal instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PatientAnimal instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "species":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSpecies((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "breed":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setBreed((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "genderStatus":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setGenderStatus((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PatientAnimal");
			}
		}

		static Object get(com.dtc.fhir.gwt.PatientAnimal _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "species":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSpecies();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSpecies(_field_);
				}
				return _field_;}
			case "breed":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getBreed();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setBreed(_field_);
				}
				return _field_;}
			case "genderStatus":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getGenderStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setGenderStatus(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PatientAnimal");
			}
		}
	}
	private static class SetPatientCommunication {
		static void set(com.dtc.fhir.gwt.PatientCommunication instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PatientCommunication instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "language":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "preferred":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setPreferred((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PatientCommunication");
			}
		}

		static Object get(com.dtc.fhir.gwt.PatientCommunication _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "language":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "preferred":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getPreferred();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setPreferred(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PatientCommunication");
			}
		}
	}
	private static class SetPatientContact {
		static void set(com.dtc.fhir.gwt.PatientContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PatientContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					instance.setAddress((com.dtc.fhir.gwt.Address)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Address");
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "gender":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setGender((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "relationship":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> relationshipList = instance.getRelationship();
					if (relationshipList.size() < index + 1) {
						relationshipList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						relationshipList.set(Math.min(relationshipList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PatientContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.PatientContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				{com.dtc.fhir.gwt.Address _field_ = _instance_.getAddress();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Address();
					_instance_.setAddress(_field_);
				}
				return _field_;}
			case "name":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "gender":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getGender();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setGender(_field_);
				}
				return _field_;}
			case "relationship":
				List<com.dtc.fhir.gwt.CodeableConcept> relationshipList = _instance_.getRelationship();
				if (relationshipList.size() < _index_ + 1) {
					relationshipList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return relationshipList.get(Math.min(relationshipList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PatientContact");
			}
		}
	}
	private static class SetPatientLink {
		static void set(com.dtc.fhir.gwt.PatientLink instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PatientLink instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.LinkType || value == null) {
					instance.setType((com.dtc.fhir.gwt.LinkType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.LinkType");
				}
				break;
			case "other":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOther((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PatientLink");
			}
		}

		static Object get(com.dtc.fhir.gwt.PatientLink _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.LinkType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.LinkType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "other":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOther();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOther(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PatientLink");
			}
		}
	}
	private static class SetPaymentNotice {
		static void set(com.dtc.fhir.gwt.PaymentNotice instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PaymentNotice instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "paymentStatus":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setPaymentStatus((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "response":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setResponse((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "provider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PaymentNotice");
			}
		}

		static Object get(com.dtc.fhir.gwt.PaymentNotice _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "paymentStatus":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getPaymentStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setPaymentStatus(_field_);
				}
				return _field_;}
			case "response":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getResponse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setResponse(_field_);
				}
				return _field_;}
			case "provider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProvider(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PaymentNotice");
			}
		}
	}
	private static class SetPaymentReconciliation {
		static void set(com.dtc.fhir.gwt.PaymentReconciliation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PaymentReconciliation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "total":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setTotal((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "note":
				if (value instanceof com.dtc.fhir.gwt.PaymentReconciliationNote || value == null) {
					List<com.dtc.fhir.gwt.PaymentReconciliationNote> noteList = instance.getNote();
					if (noteList.size() < index + 1) {
						noteList.add((com.dtc.fhir.gwt.PaymentReconciliationNote)value);
					} else {
						noteList.set(Math.min(noteList.size() - 1, index), (com.dtc.fhir.gwt.PaymentReconciliationNote)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "requestOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "requestProvider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "disposition":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisposition((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "detail":
				if (value instanceof com.dtc.fhir.gwt.PaymentReconciliationDetail || value == null) {
					List<com.dtc.fhir.gwt.PaymentReconciliationDetail> detailList = instance.getDetail();
					if (detailList.size() < index + 1) {
						detailList.add((com.dtc.fhir.gwt.PaymentReconciliationDetail)value);
					} else {
						detailList.set(Math.min(detailList.size() - 1, index), (com.dtc.fhir.gwt.PaymentReconciliationDetail)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "form":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setForm((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PaymentReconciliation");
			}
		}

		static Object get(com.dtc.fhir.gwt.PaymentReconciliation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "total":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getTotal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setTotal(_field_);
				}
				return _field_;}
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "outcome":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "note":
				List<com.dtc.fhir.gwt.PaymentReconciliationNote> noteList = _instance_.getNote();
				if (noteList.size() < _index_ + 1) {
					noteList.add(new com.dtc.fhir.gwt.PaymentReconciliationNote());
				}
				return noteList.get(Math.min(noteList.size() - 1, _index_));
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "requestOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestOrganization(_field_);
				}
				return _field_;}
			case "requestProvider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestProvider(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "disposition":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisposition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisposition(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "detail":
				List<com.dtc.fhir.gwt.PaymentReconciliationDetail> detailList = _instance_.getDetail();
				if (detailList.size() < _index_ + 1) {
					detailList.add(new com.dtc.fhir.gwt.PaymentReconciliationDetail());
				}
				return detailList.get(Math.min(detailList.size() - 1, _index_));
			case "form":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getForm();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setForm(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PaymentReconciliation");
			}
		}
	}
	private static class SetPaymentReconciliationDetail {
		static void set(com.dtc.fhir.gwt.PaymentReconciliationDetail instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PaymentReconciliationDetail instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "amount":
				if (value instanceof com.dtc.fhir.gwt.Money || value == null) {
					instance.setAmount((com.dtc.fhir.gwt.Money)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Money");
				}
				break;
			case "payee":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPayee((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "responce":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setResponce((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "submitter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubmitter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PaymentReconciliationDetail");
			}
		}

		static Object get(com.dtc.fhir.gwt.PaymentReconciliationDetail _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "amount":
				{com.dtc.fhir.gwt.Money _field_ = _instance_.getAmount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Money();
					_instance_.setAmount(_field_);
				}
				return _field_;}
			case "payee":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPayee();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPayee(_field_);
				}
				return _field_;}
			case "responce":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getResponce();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setResponce(_field_);
				}
				return _field_;}
			case "submitter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubmitter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubmitter(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PaymentReconciliationDetail");
			}
		}
	}
	private static class SetPaymentReconciliationNote {
		static void set(com.dtc.fhir.gwt.PaymentReconciliationNote instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PaymentReconciliationNote instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PaymentReconciliationNote");
			}
		}

		static Object get(com.dtc.fhir.gwt.PaymentReconciliationNote _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PaymentReconciliationNote");
			}
		}
	}
	private static class SetPeriod {
		static void set(com.dtc.fhir.gwt.Period instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Period instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "start":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setStart((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "end":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setEnd((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Period");
			}
		}

		static Object get(com.dtc.fhir.gwt.Period _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "start":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getStart();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setStart(_field_);
				}
				return _field_;}
			case "end":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getEnd();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setEnd(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Period");
			}
		}
	}
	private static class SetPerson {
		static void set(com.dtc.fhir.gwt.Person instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Person instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					List<com.dtc.fhir.gwt.Address> addressList = instance.getAddress();
					if (addressList.size() < index + 1) {
						addressList.add((com.dtc.fhir.gwt.Address)value);
					} else {
						addressList.set(Math.min(addressList.size() - 1, index), (com.dtc.fhir.gwt.Address)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					List<com.dtc.fhir.gwt.HumanName> nameList = instance.getName();
					if (nameList.size() < index + 1) {
						nameList.add((com.dtc.fhir.gwt.HumanName)value);
					} else {
						nameList.set(Math.min(nameList.size() - 1, index), (com.dtc.fhir.gwt.HumanName)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "active":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setActive((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "gender":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setGender((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "birthDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setBirthDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "photo":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setPhoto((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "managingOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setManagingOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "link":
				if (value instanceof com.dtc.fhir.gwt.PersonLink || value == null) {
					List<com.dtc.fhir.gwt.PersonLink> linkList = instance.getLink();
					if (linkList.size() < index + 1) {
						linkList.add((com.dtc.fhir.gwt.PersonLink)value);
					} else {
						linkList.set(Math.min(linkList.size() - 1, index), (com.dtc.fhir.gwt.PersonLink)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Person");
			}
		}

		static Object get(com.dtc.fhir.gwt.Person _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				List<com.dtc.fhir.gwt.Address> addressList = _instance_.getAddress();
				if (addressList.size() < _index_ + 1) {
					addressList.add(new com.dtc.fhir.gwt.Address());
				}
				return addressList.get(Math.min(addressList.size() - 1, _index_));
			case "name":
				List<com.dtc.fhir.gwt.HumanName> nameList = _instance_.getName();
				if (nameList.size() < _index_ + 1) {
					nameList.add(new com.dtc.fhir.gwt.HumanName());
				}
				return nameList.get(Math.min(nameList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "active":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getActive();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setActive(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "gender":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getGender();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setGender(_field_);
				}
				return _field_;}
			case "birthDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getBirthDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setBirthDate(_field_);
				}
				return _field_;}
			case "photo":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getPhoto();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setPhoto(_field_);
				}
				return _field_;}
			case "managingOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getManagingOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setManagingOrganization(_field_);
				}
				return _field_;}
			case "link":
				List<com.dtc.fhir.gwt.PersonLink> linkList = _instance_.getLink();
				if (linkList.size() < _index_ + 1) {
					linkList.add(new com.dtc.fhir.gwt.PersonLink());
				}
				return linkList.get(Math.min(linkList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Person");
			}
		}
	}
	private static class SetPersonLink {
		static void set(com.dtc.fhir.gwt.PersonLink instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PersonLink instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "assurance":
				if (value instanceof com.dtc.fhir.gwt.IdentityAssuranceLevel || value == null) {
					instance.setAssurance((com.dtc.fhir.gwt.IdentityAssuranceLevel)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IdentityAssuranceLevel");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PersonLink");
			}
		}

		static Object get(com.dtc.fhir.gwt.PersonLink _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "assurance":
				{com.dtc.fhir.gwt.IdentityAssuranceLevel _field_ = _instance_.getAssurance();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IdentityAssuranceLevel();
					_instance_.setAssurance(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PersonLink");
			}
		}
	}
	private static class SetPositiveInt {
		static void set(com.dtc.fhir.gwt.PositiveInt instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PositiveInt instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.math.BigInteger || value == null) {
					instance.setValue((java.math.BigInteger)value);
				} else {
					throw new IllegalArgumentException("value is not a java.math.BigInteger");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PositiveInt");
			}
		}

		static Object get(com.dtc.fhir.gwt.PositiveInt _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.math.BigInteger _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PositiveInt");
			}
		}
	}
	private static class SetPractitioner {
		static void set(com.dtc.fhir.gwt.Practitioner instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Practitioner instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					List<com.dtc.fhir.gwt.Address> addressList = instance.getAddress();
					if (addressList.size() < index + 1) {
						addressList.add((com.dtc.fhir.gwt.Address)value);
					} else {
						addressList.set(Math.min(addressList.size() - 1, index), (com.dtc.fhir.gwt.Address)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "active":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setActive((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "gender":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setGender((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "birthDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setBirthDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "photo":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					List<com.dtc.fhir.gwt.Attachment> photoList = instance.getPhoto();
					if (photoList.size() < index + 1) {
						photoList.add((com.dtc.fhir.gwt.Attachment)value);
					} else {
						photoList.set(Math.min(photoList.size() - 1, index), (com.dtc.fhir.gwt.Attachment)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "practitionerRole":
				if (value instanceof com.dtc.fhir.gwt.PractitionerPractitionerRole || value == null) {
					List<com.dtc.fhir.gwt.PractitionerPractitionerRole> practitionerRoleList = instance.getPractitionerRole();
					if (practitionerRoleList.size() < index + 1) {
						practitionerRoleList.add((com.dtc.fhir.gwt.PractitionerPractitionerRole)value);
					} else {
						practitionerRoleList.set(Math.min(practitionerRoleList.size() - 1, index), (com.dtc.fhir.gwt.PractitionerPractitionerRole)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "qualification":
				if (value instanceof com.dtc.fhir.gwt.PractitionerQualification || value == null) {
					List<com.dtc.fhir.gwt.PractitionerQualification> qualificationList = instance.getQualification();
					if (qualificationList.size() < index + 1) {
						qualificationList.add((com.dtc.fhir.gwt.PractitionerQualification)value);
					} else {
						qualificationList.set(Math.min(qualificationList.size() - 1, index), (com.dtc.fhir.gwt.PractitionerQualification)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "communication":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> communicationList = instance.getCommunication();
					if (communicationList.size() < index + 1) {
						communicationList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						communicationList.set(Math.min(communicationList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Practitioner");
			}
		}

		static Object get(com.dtc.fhir.gwt.Practitioner _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				List<com.dtc.fhir.gwt.Address> addressList = _instance_.getAddress();
				if (addressList.size() < _index_ + 1) {
					addressList.add(new com.dtc.fhir.gwt.Address());
				}
				return addressList.get(Math.min(addressList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "active":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getActive();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setActive(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "gender":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getGender();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setGender(_field_);
				}
				return _field_;}
			case "birthDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getBirthDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setBirthDate(_field_);
				}
				return _field_;}
			case "photo":
				List<com.dtc.fhir.gwt.Attachment> photoList = _instance_.getPhoto();
				if (photoList.size() < _index_ + 1) {
					photoList.add(new com.dtc.fhir.gwt.Attachment());
				}
				return photoList.get(Math.min(photoList.size() - 1, _index_));
			case "practitionerRole":
				List<com.dtc.fhir.gwt.PractitionerPractitionerRole> practitionerRoleList = _instance_.getPractitionerRole();
				if (practitionerRoleList.size() < _index_ + 1) {
					practitionerRoleList.add(new com.dtc.fhir.gwt.PractitionerPractitionerRole());
				}
				return practitionerRoleList.get(Math.min(practitionerRoleList.size() - 1, _index_));
			case "qualification":
				List<com.dtc.fhir.gwt.PractitionerQualification> qualificationList = _instance_.getQualification();
				if (qualificationList.size() < _index_ + 1) {
					qualificationList.add(new com.dtc.fhir.gwt.PractitionerQualification());
				}
				return qualificationList.get(Math.min(qualificationList.size() - 1, _index_));
			case "communication":
				List<com.dtc.fhir.gwt.CodeableConcept> communicationList = _instance_.getCommunication();
				if (communicationList.size() < _index_ + 1) {
					communicationList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return communicationList.get(Math.min(communicationList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Practitioner");
			}
		}
	}
	private static class SetPractitionerPractitionerRole {
		static void set(com.dtc.fhir.gwt.PractitionerPractitionerRole instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PractitionerPractitionerRole instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> locationList = instance.getLocation();
					if (locationList.size() < index + 1) {
						locationList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						locationList.set(Math.min(locationList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "managingOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setManagingOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "role":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRole((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "healthcareService":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> healthcareServiceList = instance.getHealthcareService();
					if (healthcareServiceList.size() < index + 1) {
						healthcareServiceList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						healthcareServiceList.set(Math.min(healthcareServiceList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "specialty":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> specialtyList = instance.getSpecialty();
					if (specialtyList.size() < index + 1) {
						specialtyList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						specialtyList.set(Math.min(specialtyList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PractitionerPractitionerRole");
			}
		}

		static Object get(com.dtc.fhir.gwt.PractitionerPractitionerRole _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				List<com.dtc.fhir.gwt.Reference> locationList = _instance_.getLocation();
				if (locationList.size() < _index_ + 1) {
					locationList.add(new com.dtc.fhir.gwt.Reference());
				}
				return locationList.get(Math.min(locationList.size() - 1, _index_));
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "managingOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getManagingOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setManagingOrganization(_field_);
				}
				return _field_;}
			case "role":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRole();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRole(_field_);
				}
				return _field_;}
			case "healthcareService":
				List<com.dtc.fhir.gwt.Reference> healthcareServiceList = _instance_.getHealthcareService();
				if (healthcareServiceList.size() < _index_ + 1) {
					healthcareServiceList.add(new com.dtc.fhir.gwt.Reference());
				}
				return healthcareServiceList.get(Math.min(healthcareServiceList.size() - 1, _index_));
			case "specialty":
				List<com.dtc.fhir.gwt.CodeableConcept> specialtyList = _instance_.getSpecialty();
				if (specialtyList.size() < _index_ + 1) {
					specialtyList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return specialtyList.get(Math.min(specialtyList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PractitionerPractitionerRole");
			}
		}
	}
	private static class SetPractitionerQualification {
		static void set(com.dtc.fhir.gwt.PractitionerQualification instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PractitionerQualification instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "issuer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setIssuer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PractitionerQualification");
			}
		}

		static Object get(com.dtc.fhir.gwt.PractitionerQualification _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "issuer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getIssuer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setIssuer(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PractitionerQualification");
			}
		}
	}
	private static class SetProcedure {
		static void set(com.dtc.fhir.gwt.Procedure instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Procedure instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setLocation((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.ProcedureStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.ProcedureStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ProcedureStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCategory((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "bodySite":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> bodySiteList = instance.getBodySite();
					if (bodySiteList.size() < index + 1) {
						bodySiteList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						bodySiteList.set(Math.min(bodySiteList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "notes":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					List<com.dtc.fhir.gwt.Annotation> notesList = instance.getNotes();
					if (notesList.size() < index + 1) {
						notesList.add((com.dtc.fhir.gwt.Annotation)value);
					} else {
						notesList.set(Math.min(notesList.size() - 1, index), (com.dtc.fhir.gwt.Annotation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reasonCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReasonCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reasonReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReasonReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "notPerformed":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setNotPerformed((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "reasonNotPerformed":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonNotPerformedList = instance.getReasonNotPerformed();
					if (reasonNotPerformedList.size() < index + 1) {
						reasonNotPerformedList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonNotPerformedList.set(Math.min(reasonNotPerformedList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "performedDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setPerformedDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "performedPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPerformedPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "complication":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> complicationList = instance.getComplication();
					if (complicationList.size() < index + 1) {
						complicationList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						complicationList.set(Math.min(complicationList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "focalDevice":
				if (value instanceof com.dtc.fhir.gwt.ProcedureFocalDevice || value == null) {
					List<com.dtc.fhir.gwt.ProcedureFocalDevice> focalDeviceList = instance.getFocalDevice();
					if (focalDeviceList.size() < index + 1) {
						focalDeviceList.add((com.dtc.fhir.gwt.ProcedureFocalDevice)value);
					} else {
						focalDeviceList.set(Math.min(focalDeviceList.size() - 1, index), (com.dtc.fhir.gwt.ProcedureFocalDevice)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "performer":
				if (value instanceof com.dtc.fhir.gwt.ProcedurePerformer || value == null) {
					List<com.dtc.fhir.gwt.ProcedurePerformer> performerList = instance.getPerformer();
					if (performerList.size() < index + 1) {
						performerList.add((com.dtc.fhir.gwt.ProcedurePerformer)value);
					} else {
						performerList.set(Math.min(performerList.size() - 1, index), (com.dtc.fhir.gwt.ProcedurePerformer)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "report":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> reportList = instance.getReport();
					if (reportList.size() < index + 1) {
						reportList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						reportList.set(Math.min(reportList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "followUp":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> followUpList = instance.getFollowUp();
					if (followUpList.size() < index + 1) {
						followUpList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						followUpList.set(Math.min(followUpList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "used":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> usedList = instance.getUsed();
					if (usedList.size() < index + 1) {
						usedList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						usedList.set(Math.min(usedList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Procedure");
			}
		}

		static Object get(com.dtc.fhir.gwt.Procedure _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getLocation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setLocation(_field_);
				}
				return _field_;}
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "outcome":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.ProcedureStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ProcedureStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "category":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCategory();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCategory(_field_);
				}
				return _field_;}
			case "bodySite":
				List<com.dtc.fhir.gwt.CodeableConcept> bodySiteList = _instance_.getBodySite();
				if (bodySiteList.size() < _index_ + 1) {
					bodySiteList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return bodySiteList.get(Math.min(bodySiteList.size() - 1, _index_));
			case "notes":
				List<com.dtc.fhir.gwt.Annotation> notesList = _instance_.getNotes();
				if (notesList.size() < _index_ + 1) {
					notesList.add(new com.dtc.fhir.gwt.Annotation());
				}
				return notesList.get(Math.min(notesList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "reasonCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReasonCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReasonCodeableConcept(_field_);
				}
				return _field_;}
			case "reasonReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReasonReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReasonReference(_field_);
				}
				return _field_;}
			case "notPerformed":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getNotPerformed();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setNotPerformed(_field_);
				}
				return _field_;}
			case "reasonNotPerformed":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonNotPerformedList = _instance_.getReasonNotPerformed();
				if (reasonNotPerformedList.size() < _index_ + 1) {
					reasonNotPerformedList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonNotPerformedList.get(Math.min(reasonNotPerformedList.size() - 1, _index_));
			case "performedDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getPerformedDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setPerformedDateTime(_field_);
				}
				return _field_;}
			case "performedPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPerformedPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPerformedPeriod(_field_);
				}
				return _field_;}
			case "complication":
				List<com.dtc.fhir.gwt.CodeableConcept> complicationList = _instance_.getComplication();
				if (complicationList.size() < _index_ + 1) {
					complicationList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return complicationList.get(Math.min(complicationList.size() - 1, _index_));
			case "focalDevice":
				List<com.dtc.fhir.gwt.ProcedureFocalDevice> focalDeviceList = _instance_.getFocalDevice();
				if (focalDeviceList.size() < _index_ + 1) {
					focalDeviceList.add(new com.dtc.fhir.gwt.ProcedureFocalDevice());
				}
				return focalDeviceList.get(Math.min(focalDeviceList.size() - 1, _index_));
			case "performer":
				List<com.dtc.fhir.gwt.ProcedurePerformer> performerList = _instance_.getPerformer();
				if (performerList.size() < _index_ + 1) {
					performerList.add(new com.dtc.fhir.gwt.ProcedurePerformer());
				}
				return performerList.get(Math.min(performerList.size() - 1, _index_));
			case "report":
				List<com.dtc.fhir.gwt.Reference> reportList = _instance_.getReport();
				if (reportList.size() < _index_ + 1) {
					reportList.add(new com.dtc.fhir.gwt.Reference());
				}
				return reportList.get(Math.min(reportList.size() - 1, _index_));
			case "followUp":
				List<com.dtc.fhir.gwt.CodeableConcept> followUpList = _instance_.getFollowUp();
				if (followUpList.size() < _index_ + 1) {
					followUpList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return followUpList.get(Math.min(followUpList.size() - 1, _index_));
			case "used":
				List<com.dtc.fhir.gwt.Reference> usedList = _instance_.getUsed();
				if (usedList.size() < _index_ + 1) {
					usedList.add(new com.dtc.fhir.gwt.Reference());
				}
				return usedList.get(Math.min(usedList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Procedure");
			}
		}
	}
	private static class SetProcedureFocalDevice {
		static void set(com.dtc.fhir.gwt.ProcedureFocalDevice instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcedureFocalDevice instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "action":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAction((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "manipulated":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setManipulated((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcedureFocalDevice");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcedureFocalDevice _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "action":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAction();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAction(_field_);
				}
				return _field_;}
			case "manipulated":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getManipulated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setManipulated(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcedureFocalDevice");
			}
		}
	}
	private static class SetProcedurePerformer {
		static void set(com.dtc.fhir.gwt.ProcedurePerformer instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcedurePerformer instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "actor":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setActor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "role":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRole((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcedurePerformer");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcedurePerformer _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "actor":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getActor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setActor(_field_);
				}
				return _field_;}
			case "role":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRole();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRole(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcedurePerformer");
			}
		}
	}
	private static class SetProcedureRequest {
		static void set(com.dtc.fhir.gwt.ProcedureRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcedureRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "priority":
				if (value instanceof com.dtc.fhir.gwt.ProcedureRequestPriority || value == null) {
					instance.setPriority((com.dtc.fhir.gwt.ProcedureRequestPriority)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ProcedureRequestPriority");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.ProcedureRequestStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.ProcedureRequestStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ProcedureRequestStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "bodySite":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> bodySiteList = instance.getBodySite();
					if (bodySiteList.size() < index + 1) {
						bodySiteList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						bodySiteList.set(Math.min(bodySiteList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "notes":
				if (value instanceof com.dtc.fhir.gwt.Annotation || value == null) {
					List<com.dtc.fhir.gwt.Annotation> notesList = instance.getNotes();
					if (notesList.size() < index + 1) {
						notesList.add((com.dtc.fhir.gwt.Annotation)value);
					} else {
						notesList.set(Math.min(notesList.size() - 1, index), (com.dtc.fhir.gwt.Annotation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "scheduledDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setScheduledDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "scheduledPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setScheduledPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "reasonCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReasonCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reasonReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReasonReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "scheduledTiming":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setScheduledTiming((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "asNeededBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAsNeededBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "asNeededCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAsNeededCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "performer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPerformer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "orderer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrderer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "orderedOn":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setOrderedOn((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcedureRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcedureRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "priority":
				{com.dtc.fhir.gwt.ProcedureRequestPriority _field_ = _instance_.getPriority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ProcedureRequestPriority();
					_instance_.setPriority(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.ProcedureRequestStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ProcedureRequestStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "bodySite":
				List<com.dtc.fhir.gwt.CodeableConcept> bodySiteList = _instance_.getBodySite();
				if (bodySiteList.size() < _index_ + 1) {
					bodySiteList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return bodySiteList.get(Math.min(bodySiteList.size() - 1, _index_));
			case "notes":
				List<com.dtc.fhir.gwt.Annotation> notesList = _instance_.getNotes();
				if (notesList.size() < _index_ + 1) {
					notesList.add(new com.dtc.fhir.gwt.Annotation());
				}
				return notesList.get(Math.min(notesList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "scheduledDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getScheduledDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setScheduledDateTime(_field_);
				}
				return _field_;}
			case "scheduledPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getScheduledPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setScheduledPeriod(_field_);
				}
				return _field_;}
			case "reasonCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReasonCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReasonCodeableConcept(_field_);
				}
				return _field_;}
			case "reasonReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReasonReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReasonReference(_field_);
				}
				return _field_;}
			case "scheduledTiming":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getScheduledTiming();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setScheduledTiming(_field_);
				}
				return _field_;}
			case "asNeededBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAsNeededBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAsNeededBoolean(_field_);
				}
				return _field_;}
			case "asNeededCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAsNeededCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAsNeededCodeableConcept(_field_);
				}
				return _field_;}
			case "performer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPerformer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPerformer(_field_);
				}
				return _field_;}
			case "orderer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrderer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrderer(_field_);
				}
				return _field_;}
			case "orderedOn":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getOrderedOn();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setOrderedOn(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcedureRequest");
			}
		}
	}
	private static class SetProcedureRequestPriority {
		static void set(com.dtc.fhir.gwt.ProcedureRequestPriority instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcedureRequestPriority instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ProcedureRequestPriorityList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ProcedureRequestPriorityList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ProcedureRequestPriorityList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcedureRequestPriority");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcedureRequestPriority _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ProcedureRequestPriorityList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcedureRequestPriority");
			}
		}
	}
	private static class SetProcedureRequestStatus {
		static void set(com.dtc.fhir.gwt.ProcedureRequestStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcedureRequestStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ProcedureRequestStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ProcedureRequestStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ProcedureRequestStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcedureRequestStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcedureRequestStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ProcedureRequestStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcedureRequestStatus");
			}
		}
	}
	private static class SetProcedureStatus {
		static void set(com.dtc.fhir.gwt.ProcedureStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcedureStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ProcedureStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ProcedureStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ProcedureStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcedureStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcedureStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ProcedureStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcedureStatus");
			}
		}
	}
	private static class SetProcessRequest {
		static void set(com.dtc.fhir.gwt.ProcessRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcessRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "action":
				if (value instanceof com.dtc.fhir.gwt.ActionList || value == null) {
					instance.setAction((com.dtc.fhir.gwt.ActionList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ActionList");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "item":
				if (value instanceof com.dtc.fhir.gwt.ProcessRequestItem || value == null) {
					List<com.dtc.fhir.gwt.ProcessRequestItem> itemList = instance.getItem();
					if (itemList.size() < index + 1) {
						itemList.add((com.dtc.fhir.gwt.ProcessRequestItem)value);
					} else {
						itemList.set(Math.min(itemList.size() - 1, index), (com.dtc.fhir.gwt.ProcessRequestItem)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "nullify":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setNullify((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "include":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> includeList = instance.getInclude();
					if (includeList.size() < index + 1) {
						includeList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						includeList.set(Math.min(includeList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "exclude":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> excludeList = instance.getExclude();
					if (excludeList.size() < index + 1) {
						excludeList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						excludeList.set(Math.min(excludeList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "response":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setResponse((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "reference":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setReference((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "provider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcessRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcessRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "target":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "action":
				{com.dtc.fhir.gwt.ActionList _field_ = _instance_.getAction();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ActionList();
					_instance_.setAction(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "item":
				List<com.dtc.fhir.gwt.ProcessRequestItem> itemList = _instance_.getItem();
				if (itemList.size() < _index_ + 1) {
					itemList.add(new com.dtc.fhir.gwt.ProcessRequestItem());
				}
				return itemList.get(Math.min(itemList.size() - 1, _index_));
			case "nullify":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getNullify();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setNullify(_field_);
				}
				return _field_;}
			case "include":
				List<com.dtc.fhir.gwt.StringDt> includeList = _instance_.getInclude();
				if (includeList.size() < _index_ + 1) {
					includeList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return includeList.get(Math.min(includeList.size() - 1, _index_));
			case "exclude":
				List<com.dtc.fhir.gwt.StringDt> excludeList = _instance_.getExclude();
				if (excludeList.size() < _index_ + 1) {
					excludeList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return excludeList.get(Math.min(excludeList.size() - 1, _index_));
			case "response":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getResponse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setResponse(_field_);
				}
				return _field_;}
			case "reference":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setReference(_field_);
				}
				return _field_;}
			case "provider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setProvider(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcessRequest");
			}
		}
	}
	private static class SetProcessRequestItem {
		static void set(com.dtc.fhir.gwt.ProcessRequestItem instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcessRequestItem instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "sequenceLinkId":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setSequenceLinkId((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcessRequestItem");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcessRequestItem _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "sequenceLinkId":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getSequenceLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setSequenceLinkId(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcessRequestItem");
			}
		}
	}
	private static class SetProcessResponse {
		static void set(com.dtc.fhir.gwt.ProcessResponse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcessResponse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "request":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequest((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "created":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCreated((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "ruleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "notes":
				if (value instanceof com.dtc.fhir.gwt.ProcessResponseNotes || value == null) {
					List<com.dtc.fhir.gwt.ProcessResponseNotes> notesList = instance.getNotes();
					if (notesList.size() < index + 1) {
						notesList.add((com.dtc.fhir.gwt.ProcessResponseNotes)value);
					} else {
						notesList.set(Math.min(notesList.size() - 1, index), (com.dtc.fhir.gwt.ProcessResponseNotes)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "requestOrganization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "requestProvider":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequestProvider((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "organization":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrganization((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "originalRuleset":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setOriginalRuleset((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "disposition":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisposition((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "error":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> errorList = instance.getError();
					if (errorList.size() < index + 1) {
						errorList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						errorList.set(Math.min(errorList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "form":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setForm((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcessResponse");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcessResponse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "request":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequest();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequest(_field_);
				}
				return _field_;}
			case "outcome":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "created":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCreated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCreated(_field_);
				}
				return _field_;}
			case "ruleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRuleset(_field_);
				}
				return _field_;}
			case "notes":
				List<com.dtc.fhir.gwt.ProcessResponseNotes> notesList = _instance_.getNotes();
				if (notesList.size() < _index_ + 1) {
					notesList.add(new com.dtc.fhir.gwt.ProcessResponseNotes());
				}
				return notesList.get(Math.min(notesList.size() - 1, _index_));
			case "requestOrganization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestOrganization(_field_);
				}
				return _field_;}
			case "requestProvider":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequestProvider();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequestProvider(_field_);
				}
				return _field_;}
			case "organization":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrganization();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrganization(_field_);
				}
				return _field_;}
			case "originalRuleset":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getOriginalRuleset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setOriginalRuleset(_field_);
				}
				return _field_;}
			case "disposition":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisposition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisposition(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "error":
				List<com.dtc.fhir.gwt.Coding> errorList = _instance_.getError();
				if (errorList.size() < _index_ + 1) {
					errorList.add(new com.dtc.fhir.gwt.Coding());
				}
				return errorList.get(Math.min(errorList.size() - 1, _index_));
			case "form":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getForm();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setForm(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcessResponse");
			}
		}
	}
	private static class SetProcessResponseNotes {
		static void set(com.dtc.fhir.gwt.ProcessResponseNotes instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProcessResponseNotes instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProcessResponseNotes");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProcessResponseNotes _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProcessResponseNotes");
			}
		}
	}
	private static class SetPropertyRepresentation {
		static void set(com.dtc.fhir.gwt.PropertyRepresentation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.PropertyRepresentation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.PropertyRepresentationList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.PropertyRepresentationList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PropertyRepresentationList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of PropertyRepresentation");
			}
		}

		static Object get(com.dtc.fhir.gwt.PropertyRepresentation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.PropertyRepresentationList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of PropertyRepresentation");
			}
		}
	}
	private static class SetProvenance {
		static void set(com.dtc.fhir.gwt.Provenance instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Provenance instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "location":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setLocation((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "signature":
				if (value instanceof com.dtc.fhir.gwt.Signature || value == null) {
					List<com.dtc.fhir.gwt.Signature> signatureList = instance.getSignature();
					if (signatureList.size() < index + 1) {
						signatureList.add((com.dtc.fhir.gwt.Signature)value);
					} else {
						signatureList.set(Math.min(signatureList.size() - 1, index), (com.dtc.fhir.gwt.Signature)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> targetList = instance.getTarget();
					if (targetList.size() < index + 1) {
						targetList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						targetList.set(Math.min(targetList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> reasonList = instance.getReason();
					if (reasonList.size() < index + 1) {
						reasonList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						reasonList.set(Math.min(reasonList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "policy":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					List<com.dtc.fhir.gwt.Uri> policyList = instance.getPolicy();
					if (policyList.size() < index + 1) {
						policyList.add((com.dtc.fhir.gwt.Uri)value);
					} else {
						policyList.set(Math.min(policyList.size() - 1, index), (com.dtc.fhir.gwt.Uri)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "agent":
				if (value instanceof com.dtc.fhir.gwt.ProvenanceAgent || value == null) {
					List<com.dtc.fhir.gwt.ProvenanceAgent> agentList = instance.getAgent();
					if (agentList.size() < index + 1) {
						agentList.add((com.dtc.fhir.gwt.ProvenanceAgent)value);
					} else {
						agentList.set(Math.min(agentList.size() - 1, index), (com.dtc.fhir.gwt.ProvenanceAgent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "recorded":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setRecorded((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "entity":
				if (value instanceof com.dtc.fhir.gwt.ProvenanceEntity || value == null) {
					List<com.dtc.fhir.gwt.ProvenanceEntity> entityList = instance.getEntity();
					if (entityList.size() < index + 1) {
						entityList.add((com.dtc.fhir.gwt.ProvenanceEntity)value);
					} else {
						entityList.set(Math.min(entityList.size() - 1, index), (com.dtc.fhir.gwt.ProvenanceEntity)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "activity":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setActivity((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Provenance");
			}
		}

		static Object get(com.dtc.fhir.gwt.Provenance _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "location":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getLocation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setLocation(_field_);
				}
				return _field_;}
			case "signature":
				List<com.dtc.fhir.gwt.Signature> signatureList = _instance_.getSignature();
				if (signatureList.size() < _index_ + 1) {
					signatureList.add(new com.dtc.fhir.gwt.Signature());
				}
				return signatureList.get(Math.min(signatureList.size() - 1, _index_));
			case "target":
				List<com.dtc.fhir.gwt.Reference> targetList = _instance_.getTarget();
				if (targetList.size() < _index_ + 1) {
					targetList.add(new com.dtc.fhir.gwt.Reference());
				}
				return targetList.get(Math.min(targetList.size() - 1, _index_));
			case "reason":
				List<com.dtc.fhir.gwt.CodeableConcept> reasonList = _instance_.getReason();
				if (reasonList.size() < _index_ + 1) {
					reasonList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return reasonList.get(Math.min(reasonList.size() - 1, _index_));
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "policy":
				List<com.dtc.fhir.gwt.Uri> policyList = _instance_.getPolicy();
				if (policyList.size() < _index_ + 1) {
					policyList.add(new com.dtc.fhir.gwt.Uri());
				}
				return policyList.get(Math.min(policyList.size() - 1, _index_));
			case "agent":
				List<com.dtc.fhir.gwt.ProvenanceAgent> agentList = _instance_.getAgent();
				if (agentList.size() < _index_ + 1) {
					agentList.add(new com.dtc.fhir.gwt.ProvenanceAgent());
				}
				return agentList.get(Math.min(agentList.size() - 1, _index_));
			case "recorded":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getRecorded();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setRecorded(_field_);
				}
				return _field_;}
			case "entity":
				List<com.dtc.fhir.gwt.ProvenanceEntity> entityList = _instance_.getEntity();
				if (entityList.size() < _index_ + 1) {
					entityList.add(new com.dtc.fhir.gwt.ProvenanceEntity());
				}
				return entityList.get(Math.min(entityList.size() - 1, _index_));
			case "activity":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getActivity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setActivity(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Provenance");
			}
		}
	}
	private static class SetProvenanceAgent {
		static void set(com.dtc.fhir.gwt.ProvenanceAgent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProvenanceAgent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "actor":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setActor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "role":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setRole((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "relatedAgent":
				if (value instanceof com.dtc.fhir.gwt.ProvenanceRelatedAgent || value == null) {
					List<com.dtc.fhir.gwt.ProvenanceRelatedAgent> relatedAgentList = instance.getRelatedAgent();
					if (relatedAgentList.size() < index + 1) {
						relatedAgentList.add((com.dtc.fhir.gwt.ProvenanceRelatedAgent)value);
					} else {
						relatedAgentList.set(Math.min(relatedAgentList.size() - 1, index), (com.dtc.fhir.gwt.ProvenanceRelatedAgent)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "userId":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setUserId((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProvenanceAgent");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProvenanceAgent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "actor":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getActor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setActor(_field_);
				}
				return _field_;}
			case "role":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getRole();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setRole(_field_);
				}
				return _field_;}
			case "relatedAgent":
				List<com.dtc.fhir.gwt.ProvenanceRelatedAgent> relatedAgentList = _instance_.getRelatedAgent();
				if (relatedAgentList.size() < _index_ + 1) {
					relatedAgentList.add(new com.dtc.fhir.gwt.ProvenanceRelatedAgent());
				}
				return relatedAgentList.get(Math.min(relatedAgentList.size() - 1, _index_));
			case "userId":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getUserId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setUserId(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProvenanceAgent");
			}
		}
	}
	private static class SetProvenanceEntity {
		static void set(com.dtc.fhir.gwt.ProvenanceEntity instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProvenanceEntity instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "agent":
				if (value instanceof com.dtc.fhir.gwt.ProvenanceAgent || value == null) {
					instance.setAgent((com.dtc.fhir.gwt.ProvenanceAgent)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ProvenanceAgent");
				}
				break;
			case "role":
				if (value instanceof com.dtc.fhir.gwt.ProvenanceEntityRole || value == null) {
					instance.setRole((com.dtc.fhir.gwt.ProvenanceEntityRole)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ProvenanceEntityRole");
				}
				break;
			case "reference":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setReference((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "display":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisplay((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProvenanceEntity");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProvenanceEntity _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "agent":
				{com.dtc.fhir.gwt.ProvenanceAgent _field_ = _instance_.getAgent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ProvenanceAgent();
					_instance_.setAgent(_field_);
				}
				return _field_;}
			case "role":
				{com.dtc.fhir.gwt.ProvenanceEntityRole _field_ = _instance_.getRole();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ProvenanceEntityRole();
					_instance_.setRole(_field_);
				}
				return _field_;}
			case "reference":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setReference(_field_);
				}
				return _field_;}
			case "display":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisplay();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisplay(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProvenanceEntity");
			}
		}
	}
	private static class SetProvenanceEntityRole {
		static void set(com.dtc.fhir.gwt.ProvenanceEntityRole instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProvenanceEntityRole instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ProvenanceEntityRoleList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ProvenanceEntityRoleList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ProvenanceEntityRoleList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProvenanceEntityRole");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProvenanceEntityRole _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ProvenanceEntityRoleList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProvenanceEntityRole");
			}
		}
	}
	private static class SetProvenanceRelatedAgent {
		static void set(com.dtc.fhir.gwt.ProvenanceRelatedAgent instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ProvenanceRelatedAgent instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setTarget((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ProvenanceRelatedAgent");
			}
		}

		static Object get(com.dtc.fhir.gwt.ProvenanceRelatedAgent _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "target":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getTarget();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setTarget(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ProvenanceRelatedAgent");
			}
		}
	}
	private static class SetQuantity {
		static void set(com.dtc.fhir.gwt.Quantity instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Quantity instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "comparator":
				if (value instanceof com.dtc.fhir.gwt.QuantityComparator || value == null) {
					instance.setComparator((com.dtc.fhir.gwt.QuantityComparator)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuantityComparator");
				}
				break;
			case "unit":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUnit((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Quantity");
			}
		}

		static Object get(com.dtc.fhir.gwt.Quantity _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "comparator":
				{com.dtc.fhir.gwt.QuantityComparator _field_ = _instance_.getComparator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuantityComparator();
					_instance_.setComparator(_field_);
				}
				return _field_;}
			case "unit":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUnit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUnit(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Quantity");
			}
		}
	}
	private static class SetQuantityComparator {
		static void set(com.dtc.fhir.gwt.QuantityComparator instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.QuantityComparator instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of QuantityComparator");
			}
		}

		static Object get(com.dtc.fhir.gwt.QuantityComparator _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of QuantityComparator");
			}
		}
	}
	private static class SetQuestionnaire {
		static void set(com.dtc.fhir.gwt.Questionnaire instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Questionnaire instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.QuestionnaireStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuestionnaireStatus");
				}
				break;
			case "group":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireGroup || value == null) {
					instance.setGroup((com.dtc.fhir.gwt.QuestionnaireGroup)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuestionnaireGroup");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "subjectType":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					List<com.dtc.fhir.gwt.Code> subjectTypeList = instance.getSubjectType();
					if (subjectTypeList.size() < index + 1) {
						subjectTypeList.add((com.dtc.fhir.gwt.Code)value);
					} else {
						subjectTypeList.set(Math.min(subjectTypeList.size() - 1, index), (com.dtc.fhir.gwt.Code)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Questionnaire");
			}
		}

		static Object get(com.dtc.fhir.gwt.Questionnaire _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.QuestionnaireStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuestionnaireStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "group":
				{com.dtc.fhir.gwt.QuestionnaireGroup _field_ = _instance_.getGroup();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuestionnaireGroup();
					_instance_.setGroup(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "subjectType":
				List<com.dtc.fhir.gwt.Code> subjectTypeList = _instance_.getSubjectType();
				if (subjectTypeList.size() < _index_ + 1) {
					subjectTypeList.add(new com.dtc.fhir.gwt.Code());
				}
				return subjectTypeList.get(Math.min(subjectTypeList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Questionnaire");
			}
		}
	}
	private static class SetQuestionnaireGroup {
		static void set(com.dtc.fhir.gwt.QuestionnaireGroup instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.QuestionnaireGroup instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "group":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireGroup || value == null) {
					List<com.dtc.fhir.gwt.QuestionnaireGroup> groupList = instance.getGroup();
					if (groupList.size() < index + 1) {
						groupList.add((com.dtc.fhir.gwt.QuestionnaireGroup)value);
					} else {
						groupList.set(Math.min(groupList.size() - 1, index), (com.dtc.fhir.gwt.QuestionnaireGroup)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "concept":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> conceptList = instance.getConcept();
					if (conceptList.size() < index + 1) {
						conceptList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						conceptList.set(Math.min(conceptList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "linkId":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLinkId((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "required":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setRequired((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "repeats":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setRepeats((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "title":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setTitle((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "question":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireQuestion || value == null) {
					List<com.dtc.fhir.gwt.QuestionnaireQuestion> questionList = instance.getQuestion();
					if (questionList.size() < index + 1) {
						questionList.add((com.dtc.fhir.gwt.QuestionnaireQuestion)value);
					} else {
						questionList.set(Math.min(questionList.size() - 1, index), (com.dtc.fhir.gwt.QuestionnaireQuestion)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of QuestionnaireGroup");
			}
		}

		static Object get(com.dtc.fhir.gwt.QuestionnaireGroup _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "group":
				List<com.dtc.fhir.gwt.QuestionnaireGroup> groupList = _instance_.getGroup();
				if (groupList.size() < _index_ + 1) {
					groupList.add(new com.dtc.fhir.gwt.QuestionnaireGroup());
				}
				return groupList.get(Math.min(groupList.size() - 1, _index_));
			case "concept":
				List<com.dtc.fhir.gwt.Coding> conceptList = _instance_.getConcept();
				if (conceptList.size() < _index_ + 1) {
					conceptList.add(new com.dtc.fhir.gwt.Coding());
				}
				return conceptList.get(Math.min(conceptList.size() - 1, _index_));
			case "linkId":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLinkId(_field_);
				}
				return _field_;}
			case "required":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getRequired();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setRequired(_field_);
				}
				return _field_;}
			case "repeats":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getRepeats();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setRepeats(_field_);
				}
				return _field_;}
			case "title":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getTitle();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setTitle(_field_);
				}
				return _field_;}
			case "question":
				List<com.dtc.fhir.gwt.QuestionnaireQuestion> questionList = _instance_.getQuestion();
				if (questionList.size() < _index_ + 1) {
					questionList.add(new com.dtc.fhir.gwt.QuestionnaireQuestion());
				}
				return questionList.get(Math.min(questionList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of QuestionnaireGroup");
			}
		}
	}
	private static class SetQuestionnaireQuestion {
		static void set(com.dtc.fhir.gwt.QuestionnaireQuestion instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.QuestionnaireQuestion instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.AnswerFormat || value == null) {
					instance.setType((com.dtc.fhir.gwt.AnswerFormat)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AnswerFormat");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "group":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireGroup || value == null) {
					List<com.dtc.fhir.gwt.QuestionnaireGroup> groupList = instance.getGroup();
					if (groupList.size() < index + 1) {
						groupList.add((com.dtc.fhir.gwt.QuestionnaireGroup)value);
					} else {
						groupList.set(Math.min(groupList.size() - 1, index), (com.dtc.fhir.gwt.QuestionnaireGroup)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "concept":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> conceptList = instance.getConcept();
					if (conceptList.size() < index + 1) {
						conceptList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						conceptList.set(Math.min(conceptList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "linkId":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLinkId((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "required":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setRequired((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "repeats":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setRepeats((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "options":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOptions((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "option":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> optionList = instance.getOption();
					if (optionList.size() < index + 1) {
						optionList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						optionList.set(Math.min(optionList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of QuestionnaireQuestion");
			}
		}

		static Object get(com.dtc.fhir.gwt.QuestionnaireQuestion _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.AnswerFormat _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AnswerFormat();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "group":
				List<com.dtc.fhir.gwt.QuestionnaireGroup> groupList = _instance_.getGroup();
				if (groupList.size() < _index_ + 1) {
					groupList.add(new com.dtc.fhir.gwt.QuestionnaireGroup());
				}
				return groupList.get(Math.min(groupList.size() - 1, _index_));
			case "concept":
				List<com.dtc.fhir.gwt.Coding> conceptList = _instance_.getConcept();
				if (conceptList.size() < _index_ + 1) {
					conceptList.add(new com.dtc.fhir.gwt.Coding());
				}
				return conceptList.get(Math.min(conceptList.size() - 1, _index_));
			case "linkId":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLinkId(_field_);
				}
				return _field_;}
			case "required":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getRequired();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setRequired(_field_);
				}
				return _field_;}
			case "repeats":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getRepeats();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setRepeats(_field_);
				}
				return _field_;}
			case "options":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOptions();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOptions(_field_);
				}
				return _field_;}
			case "option":
				List<com.dtc.fhir.gwt.Coding> optionList = _instance_.getOption();
				if (optionList.size() < _index_ + 1) {
					optionList.add(new com.dtc.fhir.gwt.Coding());
				}
				return optionList.get(Math.min(optionList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of QuestionnaireQuestion");
			}
		}
	}
	private static class SetQuestionnaireResponse {
		static void set(com.dtc.fhir.gwt.QuestionnaireResponse instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.QuestionnaireResponse instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireResponseStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.QuestionnaireResponseStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuestionnaireResponseStatus");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "group":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireResponseGroup || value == null) {
					instance.setGroup((com.dtc.fhir.gwt.QuestionnaireResponseGroup)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuestionnaireResponseGroup");
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSource((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "questionnaire":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setQuestionnaire((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "author":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAuthor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "authored":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setAuthored((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of QuestionnaireResponse");
			}
		}

		static Object get(com.dtc.fhir.gwt.QuestionnaireResponse _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.QuestionnaireResponseStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuestionnaireResponseStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "group":
				{com.dtc.fhir.gwt.QuestionnaireResponseGroup _field_ = _instance_.getGroup();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuestionnaireResponseGroup();
					_instance_.setGroup(_field_);
				}
				return _field_;}
			case "source":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "questionnaire":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getQuestionnaire();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setQuestionnaire(_field_);
				}
				return _field_;}
			case "author":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAuthor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAuthor(_field_);
				}
				return _field_;}
			case "authored":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getAuthored();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setAuthored(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of QuestionnaireResponse");
			}
		}
	}
	private static class SetQuestionnaireResponseAnswer {
		static void set(com.dtc.fhir.gwt.QuestionnaireResponseAnswer instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.QuestionnaireResponseAnswer instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "group":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireResponseGroup || value == null) {
					List<com.dtc.fhir.gwt.QuestionnaireResponseGroup> groupList = instance.getGroup();
					if (groupList.size() < index + 1) {
						groupList.add((com.dtc.fhir.gwt.QuestionnaireResponseGroup)value);
					} else {
						groupList.set(Math.min(groupList.size() - 1, index), (com.dtc.fhir.gwt.QuestionnaireResponseGroup)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "valueQuantity":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setValueQuantity((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "valueString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValueString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "valueAttachment":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					instance.setValueAttachment((com.dtc.fhir.gwt.Attachment)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Attachment");
				}
				break;
			case "valueDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setValueDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "valueUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setValueUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "valueDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setValueDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "valueBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setValueBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "valueInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setValueInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "valueDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValueDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "valueInstant":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setValueInstant((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "valueCoding":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setValueCoding((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "valueReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setValueReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "valueTime":
				if (value instanceof com.dtc.fhir.gwt.Time || value == null) {
					instance.setValueTime((com.dtc.fhir.gwt.Time)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Time");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of QuestionnaireResponseAnswer");
			}
		}

		static Object get(com.dtc.fhir.gwt.QuestionnaireResponseAnswer _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "group":
				List<com.dtc.fhir.gwt.QuestionnaireResponseGroup> groupList = _instance_.getGroup();
				if (groupList.size() < _index_ + 1) {
					groupList.add(new com.dtc.fhir.gwt.QuestionnaireResponseGroup());
				}
				return groupList.get(Math.min(groupList.size() - 1, _index_));
			case "valueQuantity":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getValueQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setValueQuantity(_field_);
				}
				return _field_;}
			case "valueString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValueString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValueString(_field_);
				}
				return _field_;}
			case "valueAttachment":
				{com.dtc.fhir.gwt.Attachment _field_ = _instance_.getValueAttachment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Attachment();
					_instance_.setValueAttachment(_field_);
				}
				return _field_;}
			case "valueDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getValueDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setValueDateTime(_field_);
				}
				return _field_;}
			case "valueUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getValueUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setValueUri(_field_);
				}
				return _field_;}
			case "valueDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getValueDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setValueDate(_field_);
				}
				return _field_;}
			case "valueBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getValueBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setValueBoolean(_field_);
				}
				return _field_;}
			case "valueInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getValueInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setValueInteger(_field_);
				}
				return _field_;}
			case "valueDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValueDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValueDecimal(_field_);
				}
				return _field_;}
			case "valueInstant":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getValueInstant();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setValueInstant(_field_);
				}
				return _field_;}
			case "valueCoding":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getValueCoding();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setValueCoding(_field_);
				}
				return _field_;}
			case "valueReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getValueReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setValueReference(_field_);
				}
				return _field_;}
			case "valueTime":
				{com.dtc.fhir.gwt.Time _field_ = _instance_.getValueTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Time();
					_instance_.setValueTime(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of QuestionnaireResponseAnswer");
			}
		}
	}
	private static class SetQuestionnaireResponseGroup {
		static void set(com.dtc.fhir.gwt.QuestionnaireResponseGroup instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.QuestionnaireResponseGroup instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "group":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireResponseGroup || value == null) {
					List<com.dtc.fhir.gwt.QuestionnaireResponseGroup> groupList = instance.getGroup();
					if (groupList.size() < index + 1) {
						groupList.add((com.dtc.fhir.gwt.QuestionnaireResponseGroup)value);
					} else {
						groupList.set(Math.min(groupList.size() - 1, index), (com.dtc.fhir.gwt.QuestionnaireResponseGroup)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "linkId":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLinkId((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "title":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setTitle((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "question":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireResponseQuestion || value == null) {
					List<com.dtc.fhir.gwt.QuestionnaireResponseQuestion> questionList = instance.getQuestion();
					if (questionList.size() < index + 1) {
						questionList.add((com.dtc.fhir.gwt.QuestionnaireResponseQuestion)value);
					} else {
						questionList.set(Math.min(questionList.size() - 1, index), (com.dtc.fhir.gwt.QuestionnaireResponseQuestion)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of QuestionnaireResponseGroup");
			}
		}

		static Object get(com.dtc.fhir.gwt.QuestionnaireResponseGroup _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "group":
				List<com.dtc.fhir.gwt.QuestionnaireResponseGroup> groupList = _instance_.getGroup();
				if (groupList.size() < _index_ + 1) {
					groupList.add(new com.dtc.fhir.gwt.QuestionnaireResponseGroup());
				}
				return groupList.get(Math.min(groupList.size() - 1, _index_));
			case "linkId":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLinkId(_field_);
				}
				return _field_;}
			case "title":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getTitle();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setTitle(_field_);
				}
				return _field_;}
			case "question":
				List<com.dtc.fhir.gwt.QuestionnaireResponseQuestion> questionList = _instance_.getQuestion();
				if (questionList.size() < _index_ + 1) {
					questionList.add(new com.dtc.fhir.gwt.QuestionnaireResponseQuestion());
				}
				return questionList.get(Math.min(questionList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of QuestionnaireResponseGroup");
			}
		}
	}
	private static class SetQuestionnaireResponseQuestion {
		static void set(com.dtc.fhir.gwt.QuestionnaireResponseQuestion instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.QuestionnaireResponseQuestion instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "text":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setText((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "linkId":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLinkId((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "answer":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireResponseAnswer || value == null) {
					List<com.dtc.fhir.gwt.QuestionnaireResponseAnswer> answerList = instance.getAnswer();
					if (answerList.size() < index + 1) {
						answerList.add((com.dtc.fhir.gwt.QuestionnaireResponseAnswer)value);
					} else {
						answerList.set(Math.min(answerList.size() - 1, index), (com.dtc.fhir.gwt.QuestionnaireResponseAnswer)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of QuestionnaireResponseQuestion");
			}
		}

		static Object get(com.dtc.fhir.gwt.QuestionnaireResponseQuestion _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "text":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "linkId":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLinkId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLinkId(_field_);
				}
				return _field_;}
			case "answer":
				List<com.dtc.fhir.gwt.QuestionnaireResponseAnswer> answerList = _instance_.getAnswer();
				if (answerList.size() < _index_ + 1) {
					answerList.add(new com.dtc.fhir.gwt.QuestionnaireResponseAnswer());
				}
				return answerList.get(Math.min(answerList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of QuestionnaireResponseQuestion");
			}
		}
	}
	private static class SetQuestionnaireResponseStatus {
		static void set(com.dtc.fhir.gwt.QuestionnaireResponseStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.QuestionnaireResponseStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireResponseStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.QuestionnaireResponseStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuestionnaireResponseStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of QuestionnaireResponseStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.QuestionnaireResponseStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.QuestionnaireResponseStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of QuestionnaireResponseStatus");
			}
		}
	}
	private static class SetQuestionnaireStatus {
		static void set(com.dtc.fhir.gwt.QuestionnaireStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.QuestionnaireStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.QuestionnaireStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.QuestionnaireStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuestionnaireStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of QuestionnaireStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.QuestionnaireStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.QuestionnaireStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of QuestionnaireStatus");
			}
		}
	}
	private static class SetRange {
		static void set(com.dtc.fhir.gwt.Range instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Range instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "low":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setLow((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "high":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setHigh((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Range");
			}
		}

		static Object get(com.dtc.fhir.gwt.Range _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "low":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getLow();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setLow(_field_);
				}
				return _field_;}
			case "high":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getHigh();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setHigh(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Range");
			}
		}
	}
	private static class SetRatio {
		static void set(com.dtc.fhir.gwt.Ratio instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Ratio instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "numerator":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setNumerator((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "denominator":
				if (value instanceof com.dtc.fhir.gwt.Quantity || value == null) {
					instance.setDenominator((com.dtc.fhir.gwt.Quantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Quantity");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Ratio");
			}
		}

		static Object get(com.dtc.fhir.gwt.Ratio _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "numerator":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getNumerator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setNumerator(_field_);
				}
				return _field_;}
			case "denominator":
				{com.dtc.fhir.gwt.Quantity _field_ = _instance_.getDenominator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Quantity();
					_instance_.setDenominator(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Ratio");
			}
		}
	}
	private static class SetReference {
		static void set(com.dtc.fhir.gwt.Reference instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Reference instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "reference":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setReference((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "display":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisplay((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Reference");
			}
		}

		static Object get(com.dtc.fhir.gwt.Reference _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "reference":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setReference(_field_);
				}
				return _field_;}
			case "display":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisplay();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisplay(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Reference");
			}
		}
	}
	private static class SetReferralRequest {
		static void set(com.dtc.fhir.gwt.ReferralRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ReferralRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "priority":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setPriority((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReason((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.ReferralStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.ReferralStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ReferralStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "supportingInformation":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> supportingInformationList = instance.getSupportingInformation();
					if (supportingInformationList.size() < index + 1) {
						supportingInformationList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						supportingInformationList.set(Math.min(supportingInformationList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "serviceRequested":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> serviceRequestedList = instance.getServiceRequested();
					if (serviceRequestedList.size() < index + 1) {
						serviceRequestedList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						serviceRequestedList.set(Math.min(serviceRequestedList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "fulfillmentTime":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setFulfillmentTime((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "recipient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> recipientList = instance.getRecipient();
					if (recipientList.size() < index + 1) {
						recipientList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						recipientList.set(Math.min(recipientList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "requester":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setRequester((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "specialty":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setSpecialty((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "dateSent":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDateSent((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ReferralRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.ReferralRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "priority":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getPriority();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setPriority(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "reason":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReason(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.ReferralStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ReferralStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "supportingInformation":
				List<com.dtc.fhir.gwt.Reference> supportingInformationList = _instance_.getSupportingInformation();
				if (supportingInformationList.size() < _index_ + 1) {
					supportingInformationList.add(new com.dtc.fhir.gwt.Reference());
				}
				return supportingInformationList.get(Math.min(supportingInformationList.size() - 1, _index_));
			case "serviceRequested":
				List<com.dtc.fhir.gwt.CodeableConcept> serviceRequestedList = _instance_.getServiceRequested();
				if (serviceRequestedList.size() < _index_ + 1) {
					serviceRequestedList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return serviceRequestedList.get(Math.min(serviceRequestedList.size() - 1, _index_));
			case "fulfillmentTime":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getFulfillmentTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setFulfillmentTime(_field_);
				}
				return _field_;}
			case "recipient":
				List<com.dtc.fhir.gwt.Reference> recipientList = _instance_.getRecipient();
				if (recipientList.size() < _index_ + 1) {
					recipientList.add(new com.dtc.fhir.gwt.Reference());
				}
				return recipientList.get(Math.min(recipientList.size() - 1, _index_));
			case "requester":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getRequester();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setRequester(_field_);
				}
				return _field_;}
			case "specialty":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getSpecialty();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setSpecialty(_field_);
				}
				return _field_;}
			case "dateSent":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDateSent();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDateSent(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ReferralRequest");
			}
		}
	}
	private static class SetReferralStatus {
		static void set(com.dtc.fhir.gwt.ReferralStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ReferralStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ReferralStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ReferralStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ReferralStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ReferralStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.ReferralStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ReferralStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ReferralStatus");
			}
		}
	}
	private static class SetRelatedPerson {
		static void set(com.dtc.fhir.gwt.RelatedPerson instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.RelatedPerson instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "address":
				if (value instanceof com.dtc.fhir.gwt.Address || value == null) {
					List<com.dtc.fhir.gwt.Address> addressList = instance.getAddress();
					if (addressList.size() < index + 1) {
						addressList.add((com.dtc.fhir.gwt.Address)value);
					} else {
						addressList.set(Math.min(addressList.size() - 1, index), (com.dtc.fhir.gwt.Address)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.HumanName || value == null) {
					instance.setName((com.dtc.fhir.gwt.HumanName)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.HumanName");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "gender":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setGender((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "birthDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setBirthDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "photo":
				if (value instanceof com.dtc.fhir.gwt.Attachment || value == null) {
					List<com.dtc.fhir.gwt.Attachment> photoList = instance.getPhoto();
					if (photoList.size() < index + 1) {
						photoList.add((com.dtc.fhir.gwt.Attachment)value);
					} else {
						photoList.set(Math.min(photoList.size() - 1, index), (com.dtc.fhir.gwt.Attachment)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "relationship":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setRelationship((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of RelatedPerson");
			}
		}

		static Object get(com.dtc.fhir.gwt.RelatedPerson _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "address":
				List<com.dtc.fhir.gwt.Address> addressList = _instance_.getAddress();
				if (addressList.size() < _index_ + 1) {
					addressList.add(new com.dtc.fhir.gwt.Address());
				}
				return addressList.get(Math.min(addressList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.HumanName _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.HumanName();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "gender":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getGender();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setGender(_field_);
				}
				return _field_;}
			case "birthDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getBirthDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setBirthDate(_field_);
				}
				return _field_;}
			case "photo":
				List<com.dtc.fhir.gwt.Attachment> photoList = _instance_.getPhoto();
				if (photoList.size() < _index_ + 1) {
					photoList.add(new com.dtc.fhir.gwt.Attachment());
				}
				return photoList.get(Math.min(photoList.size() - 1, _index_));
			case "relationship":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getRelationship();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setRelationship(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of RelatedPerson");
			}
		}
	}
	private static class SetRemittanceOutcome {
		static void set(com.dtc.fhir.gwt.RemittanceOutcome instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.RemittanceOutcome instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.RemittanceOutcomeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.RemittanceOutcomeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.RemittanceOutcomeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of RemittanceOutcome");
			}
		}

		static Object get(com.dtc.fhir.gwt.RemittanceOutcome _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.RemittanceOutcomeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of RemittanceOutcome");
			}
		}
	}
	private static class SetResourceVersionPolicy {
		static void set(com.dtc.fhir.gwt.ResourceVersionPolicy instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ResourceVersionPolicy instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ResourceVersionPolicyList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ResourceVersionPolicyList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ResourceVersionPolicyList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ResourceVersionPolicy");
			}
		}

		static Object get(com.dtc.fhir.gwt.ResourceVersionPolicy _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ResourceVersionPolicyList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ResourceVersionPolicy");
			}
		}
	}
	private static class SetResponseType {
		static void set(com.dtc.fhir.gwt.ResponseType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ResponseType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.ResponseTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.ResponseTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ResponseTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ResponseType");
			}
		}

		static Object get(com.dtc.fhir.gwt.ResponseType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.ResponseTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ResponseType");
			}
		}
	}
	private static class SetRestfulConformanceMode {
		static void set(com.dtc.fhir.gwt.RestfulConformanceMode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.RestfulConformanceMode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.RestfulConformanceModeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.RestfulConformanceModeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.RestfulConformanceModeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of RestfulConformanceMode");
			}
		}

		static Object get(com.dtc.fhir.gwt.RestfulConformanceMode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.RestfulConformanceModeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of RestfulConformanceMode");
			}
		}
	}
	private static class SetRiskAssessment {
		static void set(com.dtc.fhir.gwt.RiskAssessment instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.RiskAssessment instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "method":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMethod((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "prediction":
				if (value instanceof com.dtc.fhir.gwt.RiskAssessmentPrediction || value == null) {
					List<com.dtc.fhir.gwt.RiskAssessmentPrediction> predictionList = instance.getPrediction();
					if (predictionList.size() < index + 1) {
						predictionList.add((com.dtc.fhir.gwt.RiskAssessmentPrediction)value);
					} else {
						predictionList.set(Math.min(predictionList.size() - 1, index), (com.dtc.fhir.gwt.RiskAssessmentPrediction)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "mitigation":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setMitigation((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "condition":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setCondition((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "performer":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPerformer((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "basis":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> basisList = instance.getBasis();
					if (basisList.size() < index + 1) {
						basisList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						basisList.set(Math.min(basisList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of RiskAssessment");
			}
		}

		static Object get(com.dtc.fhir.gwt.RiskAssessment _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "method":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMethod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMethod(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "prediction":
				List<com.dtc.fhir.gwt.RiskAssessmentPrediction> predictionList = _instance_.getPrediction();
				if (predictionList.size() < _index_ + 1) {
					predictionList.add(new com.dtc.fhir.gwt.RiskAssessmentPrediction());
				}
				return predictionList.get(Math.min(predictionList.size() - 1, _index_));
			case "mitigation":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getMitigation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setMitigation(_field_);
				}
				return _field_;}
			case "condition":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getCondition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setCondition(_field_);
				}
				return _field_;}
			case "performer":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPerformer();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPerformer(_field_);
				}
				return _field_;}
			case "basis":
				List<com.dtc.fhir.gwt.Reference> basisList = _instance_.getBasis();
				if (basisList.size() < _index_ + 1) {
					basisList.add(new com.dtc.fhir.gwt.Reference());
				}
				return basisList.get(Math.min(basisList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of RiskAssessment");
			}
		}
	}
	private static class SetRiskAssessmentPrediction {
		static void set(com.dtc.fhir.gwt.RiskAssessmentPrediction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.RiskAssessmentPrediction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "outcome":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setOutcome((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "probabilityCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setProbabilityCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "probabilityDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setProbabilityDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "probabilityRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setProbabilityRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "relativeRisk":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setRelativeRisk((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "whenPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setWhenPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "whenRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setWhenRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "rationale":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRationale((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of RiskAssessmentPrediction");
			}
		}

		static Object get(com.dtc.fhir.gwt.RiskAssessmentPrediction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "outcome":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getOutcome();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setOutcome(_field_);
				}
				return _field_;}
			case "probabilityCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getProbabilityCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setProbabilityCodeableConcept(_field_);
				}
				return _field_;}
			case "probabilityDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getProbabilityDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setProbabilityDecimal(_field_);
				}
				return _field_;}
			case "probabilityRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getProbabilityRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setProbabilityRange(_field_);
				}
				return _field_;}
			case "relativeRisk":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getRelativeRisk();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setRelativeRisk(_field_);
				}
				return _field_;}
			case "whenPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getWhenPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setWhenPeriod(_field_);
				}
				return _field_;}
			case "whenRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getWhenRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setWhenRange(_field_);
				}
				return _field_;}
			case "rationale":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRationale();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRationale(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of RiskAssessmentPrediction");
			}
		}
	}
	private static class SetSampledData {
		static void set(com.dtc.fhir.gwt.SampledData instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SampledData instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "data":
				if (value instanceof com.dtc.fhir.gwt.SampledDataDataType || value == null) {
					instance.setData((com.dtc.fhir.gwt.SampledDataDataType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SampledDataDataType");
				}
				break;
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "factor":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setFactor((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "origin":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setOrigin((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "lowerLimit":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setLowerLimit((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "upperLimit":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setUpperLimit((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "dimensions":
				if (value instanceof com.dtc.fhir.gwt.PositiveInt || value == null) {
					instance.setDimensions((com.dtc.fhir.gwt.PositiveInt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.PositiveInt");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SampledData");
			}
		}

		static Object get(com.dtc.fhir.gwt.SampledData _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "data":
				{com.dtc.fhir.gwt.SampledDataDataType _field_ = _instance_.getData();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SampledDataDataType();
					_instance_.setData(_field_);
				}
				return _field_;}
			case "period":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "factor":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getFactor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setFactor(_field_);
				}
				return _field_;}
			case "origin":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getOrigin();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setOrigin(_field_);
				}
				return _field_;}
			case "lowerLimit":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getLowerLimit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setLowerLimit(_field_);
				}
				return _field_;}
			case "upperLimit":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getUpperLimit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setUpperLimit(_field_);
				}
				return _field_;}
			case "dimensions":
				{com.dtc.fhir.gwt.PositiveInt _field_ = _instance_.getDimensions();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.PositiveInt();
					_instance_.setDimensions(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SampledData");
			}
		}
	}
	private static class SetSampledDataDataType {
		static void set(com.dtc.fhir.gwt.SampledDataDataType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SampledDataDataType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SampledDataDataType");
			}
		}

		static Object get(com.dtc.fhir.gwt.SampledDataDataType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SampledDataDataType");
			}
		}
	}
	private static class SetSchedule {
		static void set(com.dtc.fhir.gwt.Schedule instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Schedule instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "comment":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComment((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "actor":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setActor((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "planningHorizon":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setPlanningHorizon((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Schedule");
			}
		}

		static Object get(com.dtc.fhir.gwt.Schedule _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				List<com.dtc.fhir.gwt.CodeableConcept> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "comment":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComment(_field_);
				}
				return _field_;}
			case "actor":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getActor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setActor(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "planningHorizon":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getPlanningHorizon();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setPlanningHorizon(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Schedule");
			}
		}
	}
	private static class SetSearchEntryMode {
		static void set(com.dtc.fhir.gwt.SearchEntryMode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SearchEntryMode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SearchEntryModeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SearchEntryModeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SearchEntryModeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SearchEntryMode");
			}
		}

		static Object get(com.dtc.fhir.gwt.SearchEntryMode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SearchEntryModeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SearchEntryMode");
			}
		}
	}
	private static class SetSearchModifierCode {
		static void set(com.dtc.fhir.gwt.SearchModifierCode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SearchModifierCode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SearchModifierCodeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SearchModifierCodeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SearchModifierCodeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SearchModifierCode");
			}
		}

		static Object get(com.dtc.fhir.gwt.SearchModifierCode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SearchModifierCodeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SearchModifierCode");
			}
		}
	}
	private static class SetSearchParamType {
		static void set(com.dtc.fhir.gwt.SearchParamType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SearchParamType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SearchParamTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SearchParamTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SearchParamTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SearchParamType");
			}
		}

		static Object get(com.dtc.fhir.gwt.SearchParamType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SearchParamTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SearchParamType");
			}
		}
	}
	private static class SetSearchParameter {
		static void set(com.dtc.fhir.gwt.SearchParameter instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SearchParameter instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "target":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					List<com.dtc.fhir.gwt.Code> targetList = instance.getTarget();
					if (targetList.size() < index + 1) {
						targetList.add((com.dtc.fhir.gwt.Code)value);
					} else {
						targetList.set(Math.min(targetList.size() - 1, index), (com.dtc.fhir.gwt.Code)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.SearchParameterContact || value == null) {
					List<com.dtc.fhir.gwt.SearchParameterContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.SearchParameterContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.SearchParameterContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "experimental":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExperimental((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "requirements":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRequirements((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "xpathUsage":
				if (value instanceof com.dtc.fhir.gwt.XPathUsageType || value == null) {
					instance.setXpathUsage((com.dtc.fhir.gwt.XPathUsageType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.XPathUsageType");
				}
				break;
			case "base":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setBase((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "xpath":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setXpath((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SearchParameter");
			}
		}

		static Object get(com.dtc.fhir.gwt.SearchParameter _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "target":
				List<com.dtc.fhir.gwt.Code> targetList = _instance_.getTarget();
				if (targetList.size() < _index_ + 1) {
					targetList.add(new com.dtc.fhir.gwt.Code());
				}
				return targetList.get(Math.min(targetList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.SearchParameterContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.SearchParameterContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "experimental":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExperimental();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExperimental(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "requirements":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRequirements();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRequirements(_field_);
				}
				return _field_;}
			case "xpathUsage":
				{com.dtc.fhir.gwt.XPathUsageType _field_ = _instance_.getXpathUsage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.XPathUsageType();
					_instance_.setXpathUsage(_field_);
				}
				return _field_;}
			case "base":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getBase();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setBase(_field_);
				}
				return _field_;}
			case "xpath":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getXpath();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setXpath(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SearchParameter");
			}
		}
	}
	private static class SetSearchParameterContact {
		static void set(com.dtc.fhir.gwt.SearchParameterContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SearchParameterContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SearchParameterContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.SearchParameterContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SearchParameterContact");
			}
		}
	}
	private static class SetSignature {
		static void set(com.dtc.fhir.gwt.Signature instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Signature instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> typeList = instance.getType();
					if (typeList.size() < index + 1) {
						typeList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						typeList.set(Math.min(typeList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "contentType":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setContentType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "whoReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setWhoReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "blob":
				if (value instanceof com.dtc.fhir.gwt.Base64Binary || value == null) {
					instance.setBlob((com.dtc.fhir.gwt.Base64Binary)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Base64Binary");
				}
				break;
			case "whoUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setWhoUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "when":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setWhen((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Signature");
			}
		}

		static Object get(com.dtc.fhir.gwt.Signature _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				List<com.dtc.fhir.gwt.Coding> typeList = _instance_.getType();
				if (typeList.size() < _index_ + 1) {
					typeList.add(new com.dtc.fhir.gwt.Coding());
				}
				return typeList.get(Math.min(typeList.size() - 1, _index_));
			case "contentType":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getContentType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setContentType(_field_);
				}
				return _field_;}
			case "whoReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getWhoReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setWhoReference(_field_);
				}
				return _field_;}
			case "blob":
				{com.dtc.fhir.gwt.Base64Binary _field_ = _instance_.getBlob();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Base64Binary();
					_instance_.setBlob(_field_);
				}
				return _field_;}
			case "whoUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getWhoUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setWhoUri(_field_);
				}
				return _field_;}
			case "when":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getWhen();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setWhen(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Signature");
			}
		}
	}
	private static class SetSimpleQuantity {
		static void set(com.dtc.fhir.gwt.SimpleQuantity instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SimpleQuantity instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "comparator":
				if (value instanceof com.dtc.fhir.gwt.QuantityComparator || value == null) {
					instance.setComparator((com.dtc.fhir.gwt.QuantityComparator)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.QuantityComparator");
				}
				break;
			case "unit":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUnit((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SimpleQuantity");
			}
		}

		static Object get(com.dtc.fhir.gwt.SimpleQuantity _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "comparator":
				{com.dtc.fhir.gwt.QuantityComparator _field_ = _instance_.getComparator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.QuantityComparator();
					_instance_.setComparator(_field_);
				}
				return _field_;}
			case "unit":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUnit();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUnit(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SimpleQuantity");
			}
		}
	}
	private static class SetSlicingRules {
		static void set(com.dtc.fhir.gwt.SlicingRules instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SlicingRules instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SlicingRulesList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SlicingRulesList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SlicingRulesList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SlicingRules");
			}
		}

		static Object get(com.dtc.fhir.gwt.SlicingRules _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SlicingRulesList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SlicingRules");
			}
		}
	}
	private static class SetSlot {
		static void set(com.dtc.fhir.gwt.Slot instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Slot instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "comment":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComment((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "freeBusyType":
				if (value instanceof com.dtc.fhir.gwt.SlotStatus || value == null) {
					instance.setFreeBusyType((com.dtc.fhir.gwt.SlotStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SlotStatus");
				}
				break;
			case "overbooked":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setOverbooked((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "start":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setStart((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "end":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setEnd((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "schedule":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSchedule((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Slot");
			}
		}

		static Object get(com.dtc.fhir.gwt.Slot _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "comment":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComment();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComment(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "freeBusyType":
				{com.dtc.fhir.gwt.SlotStatus _field_ = _instance_.getFreeBusyType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SlotStatus();
					_instance_.setFreeBusyType(_field_);
				}
				return _field_;}
			case "overbooked":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getOverbooked();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setOverbooked(_field_);
				}
				return _field_;}
			case "start":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getStart();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setStart(_field_);
				}
				return _field_;}
			case "end":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getEnd();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setEnd(_field_);
				}
				return _field_;}
			case "schedule":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSchedule();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSchedule(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Slot");
			}
		}
	}
	private static class SetSlotStatus {
		static void set(com.dtc.fhir.gwt.SlotStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SlotStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SlotStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SlotStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SlotStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SlotStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.SlotStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SlotStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SlotStatus");
			}
		}
	}
	private static class SetSpecimen {
		static void set(com.dtc.fhir.gwt.Specimen instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Specimen instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "parent":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> parentList = instance.getParent();
					if (parentList.size() < index + 1) {
						parentList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						parentList.set(Math.min(parentList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "subject":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubject((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.SpecimenStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.SpecimenStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SpecimenStatus");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "accessionIdentifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setAccessionIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "receivedTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setReceivedTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "collection":
				if (value instanceof com.dtc.fhir.gwt.SpecimenCollection || value == null) {
					instance.setCollection((com.dtc.fhir.gwt.SpecimenCollection)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SpecimenCollection");
				}
				break;
			case "treatment":
				if (value instanceof com.dtc.fhir.gwt.SpecimenTreatment || value == null) {
					List<com.dtc.fhir.gwt.SpecimenTreatment> treatmentList = instance.getTreatment();
					if (treatmentList.size() < index + 1) {
						treatmentList.add((com.dtc.fhir.gwt.SpecimenTreatment)value);
					} else {
						treatmentList.set(Math.min(treatmentList.size() - 1, index), (com.dtc.fhir.gwt.SpecimenTreatment)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "container":
				if (value instanceof com.dtc.fhir.gwt.SpecimenContainer || value == null) {
					List<com.dtc.fhir.gwt.SpecimenContainer> containerList = instance.getContainer();
					if (containerList.size() < index + 1) {
						containerList.add((com.dtc.fhir.gwt.SpecimenContainer)value);
					} else {
						containerList.set(Math.min(containerList.size() - 1, index), (com.dtc.fhir.gwt.SpecimenContainer)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Specimen");
			}
		}

		static Object get(com.dtc.fhir.gwt.Specimen _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "parent":
				List<com.dtc.fhir.gwt.Reference> parentList = _instance_.getParent();
				if (parentList.size() < _index_ + 1) {
					parentList.add(new com.dtc.fhir.gwt.Reference());
				}
				return parentList.get(Math.min(parentList.size() - 1, _index_));
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "subject":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubject();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubject(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.SpecimenStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SpecimenStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "accessionIdentifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getAccessionIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setAccessionIdentifier(_field_);
				}
				return _field_;}
			case "receivedTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getReceivedTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setReceivedTime(_field_);
				}
				return _field_;}
			case "collection":
				{com.dtc.fhir.gwt.SpecimenCollection _field_ = _instance_.getCollection();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SpecimenCollection();
					_instance_.setCollection(_field_);
				}
				return _field_;}
			case "treatment":
				List<com.dtc.fhir.gwt.SpecimenTreatment> treatmentList = _instance_.getTreatment();
				if (treatmentList.size() < _index_ + 1) {
					treatmentList.add(new com.dtc.fhir.gwt.SpecimenTreatment());
				}
				return treatmentList.get(Math.min(treatmentList.size() - 1, _index_));
			case "container":
				List<com.dtc.fhir.gwt.SpecimenContainer> containerList = _instance_.getContainer();
				if (containerList.size() < _index_ + 1) {
					containerList.add(new com.dtc.fhir.gwt.SpecimenContainer());
				}
				return containerList.get(Math.min(containerList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Specimen");
			}
		}
	}
	private static class SetSpecimenCollection {
		static void set(com.dtc.fhir.gwt.SpecimenCollection instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SpecimenCollection instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "method":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setMethod((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "comment":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> commentList = instance.getComment();
					if (commentList.size() < index + 1) {
						commentList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						commentList.set(Math.min(commentList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "bodySite":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setBodySite((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "collector":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setCollector((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "collectedDateTime":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setCollectedDateTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "collectedPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setCollectedPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SpecimenCollection");
			}
		}

		static Object get(com.dtc.fhir.gwt.SpecimenCollection _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "method":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getMethod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setMethod(_field_);
				}
				return _field_;}
			case "comment":
				List<com.dtc.fhir.gwt.StringDt> commentList = _instance_.getComment();
				if (commentList.size() < _index_ + 1) {
					commentList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return commentList.get(Math.min(commentList.size() - 1, _index_));
			case "bodySite":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getBodySite();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setBodySite(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "collector":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getCollector();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setCollector(_field_);
				}
				return _field_;}
			case "collectedDateTime":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getCollectedDateTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setCollectedDateTime(_field_);
				}
				return _field_;}
			case "collectedPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getCollectedPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setCollectedPeriod(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SpecimenCollection");
			}
		}
	}
	private static class SetSpecimenContainer {
		static void set(com.dtc.fhir.gwt.SpecimenContainer instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SpecimenContainer instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "capacity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setCapacity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "specimenQuantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setSpecimenQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "additiveCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setAdditiveCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "additiveReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setAdditiveReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SpecimenContainer");
			}
		}

		static Object get(com.dtc.fhir.gwt.SpecimenContainer _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "capacity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getCapacity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setCapacity(_field_);
				}
				return _field_;}
			case "specimenQuantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getSpecimenQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setSpecimenQuantity(_field_);
				}
				return _field_;}
			case "additiveCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getAdditiveCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setAdditiveCodeableConcept(_field_);
				}
				return _field_;}
			case "additiveReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getAdditiveReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setAdditiveReference(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SpecimenContainer");
			}
		}
	}
	private static class SetSpecimenStatus {
		static void set(com.dtc.fhir.gwt.SpecimenStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SpecimenStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SpecimenStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SpecimenStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SpecimenStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SpecimenStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.SpecimenStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SpecimenStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SpecimenStatus");
			}
		}
	}
	private static class SetSpecimenTreatment {
		static void set(com.dtc.fhir.gwt.SpecimenTreatment instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SpecimenTreatment instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "additive":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> additiveList = instance.getAdditive();
					if (additiveList.size() < index + 1) {
						additiveList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						additiveList.set(Math.min(additiveList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "procedure":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setProcedure((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SpecimenTreatment");
			}
		}

		static Object get(com.dtc.fhir.gwt.SpecimenTreatment _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "additive":
				List<com.dtc.fhir.gwt.Reference> additiveList = _instance_.getAdditive();
				if (additiveList.size() < _index_ + 1) {
					additiveList.add(new com.dtc.fhir.gwt.Reference());
				}
				return additiveList.get(Math.min(additiveList.size() - 1, _index_));
			case "procedure":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getProcedure();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setProcedure(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SpecimenTreatment");
			}
		}
	}
	private static class SetStringDt {
		static void set(com.dtc.fhir.gwt.StringDt instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.StringDt instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of StringDt");
			}
		}

		static Object get(com.dtc.fhir.gwt.StringDt _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of StringDt");
			}
		}
	}
	private static class SetStructureDefinition {
		static void set(com.dtc.fhir.gwt.StructureDefinition instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.StructureDefinition instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "context":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					List<com.dtc.fhir.gwt.StringDt> contextList = instance.getContext();
					if (contextList.size() < index + 1) {
						contextList.add((com.dtc.fhir.gwt.StringDt)value);
					} else {
						contextList.set(Math.min(contextList.size() - 1, index), (com.dtc.fhir.gwt.StringDt)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.StructureDefinitionContact || value == null) {
					List<com.dtc.fhir.gwt.StructureDefinitionContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.StructureDefinitionContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.StructureDefinitionContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "copyright":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCopyright((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> codeList = instance.getCode();
					if (codeList.size() < index + 1) {
						codeList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						codeList.set(Math.min(codeList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "experimental":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExperimental((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "useContext":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> useContextList = instance.getUseContext();
					if (useContextList.size() < index + 1) {
						useContextList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						useContextList.set(Math.min(useContextList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "requirements":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRequirements((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "fhirVersion":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setFhirVersion((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "constrainedType":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setConstrainedType((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "contextType":
				if (value instanceof com.dtc.fhir.gwt.ExtensionContext || value == null) {
					instance.setContextType((com.dtc.fhir.gwt.ExtensionContext)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ExtensionContext");
				}
				break;
			case "differential":
				if (value instanceof com.dtc.fhir.gwt.StructureDefinitionDifferential || value == null) {
					instance.setDifferential((com.dtc.fhir.gwt.StructureDefinitionDifferential)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StructureDefinitionDifferential");
				}
				break;
			case "mapping":
				if (value instanceof com.dtc.fhir.gwt.StructureDefinitionMapping || value == null) {
					List<com.dtc.fhir.gwt.StructureDefinitionMapping> mappingList = instance.getMapping();
					if (mappingList.size() < index + 1) {
						mappingList.add((com.dtc.fhir.gwt.StructureDefinitionMapping)value);
					} else {
						mappingList.set(Math.min(mappingList.size() - 1, index), (com.dtc.fhir.gwt.StructureDefinitionMapping)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "kind":
				if (value instanceof com.dtc.fhir.gwt.StructureDefinitionKind || value == null) {
					instance.setKind((com.dtc.fhir.gwt.StructureDefinitionKind)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StructureDefinitionKind");
				}
				break;
			case "base":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setBase((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "display":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisplay((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "abstract":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAbstract((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "snapshot":
				if (value instanceof com.dtc.fhir.gwt.StructureDefinitionSnapshot || value == null) {
					instance.setSnapshot((com.dtc.fhir.gwt.StructureDefinitionSnapshot)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StructureDefinitionSnapshot");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of StructureDefinition");
			}
		}

		static Object get(com.dtc.fhir.gwt.StructureDefinition _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "context":
				List<com.dtc.fhir.gwt.StringDt> contextList = _instance_.getContext();
				if (contextList.size() < _index_ + 1) {
					contextList.add(new com.dtc.fhir.gwt.StringDt());
				}
				return contextList.get(Math.min(contextList.size() - 1, _index_));
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.StructureDefinitionContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.StructureDefinitionContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "copyright":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCopyright();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCopyright(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				List<com.dtc.fhir.gwt.Coding> codeList = _instance_.getCode();
				if (codeList.size() < _index_ + 1) {
					codeList.add(new com.dtc.fhir.gwt.Coding());
				}
				return codeList.get(Math.min(codeList.size() - 1, _index_));
			case "experimental":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExperimental();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExperimental(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "useContext":
				List<com.dtc.fhir.gwt.CodeableConcept> useContextList = _instance_.getUseContext();
				if (useContextList.size() < _index_ + 1) {
					useContextList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return useContextList.get(Math.min(useContextList.size() - 1, _index_));
			case "requirements":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRequirements();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRequirements(_field_);
				}
				return _field_;}
			case "fhirVersion":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getFhirVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setFhirVersion(_field_);
				}
				return _field_;}
			case "constrainedType":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getConstrainedType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setConstrainedType(_field_);
				}
				return _field_;}
			case "contextType":
				{com.dtc.fhir.gwt.ExtensionContext _field_ = _instance_.getContextType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ExtensionContext();
					_instance_.setContextType(_field_);
				}
				return _field_;}
			case "differential":
				{com.dtc.fhir.gwt.StructureDefinitionDifferential _field_ = _instance_.getDifferential();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StructureDefinitionDifferential();
					_instance_.setDifferential(_field_);
				}
				return _field_;}
			case "mapping":
				List<com.dtc.fhir.gwt.StructureDefinitionMapping> mappingList = _instance_.getMapping();
				if (mappingList.size() < _index_ + 1) {
					mappingList.add(new com.dtc.fhir.gwt.StructureDefinitionMapping());
				}
				return mappingList.get(Math.min(mappingList.size() - 1, _index_));
			case "kind":
				{com.dtc.fhir.gwt.StructureDefinitionKind _field_ = _instance_.getKind();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StructureDefinitionKind();
					_instance_.setKind(_field_);
				}
				return _field_;}
			case "base":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getBase();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setBase(_field_);
				}
				return _field_;}
			case "display":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisplay();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisplay(_field_);
				}
				return _field_;}
			case "abstract":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAbstract();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAbstract(_field_);
				}
				return _field_;}
			case "snapshot":
				{com.dtc.fhir.gwt.StructureDefinitionSnapshot _field_ = _instance_.getSnapshot();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StructureDefinitionSnapshot();
					_instance_.setSnapshot(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of StructureDefinition");
			}
		}
	}
	private static class SetStructureDefinitionContact {
		static void set(com.dtc.fhir.gwt.StructureDefinitionContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.StructureDefinitionContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of StructureDefinitionContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.StructureDefinitionContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of StructureDefinitionContact");
			}
		}
	}
	private static class SetStructureDefinitionDifferential {
		static void set(com.dtc.fhir.gwt.StructureDefinitionDifferential instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.StructureDefinitionDifferential instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "element":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinition || value == null) {
					List<com.dtc.fhir.gwt.ElementDefinition> elementList = instance.getElement();
					if (elementList.size() < index + 1) {
						elementList.add((com.dtc.fhir.gwt.ElementDefinition)value);
					} else {
						elementList.set(Math.min(elementList.size() - 1, index), (com.dtc.fhir.gwt.ElementDefinition)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of StructureDefinitionDifferential");
			}
		}

		static Object get(com.dtc.fhir.gwt.StructureDefinitionDifferential _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "element":
				List<com.dtc.fhir.gwt.ElementDefinition> elementList = _instance_.getElement();
				if (elementList.size() < _index_ + 1) {
					elementList.add(new com.dtc.fhir.gwt.ElementDefinition());
				}
				return elementList.get(Math.min(elementList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of StructureDefinitionDifferential");
			}
		}
	}
	private static class SetStructureDefinitionKind {
		static void set(com.dtc.fhir.gwt.StructureDefinitionKind instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.StructureDefinitionKind instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.StructureDefinitionKindList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.StructureDefinitionKindList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StructureDefinitionKindList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of StructureDefinitionKind");
			}
		}

		static Object get(com.dtc.fhir.gwt.StructureDefinitionKind _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.StructureDefinitionKindList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of StructureDefinitionKind");
			}
		}
	}
	private static class SetStructureDefinitionMapping {
		static void set(com.dtc.fhir.gwt.StructureDefinitionMapping instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.StructureDefinitionMapping instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "uri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "comments":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setComments((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identity":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setIdentity((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of StructureDefinitionMapping");
			}
		}

		static Object get(com.dtc.fhir.gwt.StructureDefinitionMapping _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "uri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUri(_field_);
				}
				return _field_;}
			case "comments":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getComments();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setComments(_field_);
				}
				return _field_;}
			case "identity":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getIdentity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setIdentity(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of StructureDefinitionMapping");
			}
		}
	}
	private static class SetStructureDefinitionSnapshot {
		static void set(com.dtc.fhir.gwt.StructureDefinitionSnapshot instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.StructureDefinitionSnapshot instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "element":
				if (value instanceof com.dtc.fhir.gwt.ElementDefinition || value == null) {
					List<com.dtc.fhir.gwt.ElementDefinition> elementList = instance.getElement();
					if (elementList.size() < index + 1) {
						elementList.add((com.dtc.fhir.gwt.ElementDefinition)value);
					} else {
						elementList.set(Math.min(elementList.size() - 1, index), (com.dtc.fhir.gwt.ElementDefinition)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of StructureDefinitionSnapshot");
			}
		}

		static Object get(com.dtc.fhir.gwt.StructureDefinitionSnapshot _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "element":
				List<com.dtc.fhir.gwt.ElementDefinition> elementList = _instance_.getElement();
				if (elementList.size() < _index_ + 1) {
					elementList.add(new com.dtc.fhir.gwt.ElementDefinition());
				}
				return elementList.get(Math.min(elementList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of StructureDefinitionSnapshot");
			}
		}
	}
	private static class SetSubscription {
		static void set(com.dtc.fhir.gwt.Subscription instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Subscription instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "channel":
				if (value instanceof com.dtc.fhir.gwt.SubscriptionChannel || value == null) {
					instance.setChannel((com.dtc.fhir.gwt.SubscriptionChannel)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SubscriptionChannel");
				}
				break;
			case "reason":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setReason((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.SubscriptionStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.SubscriptionStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SubscriptionStatus");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "tag":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					List<com.dtc.fhir.gwt.Coding> tagList = instance.getTag();
					if (tagList.size() < index + 1) {
						tagList.add((com.dtc.fhir.gwt.Coding)value);
					} else {
						tagList.set(Math.min(tagList.size() - 1, index), (com.dtc.fhir.gwt.Coding)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "end":
				if (value instanceof com.dtc.fhir.gwt.Instant || value == null) {
					instance.setEnd((com.dtc.fhir.gwt.Instant)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Instant");
				}
				break;
			case "error":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setError((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "criteria":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCriteria((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Subscription");
			}
		}

		static Object get(com.dtc.fhir.gwt.Subscription _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "channel":
				{com.dtc.fhir.gwt.SubscriptionChannel _field_ = _instance_.getChannel();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SubscriptionChannel();
					_instance_.setChannel(_field_);
				}
				return _field_;}
			case "reason":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getReason();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setReason(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.SubscriptionStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SubscriptionStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.ContactPoint> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "tag":
				List<com.dtc.fhir.gwt.Coding> tagList = _instance_.getTag();
				if (tagList.size() < _index_ + 1) {
					tagList.add(new com.dtc.fhir.gwt.Coding());
				}
				return tagList.get(Math.min(tagList.size() - 1, _index_));
			case "end":
				{com.dtc.fhir.gwt.Instant _field_ = _instance_.getEnd();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Instant();
					_instance_.setEnd(_field_);
				}
				return _field_;}
			case "error":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getError();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setError(_field_);
				}
				return _field_;}
			case "criteria":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCriteria();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCriteria(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Subscription");
			}
		}
	}
	private static class SetSubscriptionChannel {
		static void set(com.dtc.fhir.gwt.SubscriptionChannel instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SubscriptionChannel instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.SubscriptionChannelType || value == null) {
					instance.setType((com.dtc.fhir.gwt.SubscriptionChannelType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SubscriptionChannelType");
				}
				break;
			case "endpoint":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setEndpoint((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "payload":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPayload((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "header":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setHeader((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SubscriptionChannel");
			}
		}

		static Object get(com.dtc.fhir.gwt.SubscriptionChannel _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.SubscriptionChannelType _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SubscriptionChannelType();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "endpoint":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getEndpoint();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setEndpoint(_field_);
				}
				return _field_;}
			case "payload":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPayload();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPayload(_field_);
				}
				return _field_;}
			case "header":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getHeader();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setHeader(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SubscriptionChannel");
			}
		}
	}
	private static class SetSubscriptionChannelType {
		static void set(com.dtc.fhir.gwt.SubscriptionChannelType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SubscriptionChannelType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SubscriptionChannelTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SubscriptionChannelTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SubscriptionChannelTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SubscriptionChannelType");
			}
		}

		static Object get(com.dtc.fhir.gwt.SubscriptionChannelType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SubscriptionChannelTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SubscriptionChannelType");
			}
		}
	}
	private static class SetSubscriptionStatus {
		static void set(com.dtc.fhir.gwt.SubscriptionStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SubscriptionStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SubscriptionStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SubscriptionStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SubscriptionStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SubscriptionStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.SubscriptionStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SubscriptionStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SubscriptionStatus");
			}
		}
	}
	private static class SetSubstance {
		static void set(com.dtc.fhir.gwt.Substance instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Substance instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "instance":
				if (value instanceof com.dtc.fhir.gwt.SubstanceInstance || value == null) {
					List<com.dtc.fhir.gwt.SubstanceInstance> instanceList = instance.getInstance();
					if (instanceList.size() < index + 1) {
						instanceList.add((com.dtc.fhir.gwt.SubstanceInstance)value);
					} else {
						instanceList.set(Math.min(instanceList.size() - 1, index), (com.dtc.fhir.gwt.SubstanceInstance)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "category":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> categoryList = instance.getCategory();
					if (categoryList.size() < index + 1) {
						categoryList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						categoryList.set(Math.min(categoryList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "ingredient":
				if (value instanceof com.dtc.fhir.gwt.SubstanceIngredient || value == null) {
					List<com.dtc.fhir.gwt.SubstanceIngredient> ingredientList = instance.getIngredient();
					if (ingredientList.size() < index + 1) {
						ingredientList.add((com.dtc.fhir.gwt.SubstanceIngredient)value);
					} else {
						ingredientList.set(Math.min(ingredientList.size() - 1, index), (com.dtc.fhir.gwt.SubstanceIngredient)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Substance");
			}
		}

		static Object get(com.dtc.fhir.gwt.Substance _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "instance":
				List<com.dtc.fhir.gwt.SubstanceInstance> instanceList = _instance_.getInstance();
				if (instanceList.size() < _index_ + 1) {
					instanceList.add(new com.dtc.fhir.gwt.SubstanceInstance());
				}
				return instanceList.get(Math.min(instanceList.size() - 1, _index_));
			case "category":
				List<com.dtc.fhir.gwt.CodeableConcept> categoryList = _instance_.getCategory();
				if (categoryList.size() < _index_ + 1) {
					categoryList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return categoryList.get(Math.min(categoryList.size() - 1, _index_));
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "ingredient":
				List<com.dtc.fhir.gwt.SubstanceIngredient> ingredientList = _instance_.getIngredient();
				if (ingredientList.size() < _index_ + 1) {
					ingredientList.add(new com.dtc.fhir.gwt.SubstanceIngredient());
				}
				return ingredientList.get(Math.min(ingredientList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Substance");
			}
		}
	}
	private static class SetSubstanceIngredient {
		static void set(com.dtc.fhir.gwt.SubstanceIngredient instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SubstanceIngredient instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.Ratio || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.Ratio)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Ratio");
				}
				break;
			case "substance":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSubstance((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SubstanceIngredient");
			}
		}

		static Object get(com.dtc.fhir.gwt.SubstanceIngredient _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "quantity":
				{com.dtc.fhir.gwt.Ratio _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Ratio();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "substance":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSubstance();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSubstance(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SubstanceIngredient");
			}
		}
	}
	private static class SetSubstanceInstance {
		static void set(com.dtc.fhir.gwt.SubstanceInstance instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SubstanceInstance instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "expiry":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setExpiry((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SubstanceInstance");
			}
		}

		static Object get(com.dtc.fhir.gwt.SubstanceInstance _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "expiry":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getExpiry();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setExpiry(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SubstanceInstance");
			}
		}
	}
	private static class SetSupplyDelivery {
		static void set(com.dtc.fhir.gwt.SupplyDelivery instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SupplyDelivery instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "type":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setType((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "time":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setTime((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.SupplyDeliveryStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.SupplyDeliveryStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SupplyDeliveryStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "destination":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setDestination((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "suppliedItem":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSuppliedItem((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "whenPrepared":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setWhenPrepared((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "receiver":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> receiverList = instance.getReceiver();
					if (receiverList.size() < index + 1) {
						receiverList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						receiverList.set(Math.min(receiverList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "quantity":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setQuantity((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "supplier":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSupplier((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SupplyDelivery");
			}
		}

		static Object get(com.dtc.fhir.gwt.SupplyDelivery _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "type":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "time":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getTime();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setTime(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.SupplyDeliveryStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SupplyDeliveryStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "destination":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getDestination();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setDestination(_field_);
				}
				return _field_;}
			case "suppliedItem":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSuppliedItem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSuppliedItem(_field_);
				}
				return _field_;}
			case "whenPrepared":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getWhenPrepared();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setWhenPrepared(_field_);
				}
				return _field_;}
			case "receiver":
				List<com.dtc.fhir.gwt.Reference> receiverList = _instance_.getReceiver();
				if (receiverList.size() < _index_ + 1) {
					receiverList.add(new com.dtc.fhir.gwt.Reference());
				}
				return receiverList.get(Math.min(receiverList.size() - 1, _index_));
			case "quantity":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setQuantity(_field_);
				}
				return _field_;}
			case "supplier":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSupplier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSupplier(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SupplyDelivery");
			}
		}
	}
	private static class SetSupplyDeliveryStatus {
		static void set(com.dtc.fhir.gwt.SupplyDeliveryStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SupplyDeliveryStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SupplyDeliveryStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SupplyDeliveryStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SupplyDeliveryStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SupplyDeliveryStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.SupplyDeliveryStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SupplyDeliveryStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SupplyDeliveryStatus");
			}
		}
	}
	private static class SetSupplyRequest {
		static void set(com.dtc.fhir.gwt.SupplyRequest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SupplyRequest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.SupplyRequestStatus || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.SupplyRequestStatus)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SupplyRequestStatus");
				}
				break;
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "source":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setSource((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "reasonCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReasonCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reasonReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReasonReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "orderedItem":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setOrderedItem((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "supplier":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> supplierList = instance.getSupplier();
					if (supplierList.size() < index + 1) {
						supplierList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						supplierList.set(Math.min(supplierList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "when":
				if (value instanceof com.dtc.fhir.gwt.SupplyRequestWhen || value == null) {
					instance.setWhen((com.dtc.fhir.gwt.SupplyRequestWhen)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SupplyRequestWhen");
				}
				break;
			case "kind":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setKind((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SupplyRequest");
			}
		}

		static Object get(com.dtc.fhir.gwt.SupplyRequest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.SupplyRequestStatus _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SupplyRequestStatus();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "source":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getSource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setSource(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "reasonCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReasonCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReasonCodeableConcept(_field_);
				}
				return _field_;}
			case "reasonReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReasonReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReasonReference(_field_);
				}
				return _field_;}
			case "orderedItem":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getOrderedItem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setOrderedItem(_field_);
				}
				return _field_;}
			case "supplier":
				List<com.dtc.fhir.gwt.Reference> supplierList = _instance_.getSupplier();
				if (supplierList.size() < _index_ + 1) {
					supplierList.add(new com.dtc.fhir.gwt.Reference());
				}
				return supplierList.get(Math.min(supplierList.size() - 1, _index_));
			case "when":
				{com.dtc.fhir.gwt.SupplyRequestWhen _field_ = _instance_.getWhen();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SupplyRequestWhen();
					_instance_.setWhen(_field_);
				}
				return _field_;}
			case "kind":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getKind();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setKind(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SupplyRequest");
			}
		}
	}
	private static class SetSupplyRequestStatus {
		static void set(com.dtc.fhir.gwt.SupplyRequestStatus instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SupplyRequestStatus instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SupplyRequestStatusList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SupplyRequestStatusList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SupplyRequestStatusList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SupplyRequestStatus");
			}
		}

		static Object get(com.dtc.fhir.gwt.SupplyRequestStatus _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SupplyRequestStatusList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SupplyRequestStatus");
			}
		}
	}
	private static class SetSupplyRequestWhen {
		static void set(com.dtc.fhir.gwt.SupplyRequestWhen instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SupplyRequestWhen instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "schedule":
				if (value instanceof com.dtc.fhir.gwt.Timing || value == null) {
					instance.setSchedule((com.dtc.fhir.gwt.Timing)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Timing");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SupplyRequestWhen");
			}
		}

		static Object get(com.dtc.fhir.gwt.SupplyRequestWhen _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "schedule":
				{com.dtc.fhir.gwt.Timing _field_ = _instance_.getSchedule();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Timing();
					_instance_.setSchedule(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SupplyRequestWhen");
			}
		}
	}
	private static class SetSystemRestfulInteraction {
		static void set(com.dtc.fhir.gwt.SystemRestfulInteraction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.SystemRestfulInteraction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.SystemRestfulInteractionList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.SystemRestfulInteractionList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SystemRestfulInteractionList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of SystemRestfulInteraction");
			}
		}

		static Object get(com.dtc.fhir.gwt.SystemRestfulInteraction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.SystemRestfulInteractionList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of SystemRestfulInteraction");
			}
		}
	}
	private static class SetTestScript {
		static void set(com.dtc.fhir.gwt.TestScript instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScript instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.TestScriptContact || value == null) {
					List<com.dtc.fhir.gwt.TestScriptContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.TestScriptContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "copyright":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCopyright((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "multiserver":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setMultiserver((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "experimental":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExperimental((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "useContext":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> useContextList = instance.getUseContext();
					if (useContextList.size() < index + 1) {
						useContextList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						useContextList.set(Math.min(useContextList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "requirements":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRequirements((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "metadata":
				if (value instanceof com.dtc.fhir.gwt.TestScriptMetadata || value == null) {
					instance.setMetadata((com.dtc.fhir.gwt.TestScriptMetadata)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptMetadata");
				}
				break;
			case "fixture":
				if (value instanceof com.dtc.fhir.gwt.TestScriptFixture || value == null) {
					List<com.dtc.fhir.gwt.TestScriptFixture> fixtureList = instance.getFixture();
					if (fixtureList.size() < index + 1) {
						fixtureList.add((com.dtc.fhir.gwt.TestScriptFixture)value);
					} else {
						fixtureList.set(Math.min(fixtureList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptFixture)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "variable":
				if (value instanceof com.dtc.fhir.gwt.TestScriptVariable || value == null) {
					List<com.dtc.fhir.gwt.TestScriptVariable> variableList = instance.getVariable();
					if (variableList.size() < index + 1) {
						variableList.add((com.dtc.fhir.gwt.TestScriptVariable)value);
					} else {
						variableList.set(Math.min(variableList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptVariable)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "setup":
				if (value instanceof com.dtc.fhir.gwt.TestScriptSetup || value == null) {
					instance.setSetup((com.dtc.fhir.gwt.TestScriptSetup)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptSetup");
				}
				break;
			case "test":
				if (value instanceof com.dtc.fhir.gwt.TestScriptTest || value == null) {
					List<com.dtc.fhir.gwt.TestScriptTest> testList = instance.getTest();
					if (testList.size() < index + 1) {
						testList.add((com.dtc.fhir.gwt.TestScriptTest)value);
					} else {
						testList.set(Math.min(testList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptTest)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "teardown":
				if (value instanceof com.dtc.fhir.gwt.TestScriptTeardown || value == null) {
					instance.setTeardown((com.dtc.fhir.gwt.TestScriptTeardown)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptTeardown");
				}
				break;
			case "profile":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					List<com.dtc.fhir.gwt.Reference> profileList = instance.getProfile();
					if (profileList.size() < index + 1) {
						profileList.add((com.dtc.fhir.gwt.Reference)value);
					} else {
						profileList.set(Math.min(profileList.size() - 1, index), (com.dtc.fhir.gwt.Reference)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScript");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScript _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.TestScriptContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.TestScriptContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "copyright":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCopyright();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCopyright(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "multiserver":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getMultiserver();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setMultiserver(_field_);
				}
				return _field_;}
			case "experimental":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExperimental();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExperimental(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "useContext":
				List<com.dtc.fhir.gwt.CodeableConcept> useContextList = _instance_.getUseContext();
				if (useContextList.size() < _index_ + 1) {
					useContextList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return useContextList.get(Math.min(useContextList.size() - 1, _index_));
			case "requirements":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRequirements();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRequirements(_field_);
				}
				return _field_;}
			case "metadata":
				{com.dtc.fhir.gwt.TestScriptMetadata _field_ = _instance_.getMetadata();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptMetadata();
					_instance_.setMetadata(_field_);
				}
				return _field_;}
			case "fixture":
				List<com.dtc.fhir.gwt.TestScriptFixture> fixtureList = _instance_.getFixture();
				if (fixtureList.size() < _index_ + 1) {
					fixtureList.add(new com.dtc.fhir.gwt.TestScriptFixture());
				}
				return fixtureList.get(Math.min(fixtureList.size() - 1, _index_));
			case "variable":
				List<com.dtc.fhir.gwt.TestScriptVariable> variableList = _instance_.getVariable();
				if (variableList.size() < _index_ + 1) {
					variableList.add(new com.dtc.fhir.gwt.TestScriptVariable());
				}
				return variableList.get(Math.min(variableList.size() - 1, _index_));
			case "setup":
				{com.dtc.fhir.gwt.TestScriptSetup _field_ = _instance_.getSetup();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptSetup();
					_instance_.setSetup(_field_);
				}
				return _field_;}
			case "test":
				List<com.dtc.fhir.gwt.TestScriptTest> testList = _instance_.getTest();
				if (testList.size() < _index_ + 1) {
					testList.add(new com.dtc.fhir.gwt.TestScriptTest());
				}
				return testList.get(Math.min(testList.size() - 1, _index_));
			case "teardown":
				{com.dtc.fhir.gwt.TestScriptTeardown _field_ = _instance_.getTeardown();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptTeardown();
					_instance_.setTeardown(_field_);
				}
				return _field_;}
			case "profile":
				List<com.dtc.fhir.gwt.Reference> profileList = _instance_.getProfile();
				if (profileList.size() < _index_ + 1) {
					profileList.add(new com.dtc.fhir.gwt.Reference());
				}
				return profileList.get(Math.min(profileList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScript");
			}
		}
	}
	private static class SetTestScriptAction {
		static void set(com.dtc.fhir.gwt.TestScriptAction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptAction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "operation":
				if (value instanceof com.dtc.fhir.gwt.TestScriptOperation || value == null) {
					instance.setOperation((com.dtc.fhir.gwt.TestScriptOperation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptOperation");
				}
				break;
			case "assert":
				if (value instanceof com.dtc.fhir.gwt.TestScriptAssert || value == null) {
					instance.setAssert((com.dtc.fhir.gwt.TestScriptAssert)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptAssert");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptAction");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptAction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "operation":
				{com.dtc.fhir.gwt.TestScriptOperation _field_ = _instance_.getOperation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptOperation();
					_instance_.setOperation(_field_);
				}
				return _field_;}
			case "assert":
				{com.dtc.fhir.gwt.TestScriptAssert _field_ = _instance_.getAssert();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptAssert();
					_instance_.setAssert(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptAction");
			}
		}
	}
	private static class SetTestScriptAction1 {
		static void set(com.dtc.fhir.gwt.TestScriptAction1 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptAction1 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "operation":
				if (value instanceof com.dtc.fhir.gwt.TestScriptOperation || value == null) {
					instance.setOperation((com.dtc.fhir.gwt.TestScriptOperation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptOperation");
				}
				break;
			case "assert":
				if (value instanceof com.dtc.fhir.gwt.TestScriptAssert || value == null) {
					instance.setAssert((com.dtc.fhir.gwt.TestScriptAssert)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptAssert");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptAction1");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptAction1 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "operation":
				{com.dtc.fhir.gwt.TestScriptOperation _field_ = _instance_.getOperation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptOperation();
					_instance_.setOperation(_field_);
				}
				return _field_;}
			case "assert":
				{com.dtc.fhir.gwt.TestScriptAssert _field_ = _instance_.getAssert();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptAssert();
					_instance_.setAssert(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptAction1");
			}
		}
	}
	private static class SetTestScriptAction2 {
		static void set(com.dtc.fhir.gwt.TestScriptAction2 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptAction2 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "operation":
				if (value instanceof com.dtc.fhir.gwt.TestScriptOperation || value == null) {
					instance.setOperation((com.dtc.fhir.gwt.TestScriptOperation)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptOperation");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptAction2");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptAction2 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "operation":
				{com.dtc.fhir.gwt.TestScriptOperation _field_ = _instance_.getOperation();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptOperation();
					_instance_.setOperation(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptAction2");
			}
		}
	}
	private static class SetTestScriptAssert {
		static void set(com.dtc.fhir.gwt.TestScriptAssert instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptAssert instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "resource":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setResource((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "value":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValue((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "path":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPath((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "responseCode":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setResponseCode((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "headerField":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setHeaderField((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contentType":
				if (value instanceof com.dtc.fhir.gwt.ContentType || value == null) {
					instance.setContentType((com.dtc.fhir.gwt.ContentType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContentType");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "operator":
				if (value instanceof com.dtc.fhir.gwt.AssertionOperatorType || value == null) {
					instance.setOperator((com.dtc.fhir.gwt.AssertionOperatorType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AssertionOperatorType");
				}
				break;
			case "label":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLabel((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "sourceId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setSourceId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "direction":
				if (value instanceof com.dtc.fhir.gwt.AssertionDirectionType || value == null) {
					instance.setDirection((com.dtc.fhir.gwt.AssertionDirectionType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AssertionDirectionType");
				}
				break;
			case "minimumId":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setMinimumId((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "compareToSourceId":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCompareToSourceId((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "compareToSourcePath":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCompareToSourcePath((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "navigationLinks":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setNavigationLinks((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "validateProfileId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setValidateProfileId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "warningOnly":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setWarningOnly((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "response":
				if (value instanceof com.dtc.fhir.gwt.AssertionResponseTypes || value == null) {
					instance.setResponse((com.dtc.fhir.gwt.AssertionResponseTypes)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.AssertionResponseTypes");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptAssert");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptAssert _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "resource":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getResource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setResource(_field_);
				}
				return _field_;}
			case "value":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "path":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPath();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPath(_field_);
				}
				return _field_;}
			case "responseCode":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getResponseCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setResponseCode(_field_);
				}
				return _field_;}
			case "headerField":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getHeaderField();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setHeaderField(_field_);
				}
				return _field_;}
			case "contentType":
				{com.dtc.fhir.gwt.ContentType _field_ = _instance_.getContentType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContentType();
					_instance_.setContentType(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "operator":
				{com.dtc.fhir.gwt.AssertionOperatorType _field_ = _instance_.getOperator();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AssertionOperatorType();
					_instance_.setOperator(_field_);
				}
				return _field_;}
			case "label":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLabel();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLabel(_field_);
				}
				return _field_;}
			case "sourceId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getSourceId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setSourceId(_field_);
				}
				return _field_;}
			case "direction":
				{com.dtc.fhir.gwt.AssertionDirectionType _field_ = _instance_.getDirection();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AssertionDirectionType();
					_instance_.setDirection(_field_);
				}
				return _field_;}
			case "minimumId":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getMinimumId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setMinimumId(_field_);
				}
				return _field_;}
			case "compareToSourceId":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCompareToSourceId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCompareToSourceId(_field_);
				}
				return _field_;}
			case "compareToSourcePath":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCompareToSourcePath();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCompareToSourcePath(_field_);
				}
				return _field_;}
			case "navigationLinks":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getNavigationLinks();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setNavigationLinks(_field_);
				}
				return _field_;}
			case "validateProfileId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getValidateProfileId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setValidateProfileId(_field_);
				}
				return _field_;}
			case "warningOnly":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getWarningOnly();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setWarningOnly(_field_);
				}
				return _field_;}
			case "response":
				{com.dtc.fhir.gwt.AssertionResponseTypes _field_ = _instance_.getResponse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.AssertionResponseTypes();
					_instance_.setResponse(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptAssert");
			}
		}
	}
	private static class SetTestScriptCapability {
		static void set(com.dtc.fhir.gwt.TestScriptCapability instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptCapability instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "destination":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setDestination((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "required":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setRequired((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "conformance":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setConformance((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "link":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					List<com.dtc.fhir.gwt.Uri> linkList = instance.getLink();
					if (linkList.size() < index + 1) {
						linkList.add((com.dtc.fhir.gwt.Uri)value);
					} else {
						linkList.set(Math.min(linkList.size() - 1, index), (com.dtc.fhir.gwt.Uri)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "validated":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setValidated((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptCapability");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptCapability _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "destination":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getDestination();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setDestination(_field_);
				}
				return _field_;}
			case "required":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getRequired();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setRequired(_field_);
				}
				return _field_;}
			case "conformance":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getConformance();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setConformance(_field_);
				}
				return _field_;}
			case "link":
				List<com.dtc.fhir.gwt.Uri> linkList = _instance_.getLink();
				if (linkList.size() < _index_ + 1) {
					linkList.add(new com.dtc.fhir.gwt.Uri());
				}
				return linkList.get(Math.min(linkList.size() - 1, _index_));
			case "validated":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getValidated();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setValidated(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptCapability");
			}
		}
	}
	private static class SetTestScriptContact {
		static void set(com.dtc.fhir.gwt.TestScriptContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptContact");
			}
		}
	}
	private static class SetTestScriptFixture {
		static void set(com.dtc.fhir.gwt.TestScriptFixture instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptFixture instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "resource":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setResource((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "autocreate":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAutocreate((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "autodelete":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAutodelete((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptFixture");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptFixture _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "resource":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getResource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setResource(_field_);
				}
				return _field_;}
			case "autocreate":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAutocreate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAutocreate(_field_);
				}
				return _field_;}
			case "autodelete":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAutodelete();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAutodelete(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptFixture");
			}
		}
	}
	private static class SetTestScriptLink {
		static void set(com.dtc.fhir.gwt.TestScriptLink instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptLink instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptLink");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptLink _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptLink");
			}
		}
	}
	private static class SetTestScriptMetadata {
		static void set(com.dtc.fhir.gwt.TestScriptMetadata instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptMetadata instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "link":
				if (value instanceof com.dtc.fhir.gwt.TestScriptLink || value == null) {
					List<com.dtc.fhir.gwt.TestScriptLink> linkList = instance.getLink();
					if (linkList.size() < index + 1) {
						linkList.add((com.dtc.fhir.gwt.TestScriptLink)value);
					} else {
						linkList.set(Math.min(linkList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptLink)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "capability":
				if (value instanceof com.dtc.fhir.gwt.TestScriptCapability || value == null) {
					List<com.dtc.fhir.gwt.TestScriptCapability> capabilityList = instance.getCapability();
					if (capabilityList.size() < index + 1) {
						capabilityList.add((com.dtc.fhir.gwt.TestScriptCapability)value);
					} else {
						capabilityList.set(Math.min(capabilityList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptCapability)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptMetadata");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptMetadata _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "link":
				List<com.dtc.fhir.gwt.TestScriptLink> linkList = _instance_.getLink();
				if (linkList.size() < _index_ + 1) {
					linkList.add(new com.dtc.fhir.gwt.TestScriptLink());
				}
				return linkList.get(Math.min(linkList.size() - 1, _index_));
			case "capability":
				List<com.dtc.fhir.gwt.TestScriptCapability> capabilityList = _instance_.getCapability();
				if (capabilityList.size() < _index_ + 1) {
					capabilityList.add(new com.dtc.fhir.gwt.TestScriptCapability());
				}
				return capabilityList.get(Math.min(capabilityList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptMetadata");
			}
		}
	}
	private static class SetTestScriptOperation {
		static void set(com.dtc.fhir.gwt.TestScriptOperation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptOperation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "resource":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setResource((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "type":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setType((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "contentType":
				if (value instanceof com.dtc.fhir.gwt.ContentType || value == null) {
					instance.setContentType((com.dtc.fhir.gwt.ContentType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContentType");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "destination":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setDestination((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "label":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setLabel((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "sourceId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setSourceId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "accept":
				if (value instanceof com.dtc.fhir.gwt.ContentType || value == null) {
					instance.setAccept((com.dtc.fhir.gwt.ContentType)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ContentType");
				}
				break;
			case "params":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setParams((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "targetId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setTargetId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "encodeRequestUrl":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setEncodeRequestUrl((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "requestHeader":
				if (value instanceof com.dtc.fhir.gwt.TestScriptRequestHeader || value == null) {
					List<com.dtc.fhir.gwt.TestScriptRequestHeader> requestHeaderList = instance.getRequestHeader();
					if (requestHeaderList.size() < index + 1) {
						requestHeaderList.add((com.dtc.fhir.gwt.TestScriptRequestHeader)value);
					} else {
						requestHeaderList.set(Math.min(requestHeaderList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptRequestHeader)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "responseId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setResponseId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptOperation");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptOperation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "resource":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getResource();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setResource(_field_);
				}
				return _field_;}
			case "type":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setType(_field_);
				}
				return _field_;}
			case "contentType":
				{com.dtc.fhir.gwt.ContentType _field_ = _instance_.getContentType();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContentType();
					_instance_.setContentType(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "destination":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getDestination();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setDestination(_field_);
				}
				return _field_;}
			case "label":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getLabel();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setLabel(_field_);
				}
				return _field_;}
			case "sourceId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getSourceId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setSourceId(_field_);
				}
				return _field_;}
			case "accept":
				{com.dtc.fhir.gwt.ContentType _field_ = _instance_.getAccept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ContentType();
					_instance_.setAccept(_field_);
				}
				return _field_;}
			case "params":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getParams();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setParams(_field_);
				}
				return _field_;}
			case "targetId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getTargetId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setTargetId(_field_);
				}
				return _field_;}
			case "encodeRequestUrl":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getEncodeRequestUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setEncodeRequestUrl(_field_);
				}
				return _field_;}
			case "requestHeader":
				List<com.dtc.fhir.gwt.TestScriptRequestHeader> requestHeaderList = _instance_.getRequestHeader();
				if (requestHeaderList.size() < _index_ + 1) {
					requestHeaderList.add(new com.dtc.fhir.gwt.TestScriptRequestHeader());
				}
				return requestHeaderList.get(Math.min(requestHeaderList.size() - 1, _index_));
			case "responseId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getResponseId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setResponseId(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptOperation");
			}
		}
	}
	private static class SetTestScriptRequestHeader {
		static void set(com.dtc.fhir.gwt.TestScriptRequestHeader instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptRequestHeader instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "field":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setField((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "value":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValue((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptRequestHeader");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptRequestHeader _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "field":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getField();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setField(_field_);
				}
				return _field_;}
			case "value":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptRequestHeader");
			}
		}
	}
	private static class SetTestScriptSetup {
		static void set(com.dtc.fhir.gwt.TestScriptSetup instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptSetup instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "action":
				if (value instanceof com.dtc.fhir.gwt.TestScriptAction || value == null) {
					List<com.dtc.fhir.gwt.TestScriptAction> actionList = instance.getAction();
					if (actionList.size() < index + 1) {
						actionList.add((com.dtc.fhir.gwt.TestScriptAction)value);
					} else {
						actionList.set(Math.min(actionList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptAction)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "metadata":
				if (value instanceof com.dtc.fhir.gwt.TestScriptMetadata || value == null) {
					instance.setMetadata((com.dtc.fhir.gwt.TestScriptMetadata)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptMetadata");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptSetup");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptSetup _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "action":
				List<com.dtc.fhir.gwt.TestScriptAction> actionList = _instance_.getAction();
				if (actionList.size() < _index_ + 1) {
					actionList.add(new com.dtc.fhir.gwt.TestScriptAction());
				}
				return actionList.get(Math.min(actionList.size() - 1, _index_));
			case "metadata":
				{com.dtc.fhir.gwt.TestScriptMetadata _field_ = _instance_.getMetadata();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptMetadata();
					_instance_.setMetadata(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptSetup");
			}
		}
	}
	private static class SetTestScriptTeardown {
		static void set(com.dtc.fhir.gwt.TestScriptTeardown instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptTeardown instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "action":
				if (value instanceof com.dtc.fhir.gwt.TestScriptAction2 || value == null) {
					List<com.dtc.fhir.gwt.TestScriptAction2> actionList = instance.getAction();
					if (actionList.size() < index + 1) {
						actionList.add((com.dtc.fhir.gwt.TestScriptAction2)value);
					} else {
						actionList.set(Math.min(actionList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptAction2)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptTeardown");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptTeardown _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "action":
				List<com.dtc.fhir.gwt.TestScriptAction2> actionList = _instance_.getAction();
				if (actionList.size() < _index_ + 1) {
					actionList.add(new com.dtc.fhir.gwt.TestScriptAction2());
				}
				return actionList.get(Math.min(actionList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptTeardown");
			}
		}
	}
	private static class SetTestScriptTest {
		static void set(com.dtc.fhir.gwt.TestScriptTest instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptTest instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "action":
				if (value instanceof com.dtc.fhir.gwt.TestScriptAction1 || value == null) {
					List<com.dtc.fhir.gwt.TestScriptAction1> actionList = instance.getAction();
					if (actionList.size() < index + 1) {
						actionList.add((com.dtc.fhir.gwt.TestScriptAction1)value);
					} else {
						actionList.set(Math.min(actionList.size() - 1, index), (com.dtc.fhir.gwt.TestScriptAction1)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "metadata":
				if (value instanceof com.dtc.fhir.gwt.TestScriptMetadata || value == null) {
					instance.setMetadata((com.dtc.fhir.gwt.TestScriptMetadata)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TestScriptMetadata");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptTest");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptTest _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "action":
				List<com.dtc.fhir.gwt.TestScriptAction1> actionList = _instance_.getAction();
				if (actionList.size() < _index_ + 1) {
					actionList.add(new com.dtc.fhir.gwt.TestScriptAction1());
				}
				return actionList.get(Math.min(actionList.size() - 1, _index_));
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "metadata":
				{com.dtc.fhir.gwt.TestScriptMetadata _field_ = _instance_.getMetadata();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TestScriptMetadata();
					_instance_.setMetadata(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptTest");
			}
		}
	}
	private static class SetTestScriptVariable {
		static void set(com.dtc.fhir.gwt.TestScriptVariable instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TestScriptVariable instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "path":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPath((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "headerField":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setHeaderField((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "sourceId":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setSourceId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TestScriptVariable");
			}
		}

		static Object get(com.dtc.fhir.gwt.TestScriptVariable _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "path":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPath();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPath(_field_);
				}
				return _field_;}
			case "headerField":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getHeaderField();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setHeaderField(_field_);
				}
				return _field_;}
			case "sourceId":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getSourceId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setSourceId(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TestScriptVariable");
			}
		}
	}
	private static class SetTime {
		static void set(com.dtc.fhir.gwt.Time instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Time instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.util.Date || value == null) {
					instance.setValue((java.util.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a java.util.Date");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Time");
			}
		}

		static Object get(com.dtc.fhir.gwt.Time _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.util.Date _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.util.Date();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Time");
			}
		}
	}
	private static class SetTiming {
		static void set(com.dtc.fhir.gwt.Timing instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Timing instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setCode((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "repeat":
				if (value instanceof com.dtc.fhir.gwt.TimingRepeat || value == null) {
					instance.setRepeat((com.dtc.fhir.gwt.TimingRepeat)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TimingRepeat");
				}
				break;
			case "event":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					List<com.dtc.fhir.gwt.DateTime> eventList = instance.getEvent();
					if (eventList.size() < index + 1) {
						eventList.add((com.dtc.fhir.gwt.DateTime)value);
					} else {
						eventList.set(Math.min(eventList.size() - 1, index), (com.dtc.fhir.gwt.DateTime)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Timing");
			}
		}

		static Object get(com.dtc.fhir.gwt.Timing _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "repeat":
				{com.dtc.fhir.gwt.TimingRepeat _field_ = _instance_.getRepeat();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.TimingRepeat();
					_instance_.setRepeat(_field_);
				}
				return _field_;}
			case "event":
				List<com.dtc.fhir.gwt.DateTime> eventList = _instance_.getEvent();
				if (eventList.size() < _index_ + 1) {
					eventList.add(new com.dtc.fhir.gwt.DateTime());
				}
				return eventList.get(Math.min(eventList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Timing");
			}
		}
	}
	private static class SetTimingRepeat {
		static void set(com.dtc.fhir.gwt.TimingRepeat instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TimingRepeat instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "period":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPeriod((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "boundsQuantity":
				if (value instanceof com.dtc.fhir.gwt.Duration || value == null) {
					instance.setBoundsQuantity((com.dtc.fhir.gwt.Duration)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Duration");
				}
				break;
			case "boundsRange":
				if (value instanceof com.dtc.fhir.gwt.Range || value == null) {
					instance.setBoundsRange((com.dtc.fhir.gwt.Range)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Range");
				}
				break;
			case "boundsPeriod":
				if (value instanceof com.dtc.fhir.gwt.Period || value == null) {
					instance.setBoundsPeriod((com.dtc.fhir.gwt.Period)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Period");
				}
				break;
			case "durationMax":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setDurationMax((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "durationUnits":
				if (value instanceof com.dtc.fhir.gwt.UnitsOfTime || value == null) {
					instance.setDurationUnits((com.dtc.fhir.gwt.UnitsOfTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnitsOfTime");
				}
				break;
			case "frequencyMax":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setFrequencyMax((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "periodUnits":
				if (value instanceof com.dtc.fhir.gwt.UnitsOfTime || value == null) {
					instance.setPeriodUnits((com.dtc.fhir.gwt.UnitsOfTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnitsOfTime");
				}
				break;
			case "duration":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setDuration((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "count":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setCount((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "frequency":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setFrequency((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "periodMax":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPeriodMax((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "when":
				if (value instanceof com.dtc.fhir.gwt.EventTiming || value == null) {
					instance.setWhen((com.dtc.fhir.gwt.EventTiming)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.EventTiming");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TimingRepeat");
			}
		}

		static Object get(com.dtc.fhir.gwt.TimingRepeat _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "period":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPeriod(_field_);
				}
				return _field_;}
			case "boundsQuantity":
				{com.dtc.fhir.gwt.Duration _field_ = _instance_.getBoundsQuantity();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Duration();
					_instance_.setBoundsQuantity(_field_);
				}
				return _field_;}
			case "boundsRange":
				{com.dtc.fhir.gwt.Range _field_ = _instance_.getBoundsRange();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Range();
					_instance_.setBoundsRange(_field_);
				}
				return _field_;}
			case "boundsPeriod":
				{com.dtc.fhir.gwt.Period _field_ = _instance_.getBoundsPeriod();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Period();
					_instance_.setBoundsPeriod(_field_);
				}
				return _field_;}
			case "durationMax":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getDurationMax();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setDurationMax(_field_);
				}
				return _field_;}
			case "durationUnits":
				{com.dtc.fhir.gwt.UnitsOfTime _field_ = _instance_.getDurationUnits();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnitsOfTime();
					_instance_.setDurationUnits(_field_);
				}
				return _field_;}
			case "frequencyMax":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getFrequencyMax();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setFrequencyMax(_field_);
				}
				return _field_;}
			case "periodUnits":
				{com.dtc.fhir.gwt.UnitsOfTime _field_ = _instance_.getPeriodUnits();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.UnitsOfTime();
					_instance_.setPeriodUnits(_field_);
				}
				return _field_;}
			case "duration":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getDuration();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setDuration(_field_);
				}
				return _field_;}
			case "count":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getCount();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setCount(_field_);
				}
				return _field_;}
			case "frequency":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getFrequency();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setFrequency(_field_);
				}
				return _field_;}
			case "periodMax":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPeriodMax();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPeriodMax(_field_);
				}
				return _field_;}
			case "when":
				{com.dtc.fhir.gwt.EventTiming _field_ = _instance_.getWhen();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.EventTiming();
					_instance_.setWhen(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TimingRepeat");
			}
		}
	}
	private static class SetTransactionMode {
		static void set(com.dtc.fhir.gwt.TransactionMode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TransactionMode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.TransactionModeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.TransactionModeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TransactionModeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TransactionMode");
			}
		}

		static Object get(com.dtc.fhir.gwt.TransactionMode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.TransactionModeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TransactionMode");
			}
		}
	}
	private static class SetTypeRestfulInteraction {
		static void set(com.dtc.fhir.gwt.TypeRestfulInteraction instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.TypeRestfulInteraction instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.TypeRestfulInteractionList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.TypeRestfulInteractionList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.TypeRestfulInteractionList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of TypeRestfulInteraction");
			}
		}

		static Object get(com.dtc.fhir.gwt.TypeRestfulInteraction _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.TypeRestfulInteractionList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of TypeRestfulInteraction");
			}
		}
	}
	private static class SetUnitsOfTime {
		static void set(com.dtc.fhir.gwt.UnitsOfTime instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.UnitsOfTime instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.UnitsOfTimeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.UnitsOfTimeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnitsOfTimeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of UnitsOfTime");
			}
		}

		static Object get(com.dtc.fhir.gwt.UnitsOfTime _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.UnitsOfTimeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of UnitsOfTime");
			}
		}
	}
	private static class SetUnknownContentCode {
		static void set(com.dtc.fhir.gwt.UnknownContentCode instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.UnknownContentCode instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.UnknownContentCodeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.UnknownContentCodeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UnknownContentCodeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of UnknownContentCode");
			}
		}

		static Object get(com.dtc.fhir.gwt.UnknownContentCode _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.UnknownContentCodeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of UnknownContentCode");
			}
		}
	}
	private static class SetUnsignedInt {
		static void set(com.dtc.fhir.gwt.UnsignedInt instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.UnsignedInt instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.math.BigInteger || value == null) {
					instance.setValue((java.math.BigInteger)value);
				} else {
					throw new IllegalArgumentException("value is not a java.math.BigInteger");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of UnsignedInt");
			}
		}

		static Object get(com.dtc.fhir.gwt.UnsignedInt _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.math.BigInteger _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of UnsignedInt");
			}
		}
	}
	private static class SetUri {
		static void set(com.dtc.fhir.gwt.Uri instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Uri instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Uri");
			}
		}

		static Object get(com.dtc.fhir.gwt.Uri _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Uri");
			}
		}
	}
	private static class SetUse {
		static void set(com.dtc.fhir.gwt.Use instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Use instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.UseList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.UseList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.UseList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Use");
			}
		}

		static Object get(com.dtc.fhir.gwt.Use _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.UseList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Use");
			}
		}
	}
	private static class SetUuid {
		static void set(com.dtc.fhir.gwt.Uuid instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.Uuid instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof java.lang.String || value == null) {
					instance.setValue((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of Uuid");
			}
		}

		static Object get(com.dtc.fhir.gwt.Uuid _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{java.lang.String _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of Uuid");
			}
		}
	}
	private static class SetValueSet {
		static void set(com.dtc.fhir.gwt.ValueSet instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSet instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "date":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDate((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "status":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setStatus((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "url":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setUrl((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "publisher":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setPublisher((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "contact":
				if (value instanceof com.dtc.fhir.gwt.ValueSetContact || value == null) {
					List<com.dtc.fhir.gwt.ValueSetContact> contactList = instance.getContact();
					if (contactList.size() < index + 1) {
						contactList.add((com.dtc.fhir.gwt.ValueSetContact)value);
					} else {
						contactList.set(Math.min(contactList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetContact)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "copyright":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setCopyright((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Identifier)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Identifier");
				}
				break;
			case "experimental":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExperimental((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "description":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDescription((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "useContext":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					List<com.dtc.fhir.gwt.CodeableConcept> useContextList = instance.getUseContext();
					if (useContextList.size() < index + 1) {
						useContextList.add((com.dtc.fhir.gwt.CodeableConcept)value);
					} else {
						useContextList.set(Math.min(useContextList.size() - 1, index), (com.dtc.fhir.gwt.CodeableConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "requirements":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setRequirements((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "lockedDate":
				if (value instanceof com.dtc.fhir.gwt.Date || value == null) {
					instance.setLockedDate((com.dtc.fhir.gwt.Date)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Date");
				}
				break;
			case "extensible":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setExtensible((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "codeSystem":
				if (value instanceof com.dtc.fhir.gwt.ValueSetCodeSystem || value == null) {
					instance.setCodeSystem((com.dtc.fhir.gwt.ValueSetCodeSystem)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ValueSetCodeSystem");
				}
				break;
			case "immutable":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setImmutable((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "compose":
				if (value instanceof com.dtc.fhir.gwt.ValueSetCompose || value == null) {
					instance.setCompose((com.dtc.fhir.gwt.ValueSetCompose)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ValueSetCompose");
				}
				break;
			case "expansion":
				if (value instanceof com.dtc.fhir.gwt.ValueSetExpansion || value == null) {
					instance.setExpansion((com.dtc.fhir.gwt.ValueSetExpansion)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.ValueSetExpansion");
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSet");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSet _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "date":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDate(_field_);
				}
				return _field_;}
			case "status":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getStatus();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setStatus(_field_);
				}
				return _field_;}
			case "url":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getUrl();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setUrl(_field_);
				}
				return _field_;}
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "publisher":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getPublisher();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setPublisher(_field_);
				}
				return _field_;}
			case "contact":
				List<com.dtc.fhir.gwt.ValueSetContact> contactList = _instance_.getContact();
				if (contactList.size() < _index_ + 1) {
					contactList.add(new com.dtc.fhir.gwt.ValueSetContact());
				}
				return contactList.get(Math.min(contactList.size() - 1, _index_));
			case "copyright":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getCopyright();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setCopyright(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Identifier _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Identifier();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "experimental":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExperimental();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExperimental(_field_);
				}
				return _field_;}
			case "description":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDescription();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDescription(_field_);
				}
				return _field_;}
			case "useContext":
				List<com.dtc.fhir.gwt.CodeableConcept> useContextList = _instance_.getUseContext();
				if (useContextList.size() < _index_ + 1) {
					useContextList.add(new com.dtc.fhir.gwt.CodeableConcept());
				}
				return useContextList.get(Math.min(useContextList.size() - 1, _index_));
			case "requirements":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getRequirements();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setRequirements(_field_);
				}
				return _field_;}
			case "lockedDate":
				{com.dtc.fhir.gwt.Date _field_ = _instance_.getLockedDate();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Date();
					_instance_.setLockedDate(_field_);
				}
				return _field_;}
			case "extensible":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getExtensible();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setExtensible(_field_);
				}
				return _field_;}
			case "codeSystem":
				{com.dtc.fhir.gwt.ValueSetCodeSystem _field_ = _instance_.getCodeSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ValueSetCodeSystem();
					_instance_.setCodeSystem(_field_);
				}
				return _field_;}
			case "immutable":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getImmutable();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setImmutable(_field_);
				}
				return _field_;}
			case "compose":
				{com.dtc.fhir.gwt.ValueSetCompose _field_ = _instance_.getCompose();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ValueSetCompose();
					_instance_.setCompose(_field_);
				}
				return _field_;}
			case "expansion":
				{com.dtc.fhir.gwt.ValueSetExpansion _field_ = _instance_.getExpansion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.ValueSetExpansion();
					_instance_.setExpansion(_field_);
				}
				return _field_;}
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSet");
			}
		}
	}
	private static class SetValueSetCodeSystem {
		static void set(com.dtc.fhir.gwt.ValueSetCodeSystem instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetCodeSystem instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "concept":
				if (value instanceof com.dtc.fhir.gwt.ValueSetConcept || value == null) {
					List<com.dtc.fhir.gwt.ValueSetConcept> conceptList = instance.getConcept();
					if (conceptList.size() < index + 1) {
						conceptList.add((com.dtc.fhir.gwt.ValueSetConcept)value);
					} else {
						conceptList.set(Math.min(conceptList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "caseSensitive":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setCaseSensitive((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetCodeSystem");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetCodeSystem _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "concept":
				List<com.dtc.fhir.gwt.ValueSetConcept> conceptList = _instance_.getConcept();
				if (conceptList.size() < _index_ + 1) {
					conceptList.add(new com.dtc.fhir.gwt.ValueSetConcept());
				}
				return conceptList.get(Math.min(conceptList.size() - 1, _index_));
			case "caseSensitive":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getCaseSensitive();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setCaseSensitive(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetCodeSystem");
			}
		}
	}
	private static class SetValueSetCompose {
		static void set(com.dtc.fhir.gwt.ValueSetCompose instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetCompose instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "include":
				if (value instanceof com.dtc.fhir.gwt.ValueSetInclude || value == null) {
					List<com.dtc.fhir.gwt.ValueSetInclude> includeList = instance.getInclude();
					if (includeList.size() < index + 1) {
						includeList.add((com.dtc.fhir.gwt.ValueSetInclude)value);
					} else {
						includeList.set(Math.min(includeList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetInclude)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "exclude":
				if (value instanceof com.dtc.fhir.gwt.ValueSetInclude || value == null) {
					List<com.dtc.fhir.gwt.ValueSetInclude> excludeList = instance.getExclude();
					if (excludeList.size() < index + 1) {
						excludeList.add((com.dtc.fhir.gwt.ValueSetInclude)value);
					} else {
						excludeList.set(Math.min(excludeList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetInclude)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "import":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					List<com.dtc.fhir.gwt.Uri> importList = instance.getImport();
					if (importList.size() < index + 1) {
						importList.add((com.dtc.fhir.gwt.Uri)value);
					} else {
						importList.set(Math.min(importList.size() - 1, index), (com.dtc.fhir.gwt.Uri)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetCompose");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetCompose _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "include":
				List<com.dtc.fhir.gwt.ValueSetInclude> includeList = _instance_.getInclude();
				if (includeList.size() < _index_ + 1) {
					includeList.add(new com.dtc.fhir.gwt.ValueSetInclude());
				}
				return includeList.get(Math.min(includeList.size() - 1, _index_));
			case "exclude":
				List<com.dtc.fhir.gwt.ValueSetInclude> excludeList = _instance_.getExclude();
				if (excludeList.size() < _index_ + 1) {
					excludeList.add(new com.dtc.fhir.gwt.ValueSetInclude());
				}
				return excludeList.get(Math.min(excludeList.size() - 1, _index_));
			case "import":
				List<com.dtc.fhir.gwt.Uri> importList = _instance_.getImport();
				if (importList.size() < _index_ + 1) {
					importList.add(new com.dtc.fhir.gwt.Uri());
				}
				return importList.get(Math.min(importList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetCompose");
			}
		}
	}
	private static class SetValueSetConcept {
		static void set(com.dtc.fhir.gwt.ValueSetConcept instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetConcept instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "definition":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDefinition((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "concept":
				if (value instanceof com.dtc.fhir.gwt.ValueSetConcept || value == null) {
					List<com.dtc.fhir.gwt.ValueSetConcept> conceptList = instance.getConcept();
					if (conceptList.size() < index + 1) {
						conceptList.add((com.dtc.fhir.gwt.ValueSetConcept)value);
					} else {
						conceptList.set(Math.min(conceptList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetConcept)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "designation":
				if (value instanceof com.dtc.fhir.gwt.ValueSetDesignation || value == null) {
					List<com.dtc.fhir.gwt.ValueSetDesignation> designationList = instance.getDesignation();
					if (designationList.size() < index + 1) {
						designationList.add((com.dtc.fhir.gwt.ValueSetDesignation)value);
					} else {
						designationList.set(Math.min(designationList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetDesignation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "display":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisplay((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "abstract":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAbstract((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetConcept");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetConcept _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "definition":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDefinition();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDefinition(_field_);
				}
				return _field_;}
			case "concept":
				List<com.dtc.fhir.gwt.ValueSetConcept> conceptList = _instance_.getConcept();
				if (conceptList.size() < _index_ + 1) {
					conceptList.add(new com.dtc.fhir.gwt.ValueSetConcept());
				}
				return conceptList.get(Math.min(conceptList.size() - 1, _index_));
			case "designation":
				List<com.dtc.fhir.gwt.ValueSetDesignation> designationList = _instance_.getDesignation();
				if (designationList.size() < _index_ + 1) {
					designationList.add(new com.dtc.fhir.gwt.ValueSetDesignation());
				}
				return designationList.get(Math.min(designationList.size() - 1, _index_));
			case "display":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisplay();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisplay(_field_);
				}
				return _field_;}
			case "abstract":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAbstract();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAbstract(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetConcept");
			}
		}
	}
	private static class SetValueSetConcept1 {
		static void set(com.dtc.fhir.gwt.ValueSetConcept1 instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetConcept1 instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "designation":
				if (value instanceof com.dtc.fhir.gwt.ValueSetDesignation || value == null) {
					List<com.dtc.fhir.gwt.ValueSetDesignation> designationList = instance.getDesignation();
					if (designationList.size() < index + 1) {
						designationList.add((com.dtc.fhir.gwt.ValueSetDesignation)value);
					} else {
						designationList.set(Math.min(designationList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetDesignation)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "display":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisplay((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetConcept1");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetConcept1 _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "designation":
				List<com.dtc.fhir.gwt.ValueSetDesignation> designationList = _instance_.getDesignation();
				if (designationList.size() < _index_ + 1) {
					designationList.add(new com.dtc.fhir.gwt.ValueSetDesignation());
				}
				return designationList.get(Math.min(designationList.size() - 1, _index_));
			case "display":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisplay();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisplay(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetConcept1");
			}
		}
	}
	private static class SetValueSetContact {
		static void set(com.dtc.fhir.gwt.ValueSetContact instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetContact instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "telecom":
				if (value instanceof com.dtc.fhir.gwt.ContactPoint || value == null) {
					List<com.dtc.fhir.gwt.ContactPoint> telecomList = instance.getTelecom();
					if (telecomList.size() < index + 1) {
						telecomList.add((com.dtc.fhir.gwt.ContactPoint)value);
					} else {
						telecomList.set(Math.min(telecomList.size() - 1, index), (com.dtc.fhir.gwt.ContactPoint)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetContact");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetContact _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "telecom":
				List<com.dtc.fhir.gwt.ContactPoint> telecomList = _instance_.getTelecom();
				if (telecomList.size() < _index_ + 1) {
					telecomList.add(new com.dtc.fhir.gwt.ContactPoint());
				}
				return telecomList.get(Math.min(telecomList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetContact");
			}
		}
	}
	private static class SetValueSetContains {
		static void set(com.dtc.fhir.gwt.ValueSetContains instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetContains instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "code":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "contains":
				if (value instanceof com.dtc.fhir.gwt.ValueSetContains || value == null) {
					List<com.dtc.fhir.gwt.ValueSetContains> containsList = instance.getContains();
					if (containsList.size() < index + 1) {
						containsList.add((com.dtc.fhir.gwt.ValueSetContains)value);
					} else {
						containsList.set(Math.min(containsList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetContains)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "display":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setDisplay((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "abstract":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setAbstract((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetContains");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetContains _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "code":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setCode(_field_);
				}
				return _field_;}
			case "contains":
				List<com.dtc.fhir.gwt.ValueSetContains> containsList = _instance_.getContains();
				if (containsList.size() < _index_ + 1) {
					containsList.add(new com.dtc.fhir.gwt.ValueSetContains());
				}
				return containsList.get(Math.min(containsList.size() - 1, _index_));
			case "display":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getDisplay();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setDisplay(_field_);
				}
				return _field_;}
			case "abstract":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getAbstract();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setAbstract(_field_);
				}
				return _field_;}
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetContains");
			}
		}
	}
	private static class SetValueSetDesignation {
		static void set(com.dtc.fhir.gwt.ValueSetDesignation instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetDesignation instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "value":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValue((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "use":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setUse((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetDesignation");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetDesignation _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "value":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "use":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getUse();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setUse(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetDesignation");
			}
		}
	}
	private static class SetValueSetExpansion {
		static void set(com.dtc.fhir.gwt.ValueSetExpansion instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetExpansion instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "offset":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setOffset((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "total":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setTotal((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "timestamp":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setTimestamp((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setIdentifier((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "contains":
				if (value instanceof com.dtc.fhir.gwt.ValueSetContains || value == null) {
					List<com.dtc.fhir.gwt.ValueSetContains> containsList = instance.getContains();
					if (containsList.size() < index + 1) {
						containsList.add((com.dtc.fhir.gwt.ValueSetContains)value);
					} else {
						containsList.set(Math.min(containsList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetContains)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "parameter":
				if (value instanceof com.dtc.fhir.gwt.ValueSetParameter || value == null) {
					List<com.dtc.fhir.gwt.ValueSetParameter> parameterList = instance.getParameter();
					if (parameterList.size() < index + 1) {
						parameterList.add((com.dtc.fhir.gwt.ValueSetParameter)value);
					} else {
						parameterList.set(Math.min(parameterList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetParameter)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetExpansion");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetExpansion _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "offset":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getOffset();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setOffset(_field_);
				}
				return _field_;}
			case "total":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getTotal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setTotal(_field_);
				}
				return _field_;}
			case "timestamp":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getTimestamp();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setTimestamp(_field_);
				}
				return _field_;}
			case "identifier":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getIdentifier();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setIdentifier(_field_);
				}
				return _field_;}
			case "contains":
				List<com.dtc.fhir.gwt.ValueSetContains> containsList = _instance_.getContains();
				if (containsList.size() < _index_ + 1) {
					containsList.add(new com.dtc.fhir.gwt.ValueSetContains());
				}
				return containsList.get(Math.min(containsList.size() - 1, _index_));
			case "parameter":
				List<com.dtc.fhir.gwt.ValueSetParameter> parameterList = _instance_.getParameter();
				if (parameterList.size() < _index_ + 1) {
					parameterList.add(new com.dtc.fhir.gwt.ValueSetParameter());
				}
				return parameterList.get(Math.min(parameterList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetExpansion");
			}
		}
	}
	private static class SetValueSetFilter {
		static void set(com.dtc.fhir.gwt.ValueSetFilter instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetFilter instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "property":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setProperty((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "value":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setValue((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "op":
				if (value instanceof com.dtc.fhir.gwt.FilterOperator || value == null) {
					instance.setOp((com.dtc.fhir.gwt.FilterOperator)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.FilterOperator");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetFilter");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetFilter _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "property":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getProperty();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setProperty(_field_);
				}
				return _field_;}
			case "value":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getValue();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setValue(_field_);
				}
				return _field_;}
			case "op":
				{com.dtc.fhir.gwt.FilterOperator _field_ = _instance_.getOp();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.FilterOperator();
					_instance_.setOp(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetFilter");
			}
		}
	}
	private static class SetValueSetInclude {
		static void set(com.dtc.fhir.gwt.ValueSetInclude instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetInclude instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "version":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setVersion((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "concept":
				if (value instanceof com.dtc.fhir.gwt.ValueSetConcept1 || value == null) {
					List<com.dtc.fhir.gwt.ValueSetConcept1> conceptList = instance.getConcept();
					if (conceptList.size() < index + 1) {
						conceptList.add((com.dtc.fhir.gwt.ValueSetConcept1)value);
					} else {
						conceptList.set(Math.min(conceptList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetConcept1)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "system":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setSystem((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "filter":
				if (value instanceof com.dtc.fhir.gwt.ValueSetFilter || value == null) {
					List<com.dtc.fhir.gwt.ValueSetFilter> filterList = instance.getFilter();
					if (filterList.size() < index + 1) {
						filterList.add((com.dtc.fhir.gwt.ValueSetFilter)value);
					} else {
						filterList.set(Math.min(filterList.size() - 1, index), (com.dtc.fhir.gwt.ValueSetFilter)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetInclude");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetInclude _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "version":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getVersion();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setVersion(_field_);
				}
				return _field_;}
			case "concept":
				List<com.dtc.fhir.gwt.ValueSetConcept1> conceptList = _instance_.getConcept();
				if (conceptList.size() < _index_ + 1) {
					conceptList.add(new com.dtc.fhir.gwt.ValueSetConcept1());
				}
				return conceptList.get(Math.min(conceptList.size() - 1, _index_));
			case "system":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getSystem();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setSystem(_field_);
				}
				return _field_;}
			case "filter":
				List<com.dtc.fhir.gwt.ValueSetFilter> filterList = _instance_.getFilter();
				if (filterList.size() < _index_ + 1) {
					filterList.add(new com.dtc.fhir.gwt.ValueSetFilter());
				}
				return filterList.get(Math.min(filterList.size() - 1, _index_));
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetInclude");
			}
		}
	}
	private static class SetValueSetParameter {
		static void set(com.dtc.fhir.gwt.ValueSetParameter instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.ValueSetParameter instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "name":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setName((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "valueString":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setValueString((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "valueUri":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setValueUri((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			case "valueCode":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setValueCode((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "valueBoolean":
				if (value instanceof com.dtc.fhir.gwt.BooleanDt || value == null) {
					instance.setValueBoolean((com.dtc.fhir.gwt.BooleanDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.BooleanDt");
				}
				break;
			case "valueInteger":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setValueInteger((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "valueDecimal":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setValueDecimal((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of ValueSetParameter");
			}
		}

		static Object get(com.dtc.fhir.gwt.ValueSetParameter _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "name":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getName();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setName(_field_);
				}
				return _field_;}
			case "valueString":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getValueString();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setValueString(_field_);
				}
				return _field_;}
			case "valueUri":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getValueUri();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setValueUri(_field_);
				}
				return _field_;}
			case "valueCode":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getValueCode();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setValueCode(_field_);
				}
				return _field_;}
			case "valueBoolean":
				{com.dtc.fhir.gwt.BooleanDt _field_ = _instance_.getValueBoolean();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.BooleanDt();
					_instance_.setValueBoolean(_field_);
				}
				return _field_;}
			case "valueInteger":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getValueInteger();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setValueInteger(_field_);
				}
				return _field_;}
			case "valueDecimal":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getValueDecimal();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setValueDecimal(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of ValueSetParameter");
			}
		}
	}
	private static class SetVisionBase {
		static void set(com.dtc.fhir.gwt.VisionBase instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.VisionBase instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.VisionBaseList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.VisionBaseList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.VisionBaseList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of VisionBase");
			}
		}

		static Object get(com.dtc.fhir.gwt.VisionBase _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.VisionBaseList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of VisionBase");
			}
		}
	}
	private static class SetVisionEyes {
		static void set(com.dtc.fhir.gwt.VisionEyes instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.VisionEyes instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.VisionEyesList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.VisionEyesList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.VisionEyesList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of VisionEyes");
			}
		}

		static Object get(com.dtc.fhir.gwt.VisionEyes _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.VisionEyesList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of VisionEyes");
			}
		}
	}
	private static class SetVisionPrescription {
		static void set(com.dtc.fhir.gwt.VisionPrescription instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.VisionPrescription instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "patient":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPatient((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "encounter":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setEncounter((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "identifier":
				if (value instanceof com.dtc.fhir.gwt.Identifier || value == null) {
					List<com.dtc.fhir.gwt.Identifier> identifierList = instance.getIdentifier();
					if (identifierList.size() < index + 1) {
						identifierList.add((com.dtc.fhir.gwt.Identifier)value);
					} else {
						identifierList.set(Math.min(identifierList.size() - 1, index), (com.dtc.fhir.gwt.Identifier)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "reasonCodeableConcept":
				if (value instanceof com.dtc.fhir.gwt.CodeableConcept || value == null) {
					instance.setReasonCodeableConcept((com.dtc.fhir.gwt.CodeableConcept)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.CodeableConcept");
				}
				break;
			case "reasonReference":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setReasonReference((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "dateWritten":
				if (value instanceof com.dtc.fhir.gwt.DateTime || value == null) {
					instance.setDateWritten((com.dtc.fhir.gwt.DateTime)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.DateTime");
				}
				break;
			case "prescriber":
				if (value instanceof com.dtc.fhir.gwt.Reference || value == null) {
					instance.setPrescriber((com.dtc.fhir.gwt.Reference)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Reference");
				}
				break;
			case "dispense":
				if (value instanceof com.dtc.fhir.gwt.VisionPrescriptionDispense || value == null) {
					List<com.dtc.fhir.gwt.VisionPrescriptionDispense> dispenseList = instance.getDispense();
					if (dispenseList.size() < index + 1) {
						dispenseList.add((com.dtc.fhir.gwt.VisionPrescriptionDispense)value);
					} else {
						dispenseList.set(Math.min(dispenseList.size() - 1, index), (com.dtc.fhir.gwt.VisionPrescriptionDispense)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "text":
				if (value instanceof com.dtc.fhir.gwt.Narrative || value == null) {
					instance.setText((com.dtc.fhir.gwt.Narrative)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Narrative");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof com.dtc.fhir.gwt.Id || value == null) {
					instance.setId((com.dtc.fhir.gwt.Id)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Id");
				}
				break;
			case "language":
				if (value instanceof com.dtc.fhir.gwt.Code || value == null) {
					instance.setLanguage((com.dtc.fhir.gwt.Code)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Code");
				}
				break;
			case "meta":
				if (value instanceof com.dtc.fhir.gwt.Meta || value == null) {
					instance.setMeta((com.dtc.fhir.gwt.Meta)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Meta");
				}
				break;
			case "implicitRules":
				if (value instanceof com.dtc.fhir.gwt.Uri || value == null) {
					instance.setImplicitRules((com.dtc.fhir.gwt.Uri)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Uri");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of VisionPrescription");
			}
		}

		static Object get(com.dtc.fhir.gwt.VisionPrescription _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "patient":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPatient();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPatient(_field_);
				}
				return _field_;}
			case "encounter":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getEncounter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setEncounter(_field_);
				}
				return _field_;}
			case "identifier":
				List<com.dtc.fhir.gwt.Identifier> identifierList = _instance_.getIdentifier();
				if (identifierList.size() < _index_ + 1) {
					identifierList.add(new com.dtc.fhir.gwt.Identifier());
				}
				return identifierList.get(Math.min(identifierList.size() - 1, _index_));
			case "reasonCodeableConcept":
				{com.dtc.fhir.gwt.CodeableConcept _field_ = _instance_.getReasonCodeableConcept();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.CodeableConcept();
					_instance_.setReasonCodeableConcept(_field_);
				}
				return _field_;}
			case "reasonReference":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getReasonReference();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setReasonReference(_field_);
				}
				return _field_;}
			case "dateWritten":
				{com.dtc.fhir.gwt.DateTime _field_ = _instance_.getDateWritten();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.DateTime();
					_instance_.setDateWritten(_field_);
				}
				return _field_;}
			case "prescriber":
				{com.dtc.fhir.gwt.Reference _field_ = _instance_.getPrescriber();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Reference();
					_instance_.setPrescriber(_field_);
				}
				return _field_;}
			case "dispense":
				List<com.dtc.fhir.gwt.VisionPrescriptionDispense> dispenseList = _instance_.getDispense();
				if (dispenseList.size() < _index_ + 1) {
					dispenseList.add(new com.dtc.fhir.gwt.VisionPrescriptionDispense());
				}
				return dispenseList.get(Math.min(dispenseList.size() - 1, _index_));
			case "text":
				{com.dtc.fhir.gwt.Narrative _field_ = _instance_.getText();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Narrative();
					_instance_.setText(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{com.dtc.fhir.gwt.Id _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Id();
					_instance_.setId(_field_);
				}
				return _field_;}
			case "language":
				{com.dtc.fhir.gwt.Code _field_ = _instance_.getLanguage();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Code();
					_instance_.setLanguage(_field_);
				}
				return _field_;}
			case "meta":
				{com.dtc.fhir.gwt.Meta _field_ = _instance_.getMeta();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Meta();
					_instance_.setMeta(_field_);
				}
				return _field_;}
			case "implicitRules":
				{com.dtc.fhir.gwt.Uri _field_ = _instance_.getImplicitRules();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Uri();
					_instance_.setImplicitRules(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of VisionPrescription");
			}
		}
	}
	private static class SetVisionPrescriptionDispense {
		static void set(com.dtc.fhir.gwt.VisionPrescriptionDispense instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.VisionPrescriptionDispense instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "notes":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setNotes((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "duration":
				if (value instanceof com.dtc.fhir.gwt.SimpleQuantity || value == null) {
					instance.setDuration((com.dtc.fhir.gwt.SimpleQuantity)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.SimpleQuantity");
				}
				break;
			case "product":
				if (value instanceof com.dtc.fhir.gwt.Coding || value == null) {
					instance.setProduct((com.dtc.fhir.gwt.Coding)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Coding");
				}
				break;
			case "color":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setColor((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "base":
				if (value instanceof com.dtc.fhir.gwt.VisionBase || value == null) {
					instance.setBase((com.dtc.fhir.gwt.VisionBase)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.VisionBase");
				}
				break;
			case "eye":
				if (value instanceof com.dtc.fhir.gwt.VisionEyes || value == null) {
					instance.setEye((com.dtc.fhir.gwt.VisionEyes)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.VisionEyes");
				}
				break;
			case "sphere":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setSphere((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "cylinder":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setCylinder((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "axis":
				if (value instanceof com.dtc.fhir.gwt.IntegerDt || value == null) {
					instance.setAxis((com.dtc.fhir.gwt.IntegerDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.IntegerDt");
				}
				break;
			case "prism":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPrism((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "add":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setAdd((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "power":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setPower((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "backCurve":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setBackCurve((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "diameter":
				if (value instanceof com.dtc.fhir.gwt.Decimal || value == null) {
					instance.setDiameter((com.dtc.fhir.gwt.Decimal)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.Decimal");
				}
				break;
			case "brand":
				if (value instanceof com.dtc.fhir.gwt.StringDt || value == null) {
					instance.setBrand((com.dtc.fhir.gwt.StringDt)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.StringDt");
				}
				break;
			case "modifierExtension":
				if (value instanceof com.dtc.fhir.gwt.Extension || value == null) {
					List<com.dtc.fhir.gwt.Extension> modifierExtensionList = instance.getModifierExtension();
					if (modifierExtensionList.size() < index + 1) {
						modifierExtensionList.add((com.dtc.fhir.gwt.Extension)value);
					} else {
						modifierExtensionList.set(Math.min(modifierExtensionList.size() - 1, index), (com.dtc.fhir.gwt.Extension)value);
					}
				} else {
					throw new UnsupportedOperationException();
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of VisionPrescriptionDispense");
			}
		}

		static Object get(com.dtc.fhir.gwt.VisionPrescriptionDispense _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "notes":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getNotes();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setNotes(_field_);
				}
				return _field_;}
			case "duration":
				{com.dtc.fhir.gwt.SimpleQuantity _field_ = _instance_.getDuration();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.SimpleQuantity();
					_instance_.setDuration(_field_);
				}
				return _field_;}
			case "product":
				{com.dtc.fhir.gwt.Coding _field_ = _instance_.getProduct();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Coding();
					_instance_.setProduct(_field_);
				}
				return _field_;}
			case "color":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getColor();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setColor(_field_);
				}
				return _field_;}
			case "base":
				{com.dtc.fhir.gwt.VisionBase _field_ = _instance_.getBase();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.VisionBase();
					_instance_.setBase(_field_);
				}
				return _field_;}
			case "eye":
				{com.dtc.fhir.gwt.VisionEyes _field_ = _instance_.getEye();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.VisionEyes();
					_instance_.setEye(_field_);
				}
				return _field_;}
			case "sphere":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getSphere();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setSphere(_field_);
				}
				return _field_;}
			case "cylinder":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getCylinder();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setCylinder(_field_);
				}
				return _field_;}
			case "axis":
				{com.dtc.fhir.gwt.IntegerDt _field_ = _instance_.getAxis();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.IntegerDt();
					_instance_.setAxis(_field_);
				}
				return _field_;}
			case "prism":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPrism();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPrism(_field_);
				}
				return _field_;}
			case "add":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getAdd();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setAdd(_field_);
				}
				return _field_;}
			case "power":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getPower();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setPower(_field_);
				}
				return _field_;}
			case "backCurve":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getBackCurve();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setBackCurve(_field_);
				}
				return _field_;}
			case "diameter":
				{com.dtc.fhir.gwt.Decimal _field_ = _instance_.getDiameter();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.Decimal();
					_instance_.setDiameter(_field_);
				}
				return _field_;}
			case "brand":
				{com.dtc.fhir.gwt.StringDt _field_ = _instance_.getBrand();
				if (_field_ == null) {
					_field_ = new com.dtc.fhir.gwt.StringDt();
					_instance_.setBrand(_field_);
				}
				return _field_;}
			case "modifierExtension":
				List<com.dtc.fhir.gwt.Extension> modifierExtensionList = _instance_.getModifierExtension();
				if (modifierExtensionList.size() < _index_ + 1) {
					modifierExtensionList.add(new com.dtc.fhir.gwt.Extension());
				}
				return modifierExtensionList.get(Math.min(modifierExtensionList.size() - 1, _index_));
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of VisionPrescriptionDispense");
			}
		}
	}
	private static class SetXPathUsageType {
		static void set(com.dtc.fhir.gwt.XPathUsageType instance, List<String> path, Object value) {
			if (path.size() == 1) {
				set(instance, path.get(0), value);
				return;
			}

			String name = parseName(path.get(0));
			int index = parseIndex(path.get(0));

			Object activity = get(instance, name, index);
			PromiseSetter.set(activity, path.subList(1, path.size()), value);
		}

		static void set(com.dtc.fhir.gwt.XPathUsageType instance, String path, Object value) {
			String name = parseName(path);
			int index = parseIndex(path);

			switch(name) {
			case "value":
				if (value instanceof com.dtc.fhir.gwt.XPathUsageTypeList || value == null) {
					instance.setValue((com.dtc.fhir.gwt.XPathUsageTypeList)value);
				} else {
					throw new IllegalArgumentException("value is not a com.dtc.fhir.gwt.XPathUsageTypeList");
				}
				break;
			case "id":
				if (value instanceof java.lang.String || value == null) {
					instance.setId((java.lang.String)value);
				} else {
					throw new IllegalArgumentException("value is not a java.lang.String");
				}
				break;
			default:
				throw new IllegalArgumentException(name + " is not a field of XPathUsageType");
			}
		}

		static Object get(com.dtc.fhir.gwt.XPathUsageType _instance_, String _name_, int _index_) {
			switch(_name_) {
			case "value":
				{com.dtc.fhir.gwt.XPathUsageTypeList _field_ = _instance_.getValue();
				if (_field_ == null) {
					throw new IllegalArgumentException(_name_ + " can't auto initial");
				}
				return _field_;}
			case "id":
				{java.lang.String _field_ = _instance_.getId();
				if (_field_ == null) {
					_field_ = new java.lang.String();
					_instance_.setId(_field_);
				}
				return _field_;}
			default:
				throw new IllegalArgumentException(_name_ + " is not a field of XPathUsageType");
			}
		}
	}
}